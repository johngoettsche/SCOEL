#
# varprofile.icn
# Ziad Al-Sharif
# June 1, 2008 
#

#
# What does it mean to be a dead variable:
# a variable(global/local) is dead only if:
#   1) it is assigned and never referenced (read)
#   2) it is read and never assigned or referenced before beaing assigned
# What about un-initialized variables ????
# What about unused parameters ????
#

$include "evdefs.icn"

#
# This class monitors variables usage during the execution of a program
# and build information about the most used ones (Local  & global)
#
$ifndef StandAlone
class DeadVar : Listener(
$else
class DeadVar (
$endif

   eventMask,         # A cset of the Monitored events 

   procCallCount,     # Tracks all procedures number of calls

   GlobalVar,         # A table used to execlude used built-ins and procedures
   assignedVarCount,  # Table Counts the number of times each var is assigned
   varLastAssigned,   # Table tracks each var last assigned location
   assignedVarSet,    # Set Tracks all assigned variables
   referencedVarCount,# Table Counts the number of times each var is referenced
   varLastReferenced, # Table tracks each var last referenced location
   referencedVarSet,  # Set Tracks all referenced variables

   DeadVars,          # A set of the dead variable names
   DeadVarInfo        # A list with all of the 
   )

#
# Checks for Dead Variables
# The monitored events are E_Pcall, E_Deref 
#
method handle_Events()
   static pname

   if &eventcode == E_Pcall then{
      pname := image(&eventvalue)
      pname := pname[find(" ", pname)+1: 0]
      procCallCount[pname] +:= 1
      }
   else if &eventcode == E_Assign then{
      if (find("+",&eventvalue) & \GlobalVar[&eventvalue]) |
                                       find("-",&eventvalue) then{
         assignedVarCount[&eventvalue] +:= 1
         insert(assignedVarSet,&eventvalue)
         varLastAssigned[&eventvalue] := keyword("file",Monitored)||
                                         "-"||
                                         keyword("line",Monitored)
         } 
      }
    else if &eventcode == E_Deref & type(&eventvalue) == "string" then{
      if (find("+",&eventvalue) & \GlobalVar[&eventvalue]) |
                                       find("-",&eventvalue) then {
         referencedVarCount[&eventvalue] +:= 1 
         insert(referencedVarSet,&eventvalue)
         varLastReferenced[&eventvalue] := keyword("file",Monitored)||
                                           "-"||
                                           keyword("line",Monitored)
         }
      }
end

#
# Updates the Dead Variabls info,
# it receives the param j which is the most important j Variables 
#
method update_Info(j)
   local i:=1, k, var, vname, scope, info

   DeadVars := assignedVarSet -- referencedVarSet
   if \DeadVars & *DeadVars > 0 then {
      if /j then j := *DeadVars + 1
      else  j >=:= *DeadVars + 1
  
      DeadVarInfo := sort(DeadVars)[1:j]
      # 1-"Num"      | # 2-"File Name" | # 3-"Line #"
      # 4-"Var Name" | # 5-"Scope"     | # 6-"#Call"  | # 7-"#Assigned" 
      while i <= j  & \DeadVarInfo & \DeadVarInfo[i] do {
         var := DeadVarInfo[i]
         k := find("-"|"+",var)
         vname := var[1:k]
         if var[k] == "+" then scope := "global"
         else                  scope := var[k+1:0]
         info := varLastAssigned[var]
         DeadVarInfo[i] := [i,
                            info[1: k:=find("-",info)],
                            info[k+1 : 0],
                            vname, 
                            scope,
                            procCallCount[scope],
                            assignedVarCount[var]
                            ]
         i +:= 1
         }
   }
end

#
# Prints out the dead vars info 
# It is to be used in a console based application such as UDB
#
method write_Info( num )
   local i:=1

   update_Info(num)
   num := if \DeadVarInfo then *DeadVarInfo + 1 else 0

   write("\n---- [The First (",num,") Dead Variables] ----")
   write(left("Num",3),        " : ",
         left("File Name",10), " : ",
         left("Line #",6),     " : ",
         left("Var Name",10),  " : ",
         left("Scope",10),     " : ",
         left("#Call",5),      " : ",
         left("#Assigned",10)
         )
   while i <= num &  \DeadVarInfo do{
      write(left(DeadVarInfo[i][1],3), " | ",
            left(DeadVarInfo[i][2],10)," : ",
            left(DeadVarInfo[i][3],6), " : ",
            left(DeadVarInfo[i][4],10)," : ",
            left(DeadVarInfo[i][5],10)," : ",
            left(DeadVarInfo[i][6],5), " : ",
            left(DeadVarInfo[i][7],10)
            )
      i +:= 1
      }
end

#
# Initialize the global variables count,
# This way will eliminate the built ins and the user defined procedures:)
# This technique is not needed for the local variables.
# 
method init_GlobalVar()
   local x

   GlobalVar := table()
   every x := globalnames(Monitored) do{
      if not find("procedure"|"function",image(variable(x, Monitored))) then
         GlobalVar[x||"+"] := 0
     }
end

#
# Initialize the class attributes
#
initially(name, state)

$ifndef StandAlone
   self.Listener.initially(name, state)
$endif

   eventMask  := cset(E_Exit || E_Error) ++ 
                 cset(E_Pcall || E_Assign || E_Deref)

   procCallCount  := table(0)

   init_GlobalVar()
   assignedVarCount   := table(0)
   varLastAssigned    := table("??") 
   assignedVarSet     := set()
   referencedVarCount := table(0)
   varLastReferenced  := table("??")
   referencedVarSet   := set()

  #DeadVars    := set()
   DeadVarInfo := []
   
end

#
# StandAlone is defined when this tool is used as a stand-alone monitor.
#  Otherwise, this tool can be statically linked into the main utop/udb
#  source code 
#
$ifdef StandAlone

link evinit

#
# This main procedure is only used in the standalone mode
# or udb's external co-expression mode
#
procedure main(arg)
   local obj
   
   EvInit(arg) | stop(" **** can not initialize Monitor !!!")
   obj := DeadVar()

   while EvGet(obj.eventMask) do{
      if &eventcode == (E_Exit | E_Error) then
         obj.write_Info(10)
      else
         obj.handle_Events() 
      }
   #obj.write_Info(10)
   handle_Events()
end

#
# This handle_Events procedure is only used udb's external 
# inter-program procedure calls
#
procedure handle_Events(code, value)
   static obj
   
   initial{
      #EvInit(arg) | stop(" **** can not initialize Monitor !!!")
      obj := DeadVar()
      return obj.eventMask
      } 

   &eventcode  := code
   &eventvalue := value

   if &eventcode == (E_Exit | E_Error) then
      obj.write_Info(10)
   else
      obj.handle_Events() 
end

$endif
