#
# trace.icn
# Handles the main dynamic tracing facilities supported by UDB
# Author : Ziad Al-Sharif
# Date   : Feb 24, 2008
# e-mail : zsharif@gmail.com
#

$include "evdefs.icn"
$include "defaults.icn"

link evnames

#
# This record is used by the trace Behavior
#
record LocationRec(
   fname, # is the source file name that has the current procedure
   line,  # is the line in the source file that starts on 
   level, # is the level of the procedure in the execution stack
   ecode  # the current event code at that location
   )

#
# This record keeps information about the watched variable
#
class TraceRec(
   name,       # a string name of the traced object as entered by the user
   id,         # integer identifies the tracepoint number
   hitMax,     # integer specifies the number of hits before notifying the user
   hitCount,   # integer counts the total number of Tracepoint hits
   missCount,  # integer counts the total number of Tracepoint misses 
   op,         # the operation used in the watch condition
   traceValue, # the value that user wants to catch (trace); value of interes
   traceList,  # a list of LocationRec record, used for tracing back
   eventMask,  # a cset of the traced events
   state,      # an integer code tells if the trace is enabled/disabled/deleted 
   silent,     # tells when the trace is silent, not null = silent is on
   traceType,  # a string holds the type of the tracing commaand
   cmd         # a string with the used command
   )

   #
   # public method
   # returns the trace name based on the trace type 
   #
   method getTraceName()
      return case traceType of {
      "ptrace": "procedure "
      "ftrace": "function "
      "otrace": "operator "
      default : "?? "
      }
   end

   #
   # Return a string value for the current trace state
   #
   method getTraceState()
   return case state of {
      ENABLED: "enabled"
      DISABLED: "disabled"
      DELETED: "deleted"
      default: "????"
      }
   end
   #
   # Conditionally change state, if not already in that state.
   #
   method condAble(newstate)
      if newstate = ENABLED & state = DISABLED then return state := ENABLED
      if newstate = DISABLED & state = ENABLED then return state := DISABLED
      if newstate = DELETED & state ~= DELETED then return state := DELETED
   end
end

#
# This class handles both the< variable and behavior tracer
#
class Tracing(
   DState,        # An object of the class DebugState()
   id,            # integer identifies the tracepoint number
   ecodeSet,      # a cset of the current event traced codes
   hits,          # the max number of traced hits
   silent,        # a flag tells whether the trace is silent or not
   traceName,     # a string holds the name of the tracing commaand
   traceType,     # a string holds the type of the tracing commaand
   traceBehavior, # traced object are mapped to TraceRec records
   Behavior,      # a set of valid traceable behaviors
   Operator,      # a set of valid traceable operations
   ReturnCode,    # used when there is a cndition on the return value (ret<0)
   msg            # a string formated with the current message
   )

#
# private method
# when the watchpoint has a not null catch value, this method decides
# whether to pause and print the info or not
#
method checkTraceValue(name)

   if numeric(&eventvalue) & numeric(traceBehavior[name].traceValue) then {
      case traceBehavior[name].op of {
         "=":{
            if &eventvalue = traceBehavior[name].traceValue then
               printInfo(name)
            return }
         "~=":{
            if &eventvalue ~= traceBehavior[name].traceValue then
               printInfo(name)
            return }
         ">":{
            if &eventvalue > traceBehavior[name].traceValue then
               printInfo(name)
            return }
         "<":{
            if &eventvalue < traceBehavior[name].traceValue then
               printInfo(name)
            return }
         ">=":{
            if &eventvalue >= traceBehavior[name].traceValue then
               printInfo(name)
            return }
         "<=":{
            if &eventvalue <= traceBehavior[name].traceValue then
               printInfo(name)
            return }
         default:{
            msg:="\n   "||name||" has an unkown operation on catch value."
            DState.Write(msg)
            fail   }
         }
      traceBehavior[name].missCount +:= 1
      return
      }
   else if type(&eventvalue) == "string" &
           type(traceBehavior[name].traceValue) == "string" then {
      case traceBehavior[name].op of {
         "=":{
            if &eventvalue == traceBehavior[name].traceValue then
               printInfo(name)
            return }
         "~=":{
            if &eventvalue ~== traceBehavior[name].traceValue then
               printInfo(name)
            return }
         ">":{
            if &eventvalue >> traceBehavior[name].traceValue then
               printInfo(name)
            return }
         "<":{
            if &eventvalue << traceBehavior[name].traceValue then
               printInfo(name)
            return }
         ">=":{
            if &eventvalue >>= traceBehavior[name].traceValue then
               printInfo(name)
            return }
         "<=":{
            if &eventvalue <<= traceBehavior[name].traceValue then
               printInfo(name)
            return }
         default:{
            msg:="\n   "||name||" has an unkown operation"
            DState.Write(msg)
            fail   }
         }
      traceBehavior[name].missCount +:= 1
      return   
      }
   fail
end

#
# constructs and updates the the change on the traceMask after all of
# new trace, enable, disable, delete or clear
#
method UpdateMask()
   local x, mask := ''

   every x := !traceBehavior do
      if x.state = ENABLED then mask ++:= x.eventMask

   DState.traceMask := mask
end

#
# Try to build the Behavior Tracer for some event in the traceState cset.
#
method checkTraceBehavior()
   static name
   local tbnam

   if member(DState.traceMask, &eventcode) then {
      #write("Tracing.......................")
      name := image(&eventvalue)
      if \ (tbnam := traceBehavior[name]) & tbnam.state = ENABLED &
	  member(tbnam.eventMask, &eventcode) then {
         if /tbnam.hitMax | tbnam.hitCount < abs(tbnam.hitMax) then {
            if member(ReturnCode, &eventcode) & \ (tbnam.traceValue) then
               checkTraceValue(name)
            else
               printInfo(name)
            } 
         }
      else
         fail
      }
end 

#
# private method
# Prints the watched object info whenever it reaches a condition or state
#
method printInfo(name)
   local tbn, R := LocationRec(keyword("file", Monitored) | "?",
			  keyword("line", Monitored) | "?",
			  keyword("level", Monitored)| "?",
			  &eventcode)

   write(image(R))
   tbn := traceBehavior[name]
   push(tbn.traceList, R)
   tbn.hitCount +:= 1

   if \ (tbn.silent) | \ (tbn.hitMax) then {
      if \ (tbn.silent) then {
         if tbn.hitCount >= \ (tbn.hitMax) > 0 then {
            showEndTraceInfo(name)
            }
         return
         }
      }
   
   DState.State := PAUSE
   DState.RunCode := TRACE

   msg  :="\n   Command   : " ||traceBehavior[name].cmd
   msg||:="\n   hit  total: " ||traceBehavior[name].hitCount
   if \traceBehavior[name].traceValue then
      msg||:="\n   miss total: " ||traceBehavior[name].missCount
   msg||:="\n   --------------------------------------------------\n"
   msg||:="   Tracepoint #" ||traceBehavior[name].id||" on: "||name||"; "||
          getBehaviorNames(&eventcode) ||", "||
          R.fname||":"||R.line||"."
   msg||:="\n   "||R.line||":"||
                DState.srcFile.getSrcLine(R.fname, R.line)
   DState.Write(msg)
end

#
# private method
# triggered at the end of a count watch, 
# it notfies the user that there is no more watching
#
method showEndTraceInfo(name)
   local r, i

   DState.State := PAUSE
   DState.RunCode := WATCH

   if traceBehavior[name].hitMax > 0 then { 
      msg :="\n   Reaching the last of "||traceBehavior[name].hitCount||" hits"
      if \traceBehavior[name].silent then {
         msg ||:=" of:\n   Tracepoint(Silent) #"
         msg ||:= traceBehavior[name].id||" at: "||name||"; "||
                  getBehaviorNames(traceBehavior[name].eventMask)||"."
         }
      }
   else
      msg := ""
   msg ||:="\n   Do you want to display old Trace Info (Y|n)? : " 
   DState.Writes(msg)
   if read() == (""|"y"|"Y"|"yes"|"YES") then {
      if traceBehavior[name].hitMax > 0 then { 
         msg :="\n   --------------------------------------------------"
         every i := 1 to *traceBehavior[name].traceList do {
            r := traceBehavior[name].traceList[i]
            msg||:="\n   "||i||"# at "||r.fname||":"||r.line||
                   "; level="||r.level||"."
            }
         DState.Write(msg)
         }
      else
         printOldTraceInfo(name,abs(traceBehavior[name].hitMax))
      }
end

#
# public method
# prints the results of traced expressions (old variable's information)
#
method printOldTraceInfo(name, max)
   local i, r
   
   if \traceBehavior[name].traceList then {
      msg  :="\n   Command   : " ||traceBehavior[name].cmd
      msg||:="\n   hit  total: " ||traceBehavior[name].hitCount
      if \traceBehavior[name].traceValue then
         msg||:="\n   miss total: " ||traceBehavior[name].missCount
      msg||:=   "\n   Tracepoint# " ||traceBehavior[name].id||" on "||name||
                "; "||getBehaviorNames(traceBehavior[name].eventMask)||"."
      msg||:=   "\n   --------------------------------------------------"

      if /max then max := *traceBehavior[name].traceList
      else  max >:= *traceBehavior[name].traceList

      if \traceBehavior[name].hitMax then
         max := abs(traceBehavior[name].hitMax)
     
      every i := 1 to max do {
         r := traceBehavior[name].traceList[i]
         msg||:="\n   "||i||"# at "||r.fname||":"||r.line||
                "; level="||r.level||"."
         }
      }
   else
      msg := "\n   "||name||": has no trace info yet!"
   DState.Write(msg)   
end

#
# prints the execution behavior tracer info
# it is used by traceBehavior()
#
method printTraceInfo(cmd)
   local name, id, tb

   if *traceBehavior = 0 then {
      msg :="\n   No tracepoints are available."
      DState.Write(msg)
      fail
      }

   msg := ""
   if *cmd = 2 then {
      if cmd[2] == ("trace" | "tracepoints") then {
         every tb := !traceBehavior do {
            msg||:="\n   Tracepoint #" ||tb.id||" on: "||
		tb.getTraceName() || tb.name||"; Traced Behaviors: "||
		getBehaviorNames(tb.eventMask)||
		"("||tb.getTraceState()||")."
            }
         }
      else if cmd[2] == ("ptrace" | "ftrace" | "otrace") then {
         traceType := cmd[2]
         every tb := !traceBehavior do {
            if tb.traceType == traceType then {
               msg||:="\n   Tracepoint #" ||tb.id||" on: "||
                      tb.getTraceName() || tb.name||"; Traced Behaviors: "||
                      getBehaviorNames(tb.eventMask)||
                      "("||tb.getTraceState()||")."
               DState.Write(msg)
               return
               }
            }
         msg:= "\n   No tracepoints of type \""||cmd[2]||"\" are available."
         DState.Write(msg)
         fail
         }
      }
   else {
      if id := integer(cmd[3]) then {
         every tb := !traceBehavior do {
            if tb.id == id then {
               msg||:="\n   Tracepoint #" ||tb.id||" on: "||
                      tb.getTraceName()|| tb.name||"; Traced Behaviors: "||
                      getBehaviorNames(tb.eventMask)||
                      "("||tb.getTraceState()||")."
               DState.Write(msg)
               return
               }
            }
         msg:= "\n   Tracepoint #"||id||" is not available."
         DState.Write(msg)
         fail
         }
      else {
         id := cmd[3]
         every tb := !traceBehavior do {
            if tb.name == id then {
               msg||:="\n   Tracepoint #" ||tb.id||" on: "||
                      tb.getTraceName()|| tb.name||"; Traced Behaviors: "||
                      getBehaviorNames(tb.eventMask)||
                      "("||tb.getTraceState()||")."
               DState.Write(msg)
               return
               }
            }
         msg:= "\n   No tracepoints on \""||cmd[2]||"\" is available."
         DState.Write(msg)
         fail
         }
      }
   if *msg = 0 then
      msg:= "\n   No tracepoints of type \""||cmd[3]||"\" are available."
   DState.Write(msg)
end

#
# get a cset of the behaviors
#
method getBehaviorCode(behavior, kind)
   local ecodeSet

   if kind == "procedure" then {
      case behavior of {
        "start"   |
        "enter"   |
        "begin"   :{ ecodeSet := cset(E_Pcall || E_Presum)}
        "call"    :{ ecodeSet := cset(E_Pcall)            }
        "resume"  :{ ecodeSet := cset(E_Presum)           }
        "exit"    |
        "end"     :{ ecodeSet := cset(E_Pfail || E_Psusp ||
                                      E_Prem  || E_Pret)  }
        "fail"    :{ ecodeSet := cset(E_Pfail)            }
        "suspend" :{ ecodeSet := cset(E_Psusp)            }
        "remove"  :{ ecodeSet := cset(E_Prem)             }
        "return"  :{ ecodeSet := cset(E_Pret)             }
        default   :{ fail                                 }
        }
      return ecodeSet
      }
   else if kind == "function" then {
      case behavior of {
        "start"   |
        "enter"   |
        "begin"   :{ ecodeSet := cset(E_Fcall || E_Fresum)}
        "call"    :{ ecodeSet := cset(E_Fcall)            }
        "resume"  :{ ecodeSet := cset(E_Fresum)           }
        "exit"    |
        "end"     :{ ecodeSet := cset(E_Ffail || E_Fsusp ||
                                      E_Frem  || E_Fret)  }
        "fail"    :{ ecodeSet := cset(E_Ffail)            }
        "suspend" :{ ecodeSet := cset(E_Fsusp)            }
        "remove"  :{ ecodeSet := cset(E_Frem)             }
        "return"  :{ ecodeSet := cset(E_Fret)             }
        default   :{ fail                                 }
        }
      return ecodeSet
      }
   else if kind == "operator" then {
      case behavior of {
        "start"   |
        "enter"   |
        "begin"   :{ ecodeSet := cset(E_Ocall || E_Oresum)}
        "call"    :{ ecodeSet := cset(E_Ocall)            }
        "resume"  :{ ecodeSet := cset(E_Oresum)           }
        "exit"    |
        "end"     :{ ecodeSet := cset(E_Ofail || E_Osusp ||
                                      E_Orem  || E_Oret)  }
        "fail"    :{ ecodeSet := cset(E_Ofail)            }
        "suspend" :{ ecodeSet := cset(E_Osusp)            }
        "remove"  :{ ecodeSet := cset(E_Orem)             }
        "return"  :{ ecodeSet := cset(E_Oret)             }
        default   :{ fail                                 }
        }
      return ecodeSet
      }
   fail
end

#
# used only by the Trace Behavior stuff
#
method getBehaviorNames(ecode)
   local i, e, ename:="", name

   if type(ecode) == "cset" then {
      if *ecode > 0 then {
         ename := "("
         every e := !ecode do {
            name := evnames(e)
            i := (find(" ",name)+1) | 1
            ename ||:=name[i:0]||","
            }
         ename[-1] := ")"
         }
      }
   else {
      name := evnames(ecode)
      i := (find(" ",name)+1) | 1
      ename := name[i:0]
      }
   return ename
end

#
# adds new tracepoint into the traceBehavior record; name is the key
#
method addTracepoint(name, cmd)
    local op, val

    DState.traceMask ++:= ecodeSet
    id +:= 1
    
    if *cmd > 4 then {
       op := cmd[4]
       val := cmd[5]
       }
    #TraceRec(name, id, hitMax, hitCount, missCount
    #         op, traceValue, traceList, eventMask, cmd)
    traceBehavior[name] := 
       TraceRec(cmd[2], id, hits, 0, 0, op, val, [], ecodeSet, ENABLED,
                silent, traceType,DState.cmdHistory[1])
    # re-construct the traceMask 
    UpdateMask()

    msg := "\n   Tracepoint #" ||id||" on: "||
           traceBehavior[name].getTraceName()||
           traceBehavior[name].name||"; Traced Behaviors: "||
           getBehaviorNames(ecodeSet)
    DState.Write(msg)
    #write(ximage(traceBehavior))
    #every x := !ecodeSet do write(evnames(x))
end

#
# build Variable(s) and/or Behavior(s) tracer  
#
method cmdTrace(cmd)
   local name

   if DState.isValidCommand(cmd) then {
      if *cmd >= 2 & resolveTraceInfo(cmd) then {
         name := traceName || cmd[2]
         if \traceBehavior[name] then {
            msg :="\n   Tracepoint #"||traceBehavior[name].id||
                  " already exist: " ||name
            msg ||:="\n   previous command is : "||traceBehavior[name].cmd
            msg ||:="\n   Do you really want to replace it (Y/n)? : "
            DState.Writes(msg)
            if read() == (""|"y"|"Y"|"yes"|"YES") then {
               msg :="\n   previous command has been replaced."
               DState.Write(msg)
               addTracepoint(name, cmd)
               }
            else {
               msg :="\n   \""||DState.cmdHistory[1]||"\" command is ignored."
               DState.Write(msg)
               fail
               }
            }
         else
            addTracepoint(name, cmd)
         }
      else {
         #*cmd = 1 [trace]
         printTraceInfo()
         }
      }
   else {
      DState.State := ERROR
      msg:="\n   Undefined Command: \""||DState.cmdHistory[1]||"\""||
           "\n   Try \"help trace\" for assistance."
      DState.Write(msg)
      DState.State := SKIP
      }
end

#
# resolve tracing info, used by new command
# (udb) trace [-silent] [count] object [behavior [op value]]
# 
method resolveTraceInfo(cmd)
   
   initNewCmd()
   if cmd[2] == ("-s"|"-silent") then {
      silent := 1
      delete(cmd, 2)
      }

   if numeric(cmd[2]) then {
      hits := integer(cmd[2])
      delete(cmd, 2)
      }

   if DState.srcCode.isProcedure(cmd[2]) then {
      traceName := "procedure "
      traceType := "ptrace"
      if \cmd[3] & member(Behavior, cmd[3]) then
         ecodeSet := getBehaviorCode(cmd[3],"procedure")
      else
         ecodeSet := ProcMask
      }
   else if DState.srcCode.isFunction(cmd[2]) then {
      traceName := "function "
      traceType := "ftrace"
      if \cmd[3] & member(Behavior, cmd[3]) then
         ecodeSet := getBehaviorCode(cmd[3], "function")
      else
         ecodeSet := FncMask
      }
   else if member(Operator, cmd[2]) then {
      traceName := "function "
      traceType := "otrace"
      if \cmd[3] & member(Behavior, cmd[3]) then
         ecodeSet := getBehaviorCode(cmd[3], "operator")
      else
         ecodeSet := OperMask
      }
   else {
      msg :="\n   \""||DState.cmdHistory[1]||"\" Unknown action_
             \n   Try \"help trace\" for assistance"
      DState.Write(msg)
      fail
      }
   return
end

#
# It clears pre-set tracepoints
#
method cmdClear(cmd)
   local name, id, i:=0

   # clears all of the preset tracepoints
   # clear trace
   if *cmd = 2 then {
      if cmd[2] == ("trace" | "tracepoints") then {
         every name := key(traceBehavior) do {
             delete(traceBehavior, name)
             i +:= 1
             }
         if i > 0 then {
            # re-construct the traceMask 
            UpdateMask()
            msg:="\n   All tracepoints are cleared; ("||i||" total)."
            }
         else
            msg:="\n   No tracepoints are available to be cleared."
         DState.Write(msg)
         return
         }
      else if cmd[2] == ("ptrace" | "ftrace" | "otrace") then {
         traceType := cmd[2]
         every name := key(traceBehavior) do {
            if traceBehavior[name].traceType == traceType then {
               delete(traceBehavior, name)
               i +:= 1
               }
            }
         if i > 0 then {
            # re-construct the traceMask 
            UpdateMask()
            msg:="\n   All tracepoints of type \""||cmd[2]||
                 "\" are cleared; ("||i||" total)."
            }
         else
            msg:="\n   No tracepoints of type \""||cmd[2]||
                 "\" are available to be cleared."
         DState.Write(msg)
         return
         }
      }
   else if *cmd >= 3 then {
      if id := integer(cmd[3]) then {
         every name := key(traceBehavior) do {
            if traceBehavior[name].id = id then {
               delete(traceBehavior, name)
               # re-construct the traceMask 
               UpdateMask()
               msg:="\n   Tracepoint #"||id||" is cleared."
               DState.Write(msg)
               return
               }
            }
         msg := "\n   Tracepoint #"||id||" is not available."
         DState.Write(msg)
         fail
         }
      else {
         delete(cmd, 2)
         if resolveTraceInfo(cmd) then {
            name := traceName || cmd[2]
            if member(traceBehavior, name) then {
               id := traceBehavior[name].id
               delete(traceBehavior, name)
               # re-construct the traceMask 
               UpdateMask()
               msg:="\n   Tracepoint #"||id||" : "|| name ||" is cleared."
               DState.Write(msg)
               return
               }
            else {
               msg:="\n   No tracepoint available on "||name||"."
               DState.Write(msg)
               fail
               }
            }
         }
     }
   msg:="\n   Undefined Command: \""||DState.cmdHistory[1]||"\""||
        "\n   Try \"help\" for assistance."
   DState.Write(msg)
   fail
end

#
# It deletes pre-set tracepoints
#
method cmdDelete(cmd)
   local name, id, tb, i := 0

   # deletes all of the preset tracepoints
   # delete trace
   if *cmd = 2 then {
      if cmd[2] == ("trace" | "tracepoints") then {
         every (!traceBehavior).condAble(DELETED) do i +:= 1
         if i > 0 then {
            # re-construct the traceMask 
            UpdateMask()
            msg:="\n   All tracepoints are deleted; ("||i||" total)."
           }
         else
           msg:="\n   No tracepoints to are available to be deleted."
         DState.Write(msg)
         return
         }
      else if cmd[2] == ("ptrace" | "ftrace" | "otrace") then {
         traceType := cmd[2]
         every name := key(traceBehavior) do {
            if traceBehavior[name].traceType == traceType then {
               if traceBehavior[name].condAble(DELETED) then {
                  i +:= 1
                  }
               }
            }
         if i > 0 then {
            # re-construct the traceMask 
            UpdateMask()
            msg:="\n   All tracepoints of type \""||cmd[2]||
                 "\" are deleted; ("||i||" total)."
            }
         else
            msg:="\n   No tracepoints of type \""||cmd[2]||
                 "\" are available to be deleted."
         DState.Write(msg)
         return
         }
      }
   else if *cmd >= 3 then {
      # delete trace 1
      if id := integer(cmd[3]) then {
         every tb := !traceBehavior do {
            if tb.id = id then {
               if tb.condAble(DELETED) then {
                  # re-construct the traceMask 
                  UpdateMask()
                  msg:="\n   Tracepoint #"||id||" is deleted."
                  DState.Write(msg)
                  return
                  }
               else {
                  if tb.state = DELETED then
                     msg:="\n   Tracepoint #"||id||" is already deleted."
                  else
                     msg:="\n   Tracepoint #"||id||" is has unkown state."
                  DState.Write(msg)
                  fail
                  }
               } 
            }
         msg := "\n   Tracepoint #"||id||" is not available."
         DState.Write(msg)
         fail
         }
      else {
         # delete trace [proc-name| fnc-name| oper-name]
         delete(cmd, 2)
         if resolveTraceInfo(cmd) then {
            name := traceName || cmd[2]
            if member(traceBehavior, name) then {
               id := traceBehavior[name].id
               if traceBehavior[name].condAble(DELETED) then {
                  # re-construct the traceMask 
                  UpdateMask()
                  msg:="\n   Tracepoint #"||id||" is deleted."
                  DState.Write(msg)
                  return
                  }
               else {
                  if traceBehavior[name].state = DELETED then
                     msg:="\n   Tracepoint #"||id||" is already deleted."
                  else
                     msg:="\n   Tracepoint #"||id||" is has unkown state."
                  DState.Write(msg)
                  fail
                  }
               }
            else {
               msg:="\n   No tracepoint available on "||name||"."
               DState.Write(msg)
               fail
               }
            }
         }
     }
   msg:="\n   Undefined Command: \""||DState.cmdHistory[1]||"\""||
        "\n   Try \"help\" for assistance."
   DState.Write(msg)
   fail
end

#
# It enables pre-set tracepoints
#
method cmdEnable(cmd)
   local name, id, i:=0

   # enables all of the preset tracepoints
   # enable trace
   if *cmd = 2 then {
      if cmd[2] == ("trace" | "tracepoints") then {
         every (!traceBehavior).condAble(ENABLED) do {
	    i +:= 1
            }
         if i > 0 then {
            # re-construct the traceMask 
            UpdateMask()
            msg:="\n   All tracepoints are enabled; ("||i||" total)."
            } 
         else
            msg:="\n   No tracepoints are available to be enabled."
         DState.Write(msg)
         return
         }
      else if cmd[2] == ("ptrace" | "ftrace" | "otrace") then {
         traceType := cmd[2]
         every name := key(traceBehavior) do {
            if traceBehavior[name].traceType == traceType then {
               if traceBehavior[name].condAble(ENABLED) then {
                  i +:= 1
                  }
               }
            }
         if i > 0 then {
            # re-construct the traceMask 
            UpdateMask()
            msg:="\n   All disabled tracepoints of type \""||cmd[2]||
                 "\" are enabled; ("||i||" total)."
            }
         else
            msg:="\n   No disabled tracepoints of type \""||cmd[2]||
                 "\" are available to be enabled."
         DState.Write(msg)
         return
         }
      }
   else if *cmd >= 3 then {
      # enable trace 1
      if id := integer(cmd[3]) then {
         every name := key(traceBehavior) do {
            if traceBehavior[name].id = id then {
               if traceBehavior[name].condAble(ENABLED) then {
                  # re-construct the traceMask 
                  UpdateMask()
                  msg:="\n   Tracepoint #"||id||" is enabled."
                  DState.Write(msg)
                  return
                  }
               else {
                  if traceBehavior[name].state = ENABLED then
                     msg:="\n   Tracepoint #"||id||" is already enabled."
                  else
                     msg:="\n   Tracepoint #"||id||" is deleted;_
                           it cannot be enabled."
                  DState.Write(msg)
                  fail
                  }
               }
            }
         msg := "\n   Tracepoint #"||id||" is not available."
         DState.Write(msg)
         fail
         }
      else {
         # enable trace [proc-name| fnc-name| oper-name]
         delete(cmd, 2)
         if resolveTraceInfo(cmd) then {
            name := traceName || cmd[2]
            if member(traceBehavior, name) then {
               id := traceBehavior[name].id
               if traceBehavior[name].condAble(ENABLED) then {
                  # re-construct the traceMask 
                  UpdateMask()
                  msg:="\n   Tracepoint #"||id||" is enabled."
                  DState.Write(msg)
                  return
                  }
               else {
                  if traceBehavior[name].state = ENABLED then
                     msg:="\n   Tracepoint #"||id||" is already enabled."
                  else
                     msg:="\n   Tracepoint #"||id||" is deleted;_
                           it cannot be enabled."
                  DState.Write(msg)
                  fail
                  }
               }
            else {
               msg:="\n   No tracepoint available on "||name||"."
               DState.Write(msg)
               fail
               }
            }
         }
     }
   msg:="\n   Undefined Command: \""||DState.cmdHistory[1]||"\""||
        "\n   Try \"help\" for assistance."
   DState.Write(msg)
   fail
end

#
# It disables pre-set tracepoints
#
method cmdDisable(cmd)
   local name, id, i:=0

   # disables all of the preset tracepoints
   # disable trace
   if *cmd = 2 then {
      if cmd[2] == ("trace" | "tracepoints") then {
         every name := key(traceBehavior) do {
            if traceBehavior[name].condAble(DISABLED) then {
               i +:= 1
               }
            }
         if i > 0 then {
            # re-construct the traceMask 
            UpdateMask()
            msg:="\n   All tracepoints are enabled; ("||i||" total)."
            }
         else
            msg:="\n   No tracepoints to are available to be disabled."
         DState.Write(msg)
         return
         }
      else if cmd[2] == ("ptrace" | "ftrace" | "otrace") then {
         traceType := cmd[2]
         every name := key(traceBehavior) do {
            if traceBehavior[name].traceType == traceType then {
               if traceBehavior[name].condAble(DISABLED) then {
                  i +:= 1
                  }
               }
            }
         if i > 0 then {
            # re-construct the traceMask 
            UpdateMask()
            msg:="\n   All enabled tracepoints of type \""||cmd[2]||
                 "\" are disabled; ("||i||" total)."
            }
         else
            msg:="\n   No enabled tracepoints of type \""||cmd[2]||
                 "\" are available to be disabled."
         DState.Write(msg)
         return
         }
      }
   else if *cmd >= 3 then {
      # disable trace 1
      if id := integer(cmd[3]) then {
         every name := key(traceBehavior) do {
            if traceBehavior[name].id = id then {
               if traceBehavior[name].condAble(DISABLED) then {
                  # re-construct the traceMask 
                  UpdateMask()
                  msg:="\n   Tracepoint #"||id||" is disabled."
                  DState.Write(msg)
                  return
                  }
               else {
                  if traceBehavior[name].state = ENABLED then
                     msg:="\n   Tracepoint #"||id||" is already disabled."
                  else
                     msg:="\n   Tracepoint #"||id||" is deleted;_
                           it cannot be disabled."
                  DState.Write(msg)
                  fail
                  }
               }
            }
         msg := "\n   Tracepoint #"||id||" is not available."
         DState.Write(msg)
         fail
         }
      else {
         # delete trace [proc-name| fnc-name| oper-name]
         delete(cmd, 2)
         if resolveTraceInfo(cmd) then {
            name := traceName || cmd[2]
            if member(traceBehavior, name) then {
               id := traceBehavior[name].id
               if traceBehavior[name].condAble(DISABLED) then {
                  # re-construct the traceMask 
                  UpdateMask()
                  msg:="\n   Tracepoint #"||id||" is disabled."
                  DState.Write(msg)
                  return
                  }
               else {
                  if traceBehavior[name].state = ENABLED then
                     msg:="\n   Tracepoint #"||id||" is already disabled."
                  else
                     msg:="\n   Tracepoint #"||id||" is deleted;_
                           it cannot be disabled."
                  DState.Write(msg)
                  fail
                  }
               }
            else {
               msg:="\n   No tracepoint available on "||name||"."
               DState.Write(msg)
               fail
               }
            }
         }
     }
   msg:="\n   Undefined Command: \""||DState.cmdHistory[1]||"\""||
        "\n   Try \"help\" for assistance."
   DState.Write(msg)
   fail
end

#
# public method
# re-initializes all tracepoints info
#
method resetTraceInfo()
   every (!traceBehavior)["hitCount"|"missCount"] := 0
end

#
# private method
# initialize class variables for the sake of starting new tracing command
#
method initNewCmd()
   traceType := traceName := ecodeSet := hits := silent := &null
end

#
# Initialization
#
initially()
   id            := 0
   ReturnCode    := cset(E_Pret || E_Fret || E_Oret)
   traceBehavior := table()
   Operator      := set( "+","-","*","/","\\","[]","++","--","**","<",">",
		     ">=","<=","=","==","===","~=","~==","~===",">>=","<<=")
   Behavior      := set("start", "enter", "begin","call","resume", 
                        "exit", "end","fail","return", "suspend","remove")
end
