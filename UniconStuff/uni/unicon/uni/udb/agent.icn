#
# agent.icn
# This abstract class handles the basic extra monitoring
# architecture. It is derived into internal and external type of monitors
# Author  : Ziad Al-Sharif
# Date    : Feb 24, 2008
# e-mail  : zsharif@gmail.com
#

$include "defaults.icn"

#
# Loads and initializes the internal monitors
#
class Agent(
   DState,          # An object of the class State()
   eventMask,       # Monitored events of the external or internal agent
   Clients,         # A table of the InternalClient record
   activeClients,   # A set of the current active clients
   disabledClients, # A set of the current disabled clients
   mtype,           # the derived class identity (internal or external)
   count,           # an integer holds the tatal number of monitors (Agents)
   enabled          # an integer hold the total number of enabled monitors
   )

#
# Enables the internal monitor
#
method cmdEnable(name)
   local msg:="??", obj

   if obj := \Clients[name] then {
      if obj.State = DISABLED then {
         obj.State := ENABLED
         insert(activeClients, obj)
         delete(disabledClients, name)
         enabled +:= 1
         build_Mask()
         msg:="\n   The "||mtype||" agent \""||name||"\" is ENABLED"
         }
      else
         msg:="\n   The "||mtype||" agent \""||name||"\"is already ENABLED"
      }
   else
      msg:="\n   The "||mtype||" agent \""||name||"\" is NOT Found!"
   DState.Write(msg)
end

#
# Disables the internal monitor
#
method cmdDisable(name)
   local obj, msg:="??"

   if obj := \Clients[name] then {
      if obj.State = ENABLED then {
         obj.State := DISABLED
         insert(disabledClients, name)
         delete(activeClients, obj)
         enabled -:= 1
         build_Mask()
         msg:="\n   The "||mtype||" agent \""||name||"\" is DISABLED"
         }
      else
         msg:="\n   The "||mtype||" agent \""||name||"\" is already DISABLED"
      }
   else
      msg:="\n   The "||mtype||" agent \""||name||"\" is NOT Found!"
   DState.Write(msg)
end

#
# printd out information about the enabled internals
#
method cmdInfo(name)
   local i:=0, msg:="", obj
    
   ## what if there is more than one monitor loaded with the same name??
   if \name then {
      if \Clients[name] then {
         if Clients[name].State = DISABLED then
            msg:="\n   The "||mtype||" agent \""||name||"\" is DISABLED"
         else
            msg:="\n   The "||mtype||" agent \""||name||"\" is ENABLED"
         }
      else
         msg:="\n   The "||mtype||" agent \""||name||"\" is NOT Found!"
      }
   else {
      if *activeClients > 0 then {
         i := 1
         msg ||:="\n   The following are the enabled \""||mtype|| "\" agents:"
         every obj := !activeClients do{
            msg ||:="\n   "|| left(i,3) ||": "||obj.Name
            i +:= 1
            }
         msg ||:= "\n   "
         }
      else
         msg ||:="\n   There are no enabled "||mtype||" agents !!! \n"

      if *disabledClients > 0 then{
         i := 1
         msg ||:="\n   The following are the disabled \""||mtype||"\" agents:"
         every name := !disabledClients do{
            msg ||:="\n   "|| left(i,3) ||": "||name
            i +:= 1
            }
         msg ||:= "\n   "
         }
      else
         msg ||:= "\n   There are no disabled "||mtype||" agents !!! \n"

      if i = 0 then
         msg := "\n   There are no "||mtype||" agents !!!"
      }
   DState.Write(msg)
end

#
# it constructs/re-constucts the eventMask from all active monitors  
#
method build_Mask()
   local obj

   eventMask := ''
   every eventMask ++:= (!activeClients).eventMask

   DState.eventMask ++:= eventMask
   if mtype == "internal" then {
      DState.internalMask := eventMask 
      #DState.Update()
      }
   else if mtype == ("external"|"semi-internal") then {
      DState.externalMask := eventMask 
      #DState.Update()
      }
end

#
# Initialization
#
initially(t)
   mtype   := t
   count   := enabled := 0
   Clients := table()
   activeClients   := set()
   disabledClients := set()
   eventMask := ''
end
