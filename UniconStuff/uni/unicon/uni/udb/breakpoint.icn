#
# breakpoint.icn
# It handles UDB's breakpoints related tasks
# Author: Ziad Al-Sharif
# Date:   7-15-2008
# e-mail: zsharif@gmail.com
#

$include "evdefs.icn"
$include "defaults.icn"

#
# For every file that has a breakpoint
# we will create a new breakPt in a list inside a table.
#
record breakPt(
   id,    # a unique identification number
   fname, # The file name that has the breakpoint
   line,  # The exact line number where the breakpoint is
   state, # an integer code with (ENABLED | DISABLED | DELETED)
   code   # a copy of the actual source code of that line
   )

class BreakPoint(
   DState,       # (Alias) object of type State class
   breakPoints,  # A table maps files to their list of breakpoints
   count,        # An integer counts the total number of breakpoints
   msg           # a string with latest message from this class
   )

#
# Check the Monitored file for a breakpoint
#
method checkBreakpoint()
   local  cur_file, cur_line, L, x, id

   cur_file := keyword("file", Monitored)
   if member(breakPoints, cur_file) then {
      cur_line := keyword("line", Monitored)
      L := breakPoints[cur_file]
      every x := !L do
	 if cur_line = x.line & x.state = ENABLED &
	    id := isBreakExist(cur_file,cur_line) then {
	    DState.State := PAUSE
	    # this delete will help "next" and "step" operate well
	    # jut remove the the breakMask set from the valueMask
	    # table temporarly until the continue command comes on
	    delete(DState.valueMask,E_Line)
	    msg   :="\n   Breakpoint #"||id||" at : "||
	            cur_file||":"||cur_line||"."
	    msg ||:="\n   "||cur_line||":"|| #???"\nb->"
	            DState.srcFile.getSrcLine(cur_file, cur_line)
	    DState.Write(msg)
	    return
	    }
      }
end

#
# returns a string name of the state of the brekpoint
#
method getBreakState(state)

   if state = ENABLED then
      return "enabled"
   else if state = DISABLED then
      return "disabled"
   else if state = DELETED then
      return "deleted"
   else
      return "unknown state"
end

#
# prints out a list of the existing breakpoints used by cmdBreak
#
method printBreakInfo(cmd)
   local x, L, bp, name

   if type(cmd) == "list" then name := cmd[3]
   msg := ""
   if /name then {
      every x := key(breakPoints) do {
	 L := breakPoints[x]
	 every bp := !L do
	    msg||:="\n   Breakpoint #"|| bp.id||" at : file "||bp.fname||
	           ", line "||bp.line||";("||
	           getBreakState(bp.state)||"). Source code"||": "||bp.code
	 }
      }
   else {
      if integer(name) then {
	 every x := key(breakPoints) do {
	    L := breakPoints[x]
	    every bp := !L do {
	       if name = bp.id then {
	          msg :="\n   Breakpoint #"|| bp.id||" at : file "||bp.fname||
	                ", line "||bp.line||";("||
	               getBreakState(bp.state)||"). Source code"||": "||bp.code
	          break break
	          }
	       }
	    msg||:="\n   Breakpoint #"||name||" is not available."
	    }
	 }
      else {
	 if not find(".icn",name) then name ||:= ".icn"
	 if DState.srcFile.isSrcFile(name) then {
	    if L:=breakPoints[name] & type(L) == "list" then {
	       every bp := !L do
	          msg||:="\n   Breakpoint #"||bp.id||" at : file "||bp.fname||
	                 ", line "||bp.line ||";(" ||
	                 getBreakState(bp.state)||"). Source code"||": "||
	                 bp.code
	       }
	    else
	       msg := "\n   No breakpoints available in "||name
	    }
	 else
	    msg := "\n   Source file \""||name||"\" is not in the binary !!!"
	 }
      }
   if *msg = 0 then
      msg := "\n   No breakpoints available."
   DState.Write(msg)
end

#
# check to see whether a breakpoint is pre-exist or not
#
method isBreakExist(fname, line)
   local L, bp

   if member(breakPoints, fname) then {
      L := breakPoints[fname]
      every bp := !L do
	 if bp.line = line & bp.state ~= DELETED then
	    return bp.id
      }
   fail
end

#
# used to add a new breakpoint into the
# breakPoints table and the breakMask set
#
method addBreakPoint(fname, bp)
   if member(breakPoints,fname) then
      put(breakPoints[fname], bp)
   else
      breakPoints[fname] := [bp]

   insert(DState.breakMask,bp.line)
end

#
# used it clear breakpoints, is used by cmdClear()
#
method deleteBreakPoint(fname, line)
   local L, i
   L := breakPoints[fname]
   every i := 1 to *L do {
      if L[i].line = line then
	 delete(L,i)
      }
   if *L = 0 then
      delete(breakPoints, fname)

   delete(DState.breakMask,line)
end

#
# Sets Breakpoints on line numbers or procedure names
# [b linenum], [b ProcName], [b file linenum]
#
method cmdBreak(cmd)
   local code, line, fname, cname, pkgname, arg, break_point, i

   msg := ""
   if not (DState.State = (LOAD | PAUSE)) then {
      DState.State := ERROR
      msg := "\n   No Program is Loaded_
	      \n   Type \"help\" for assistance"
      DState.Write(msg)
      return
      }
   DState.State := SKIP

   # if cmd is only "break"; will print all of the preset breakpoints info
   if *cmd = 1 then {  # i.e. break
      printBreakInfo()
      return
      }

   if *cmd = 2 then { # i.e. break line, or break procedure/method
      if DState.State = PAUSE then
	 fname := keyword("file",Monitored)
      else
	 fname := DState.srcFile.procMainFile
      arg   := cmd[2]
      }
   else if *cmd = 3 then { # i.e. break file line
      fname := cmd[2]
      arg   := cmd[3]
      }
   else if *cmd = 4 then { # i.e. break file:line, break class::method,
	                  #   or break package::procedure
      if cmd[3] == ":" then {
	 fname := cmd[2]
	 arg   := cmd[4]
	 }
      else if cmd[3] == "::" then {
	 pkgname := cname := cmd[2]
	 arg := cmd[4]
	 if DState.srcCode.isMethod(arg, cname)  then {
	    fname := DState.srcFile.getClassFile(cname)
	    line  := DState.srcFile.getMethodLine(arg, cname, fname)
	    }
	 else if DState.srcCode.isPackage(pkgname) &
	         DState.srcCode.isProcedure(arg)    then
	    fname := DState.srcFile.getProcFile(arg)
	 else {
	    DState.State := ERROR
	    msg   :="\n   \""||DState.cmdHistory[1]||"\" is Unknown command"
	    msg ||:="\n   Try \"help\" or \"help break\" for assistance."
	    DState.Write(msg)
	    return
	    }
	 }
      }
   else if *cmd = 6 & cmd[3] == "::" & cmd[5] == "::" then {
      # i.e. break package::class::method
      pkgname := cmd[2]
      cname := cmd[4]
      arg := cmd[6]
      if DState.srcCode.isPackage(pkgname) &
	 DState.srcCode.isMethod(arg, cname) then
	 fname := DState.srcFile.getProcFile(arg)
      }
   else {
      DState.State := ERROR
      msg   :="\n   \""||DState.cmdHistory[1]||"\" is Unknown command"
      msg ||:="\n   Try \"help\" or \"help break\" for assistance."
      DState.Write(msg)
      return
      }

   #write("fname=", image(fname))
   #fname := addExtension(fname)
   if \fname then {
      if not find(".icn", fname) then
	 fname ||:= ".icn"
      }
   else {
      DState.State := ERROR
      msg   :="\n   \""||DState.cmdHistory[1]||"\" is Unknown command"
      msg ||:="\n   Try \"help\" or \"help break\" for assistance."
      DState.Write(msg)
      return
      }

   if \line & \fname then {
      break_point := breakPt(count +:= 1, fname, line, ENABLED,
	                     DState.srcFile.getSrcLine(fname, line))
      }
   else if DState.srcFile.isSrcFile(fname) then {
      if DState.srcFile.isLoaded(fname) then {
	 if line := integer(arg) then {
	    if DState.srcFile.isInFile(fname, line) then {
	       if code := DState.srcFile.searchFileLines(fname, line) then
	          break_point:= breakPt(count +:= 1, fname, line, ENABLED,code)
	       else {
	          msg:="\n   Line number was not found,_
	                \n   Please try a different line number"
	          DState.Write(msg)
	          return
	          }
	       }
	    else {
	       msg:="\n   Line number "||line||" out of range; "||fname||
	            " has "||DState.srcFile.getFileTotalLines(fname)||" lines."
	       DState.Write(msg)
	       return
	       }
	    }
	 else {
	    if line := DState.srcFile.searchFileProcs(fname, arg) then
	       break_point := breakPt(count +:= 1, fname, line, ENABLED,
	                              DState.srcFile.getSrcLine(fname, line))
	    else {
	       msg:="\n   Procedure not found_
	             \n   Make sure the procedure/method name is correct!"
	       DState.Write(msg)
	       return
	       }
	    }
	 }
      else {
	 if DState.srcFile.isMissing(fname) then {
	    msg:="\n   Source file \""||fname||"\" is not loaded !!!"
	    if line := integer(arg) then
	       break_point := breakPt(count +:= 1, fname , line, ENABLED, "?")
	    }
	 }
      }
   else {
      msg := "\n   Source file \""||fname||"\" is not in the binary !!!"
      DState.Write(msg)
      fail
      }

   # record breakPt(fname, linenum, code)
   if \break_point & \break_point.line then {
      line := break_point.line
      if isBreakExist(fname, line) then {
	 msg ||:= "\n   The breakpoint already exists._
	           \n   Type \"break\" to see all breakpoints"
	 }
      else {
	 addBreakPoint(fname, break_point)
	 msg ||:= "\n   Breakpoint #"||
	           break_point.id||" at : file "||fname||", line "||line||"."||
	          "\n   Source code:"||DState.srcFile.getSrcLine(fname, line)
	 }
      DState.Write(msg)
      return
      }
   else {
      msg   :="\n   \""||DState.cmdHistory[1]||"\" is Unknown command"
      msg ||:="\n   Try \"help\" or \"help break\" for assistance."
      DState.Write(msg)
      }
end

#
# clear all breakpoints
#
method clearAllBreakpoints()
    local x, size := 0

    size := *breakPoints
    if size > 0 then {
       DState.breakMask := set()
       every x := key(breakPoints) do
	  delete(breakPoints, x)
       msg := "\n   All breakpoints are cleared; ("||size||" total)."
       }
    else
       msg := "\n   No breakpoints are available to be cleared."
    DState.Write(msg)
    return
end

#
# It clears pre-set breakpoints
#
method cmdClear(cmd)
   local line, fname, arg, id, i, size:=0

   # clears all of the preset breakpoints
   # clear break
   if *cmd = 2 then {
      clearAllBreakpoints()
      return
      }
   if *cmd = 3 then {
      if DState.State = PAUSE then
	 fname := keyword("file",Monitored)
      else
	 fname := DState.srcFile.procMainFile
      arg   := cmd[3]
      }
   else if *cmd > 3 then {
      fname := cmd[3]
      arg   := cmd[4]
      }

   if \fname then {
      if not find(".icn", fname) then
	 fname ||:= ".icn"
      }
   else {
      clearAllBreakpoints()
      return
      }

   if DState.srcFile.isSrcFile(fname) then {
      if line := integer(arg) then {
	 if id := isBreakExist(fname, line) then {
	    deleteBreakPoint(fname, line)
	    msg  :="\n   Deleted breakpoint #"||id||" at : file "||fname||
	           ", line "||line ||"."
	    msg||:="\n   Source code:"||DState.srcFile.getSrcLine(fname, line)
	    }
	 else {
	    msg :="\n   No breakpoint at : file "||fname||", line "||line ||"."
	    msg||:="\n   Source code: "||DState.srcFile.getSrcLine(fname, line)
	    }
	 }
      else {
	 if line := DState.srcFile.searchFileProcs(fname, arg) then {
	    if id := isBreakExist(fname, line) then {
	       deleteBreakPoint(fname,line)
	       msg  :="\n   Deleted breakpoint #"||id||" at : file "||fname||
	              ", line "||line ||"."
	       msg||:="\n   Source code:"||DState.srcFile.getSrcLine(fname,line)
	       }
	    else {
	       msg  :="\n   No breakpoint at file "||fname||", line "||line||"."
	       msg||:="\n   Source code:"||DState.srcFile.getSrcLine(fname,line)
	       }
	    }
	 else {
	    msg:="\n   Procedure not found_
	          \n   Make sure the method name is correct!"
	    }
	 }
      }
   else {
      msg := "\n   Source file \""||fname||"\" is not in the binary !!!"
      }
   DState.Write(msg)
end

#
# It deletes pre-set breakpoints
#
method cmdDelete(cmd)
   local id, x, L, i, j:=0

   if not cmd[3] then {
      every x := key(breakPoints) do {
	 L := breakPoints[x]
	 every i := 1 to *L do {
	    if L[i].state ~= DELETED then {
	       L[i].state := DELETED
	       j +:= 1
	       }
	    }
	 }
      if j > 0 then
	 msg := "\n   All breakpoints are deleted; ("||j||" in total)."
      else
	 msg := "\n   No breakpoints are available to be deleted."
      DState.Write(msg)
      return
      }
   else if id := integer(cmd[3]) then {
      every x := key(breakPoints) do {
	 L := breakPoints[x]
	 every i := 1 to *L do {
	    if L[i].id = id then
	       if L[i].state ~= DELETED then {
	          L[i].state := DELETED
	          msg := "\n   Breakpoint #"||id||" is deleted."
	          DState.Write(msg)
	          return
	          }
	       else {
	          msg := "\n   Breakpoint #"||id||" is already deleted."
	          DState.Write(msg)
	          fail
	         }
	    }
	 }
      msg := "\n   Breakpoint #"||id||" is not available."
      DState.Write(msg)
      fail
      }
   else {
      msg:="\n   Undefined Command: \""||DState.cmdHistory[1]||"\""||
	   "\n   Try \"help\" for assistance."
      DState.Write(msg)
      fail
      }
end

#
# It deletes pre-set breakpoints
#
method cmdEnable(cmd)
   local id, x, L, i, j:=0

   # Enables all the preset breakpoints
   # enable break
   if not cmd[3] then {
      every x := key(breakPoints) do {
	 L := breakPoints[x]
	 every i := 1 to *L do
	    if L[i].state = DISABLED then {
	       L[i].state := ENABLED
	       j +:= 1
	       }
	 }
      if j > 0 then
	 msg := "\n   All breakpoints are enabled; ("||j||" total)."
      else
	 msg := "\n   No disabled breakpoints are available to be enabled."
      DState.Write(msg)
      return
      }
   else if id := integer(cmd[3]) then {
      every x := key(breakPoints) do {
	 L := breakPoints[x]
	 every i := 1 to *L do {
	    if L[i].id = id then
	       if L[i].state = DISABLED then {
	          L[i].state := ENABLED
	          msg := "\n   Breakpoint #"||id||" is enabled."
	          DState.Write(msg)
	          return
	          }
	       else {
	          if L[i].state = ENABLED then
	             msg:="\n   Breakpoint #"||id||" is already enabled."
	          else
	             msg:="\n   Breakpoint #"||id||" is deleted;_
	                   it cannot be enabled."
	          DState.Write(msg)
	          fail
	         }
	    }
	 }
      msg := "\n   Breakpoint #"||id||" is not available."
      DState.Write(msg)
      fail
      }
   else {
      msg:="\n   Undefined Command: \""||DState.cmdHistory[1]||"\""||
	   "\n   Try \"help\" for assistance."
      DState.Write(msg)
      fail
      }
end

#
# It deletes pre-set breakpoints
#
method cmdDisable(cmd)
   local id, x, L, i, j := 0

   if not cmd[3] then {
      every x := key(breakPoints) do {
	 L := breakPoints[x]
	 every i := 1 to *L do
	    if L[i].state := ENABLED then {
	       L[i].state := DISABLED
	       j +:= 1
	       }
	 }
      if j > 0 then
	 msg := "\n   All breakpoints are disabled; ("||j||" total)."
      else
	 msg := "\n   No enabled breakpoints are available to be disabled."
      DState.Write(msg)
      return
      }
   else if id := integer(cmd[3]) then {
      every x := key(breakPoints) do {
	 L := breakPoints[x]
	 every i := 1 to *L do {
	    if L[i].id = id then {
	       if L[i].state = ENABLED then {
	          L[i].state := DISABLED
	          msg := "\n   Breakpoint #"||id||" is disabled."
	          DState.Write(msg)
	          return
	          }
	       else {
	          if L[i].state = DISABLED then
	             msg:="\n   Breakpoint #"||id||" is already disabled."
	          else
	             msg:="\n   Breakpoint #"||id||" is deleted;_
	                   it cannot be disabled."
	          DState.Write(msg)
	          fail
	         }
	       }
	    }
	 }
      msg := "\n   Breakpoint #"||id||" is not available."
      DState.Write(msg)
      fail
      }
   else {
      msg:="\n   Undefined Command: \""||DState.cmdHistory[1]||"\""||
	   "\n   Try \"help\" for assistance."
      DState.Write(msg)
      fail
      }
end

#
# Initialization
#
initially()
   breakPoints := table(0)
   count := 0
   msg :="\n   "
end
