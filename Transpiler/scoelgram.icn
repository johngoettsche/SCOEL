### This file created by IYACC 1.0
### Please send bug reports to raypereda@hotmail.com
#define YYPREFIX "yy"
#line 124 "scoelgram.y"

procedure Keyword(x1,x2)
	static 
		keywords
	
	local
		children
		
	initial {
		keywords := set(["allocated","clock","collections","column","current",
				"date","now","dateline","digits","e","error",
				"errornumber","errortext","errorvalue","errout","fail",
				"eventcode","eventsource","eventvalue","features",
				"file","host","input","lcase","letters","level",
				"line","main","null","output","phi","pi","pick","pos",
				"progname","random","regions","source","storage",
				"subject","time","trace","dump","ucase","version",
				"errno","window","col","row","x","y","interval",
				"control","shift","meta","lpress","mpress","rpress",
				"lrelease","mrelease","rrelease","ldrag","mdrag",
				"rdrag","resize","ascii","cset"])
	}

	# verify that x2 is a valid keyword
	if not member(keywords, x2.s) then
		yyerror("&" || x2.s ||" is not a valid keyword!")

	children := [x1, x2]
	return node("keyword", children)
end

global set_of_all_fields, dummyrecno
procedure Field(x1,x2,x3)
#	initial { set_of_all_fields := set(); dummyrecno := 1 }

#	if \iconc then {
#		if type(x3) == "token" then {
#			nsert(set_of_all_fields, x3.s)
#			write(&errout, "field ", image(x3.s))
#		}
#	}
#	children := [x1, x2, x3]
#	return node("field", children)
end

procedure Clone1stToken(n)
	case type(n) of {
		"token": return copy(n)
		"treenode": {
				return Clone1stToken(!n.children)
			}
	}
end

global outline, outcol, outfilename,package_level_syms,package_level_class_syms

procedure Progend(x1)
	# pe  istop set_package_level_syms
	local 
		pe
   
	if *\parsingErrors > 0 then {
		every pe := !parsingErrors do {
			write(&errout, pe.errorMessage)
		}
		istop(*\parsingErrors || " error" ||
				(if *\parsingErrors > 1 then "s" else ""))
	}

	if /x1 then istop("error: empty file")

	package_level_syms := set()
	package_level_class_syms := set()
	set_package_level_syms(x1)
	scopecheck_superclass_decs(x1)

	outline := 1
	outcol := 1
   #
   # export specifications for each class
   #
	native := set()
	every cl := classes.foreach_t() do {
		cl.WriteSpec()
		insert(native, cl)
	}
   #
   # import class specifications, transitively
   #
	repeat {
		added := 0
		every super := ((classes.foreach_t()).foreachsuper() | !imports) do {
			if /classes.lookup(super) then {
				added := 1
				readspec(super)
				cl := classes.lookup(super)
				if /cl then halt("can't inherit class '",super,"'")
				iwrite("  inherits ", super, " from ", cl.linkfile)
				writelink(cl.dir, cl.linkfile)
			}
		}
		if added = 0 then break
	}
  #
  # Compute the transitive closure of the superclass graph. Then
  # resolve inheritance for each class, and use it to apply scoping rules.
  #
	every (classes.foreach_t()).transitive_closure()
	every (classes.foreach_t()).resolve()

	scopecheck_bodies(x1)

	if \thePackage then {
		every thePackage.insertsym(!package_level_syms)
	}

	if \iconc then  {
		iconc_prep_parse_tree(&null, x1)
	}

  #
  # generate output
  #
#  iwrite("Generating code:")
	yyprint(x1)
	write(yyout)

   # generate invocable declarations for identifiers in unevaluated exprs
	if (*\list_of_invocables)>0 then {
		writes(yyout, "invocable ")
		every temp := list_of_invocables[i := 1 to *list_of_invocables] do {
			writes(yyout, image(temp))
			if i < *list_of_invocables then writes(yyout, ",")
		}
		write(yyout)
	}

	if \iconc & (type(set_of_all_fields) == "set") &
			(*set_of_all_fields > 0) then {
		arandomfield := !set_of_all_fields
		writes(yyout, "record __dummyrecord",dummyrecno,"(",arandomfield)
		delete(set_of_all_fields, arandomfield)
		every writes(yyout, ",", !set_of_all_fields)
		write(yyout, ")")
		dummyrecno +:= 1
		set_of_all_fields := set()
	}
end
# idlist
#line 154 "scoelgram.icn"
$define IDENT 257
$define INTLIT 258
$define REALLIT 259
$define STRINGLIT 260
$define CSETLIT 261
$define EOFX 262
$define ABSTRACT 263
$define BREAK 264
$define BY 265
$define CASE 266
$define CLASS 267
$define CRITICAL 268
$define DEFAULT 269
$define DO 270
$define ELSE 271
$define END 272
$define EVERY 273
$define FAIL 274
$define GLOBAL 275
$define IF 276
$define IMPORT 277
$define CONSTRUCTOR 278
$define LINK 279
$define PRIVATE 280
$define METHOD 281
$define NEXT 282
$define OF 283
$define PUBLIC 284
$define READ 285
$define RECORD 286
$define REPEAT 287
$define RETURN 288
$define STATIC 289
$define SUSPEND 290
$define THEN 291
$define THREAD 292
$define TO 293
$define UNTIL 294
$define WHILE 295
$define BANG 296
$define MOD 297
$define AUGMOD 298
$define AND 299
$define AUGAND 300
$define STAR 301
$define AUGSTAR 302
$define INTER 303
$define AUGINTER 304
$define PLUS 305
$define AUGPLUS 306
$define UNION 307
$define AUGUNION 308
$define MINUS 309
$define AUGMINUS 310
$define DIFF 311
$define AUGDIFF 312
$define DOT 313
$define SLASH 314
$define AUGSLASH 315
$define ASSIGN 316
$define INVASSIGN 317
$define LTH 318
$define AUGLTH 319
$define LTHE 320
$define AUGLTHE 321
$define EQ 322
$define GTH 323
$define AUGGTH 324
$define GTHE 325
$define AUGGTHE 326
$define QMARK 327
$define AUGQMARK 328
$define BACKSLASH 329
$define CARET 330
$define AUGCARET 331
$define BAR 332
$define TILDE 333
$define NE 334
$define AUGNE 335
$define LPAREN 336
$define RPAREN 337
$define PCOLON 338
$define COMMA 339
$define MCOLON 340
$define COLON 341
$define COLONCOLON 342
$define SEMICOL 343
$define LBRACK 344
$define RBRACK 345
$define LBRACE 346
$define RBRACE 347
$define DOLLAR 348
$define SND 349
$define SNDBK 350
$define RCV 351
$define RCVBK 352
$define CONST 353
$define TOPIC 354
$define FUNK 355
$define CONASSIGN 356
$define STORE 357
$define AT 358
$define CREATE 359
$define YYERRCODE 256
procedure init() 
  yylhs := [                                        -1,
    0,    1,    1,    2,    2,    2,    2,    2,    2,    5,
    5,   10,   10,   10,   10,   10,   12,   12,   14,   14,
   14,    8,   17,   17,   20,   20,   20,   21,   21,   18,
   18,   18,   18,   18,    3,    3,    7,    6,   24,   24,
   25,   25,   13,   13,   26,    4,   19,   19,    9,    9,
    9,    9,   29,   29,   31,   31,   22,   28,   28,   23,
   23,   32,   16,   16,   16,   11,   11,   33,   33,   34,
   34,   34,   34,   15,   15,   35,   35,   22,   22,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   37,
   37,   37,   38,   38,   39,   39,   39,   39,   39,   39,
   39,   40,   40,   40,   40,   40,   41,   41,   41,   41,
   41,   42,   42,   43,   43,   43,   44,   44,   44,   44,
   44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
   44,   44,   44,   45,   45,   45,   45,   45,   45,   45,
   45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
   45,   45,   45,   45,   45,   45,   45,   45,   45,   50,
   50,   51,   51,   52,   52,   53,   47,   47,   47,   47,
   48,   48,   49,   56,   56,   57,   57,   30,   30,   55,
   55,   27,   27,   27,   27,   46,   58,   58,   58,   54,
   54,    0,   22,
  ]
  yylen := [                            2,
    2,    0,    3,    1,    1,    1,    1,    1,    1,    0,
    4,    3,    2,    3,    2,    2,    0,    1,    0,    3,
    6,    5,    7,    4,    0,    3,    3,    3,    2,    0,
    2,    3,    2,    2,    0,    1,    2,    2,    1,    3,
    1,    1,    1,    3,    3,    6,    0,    1,    3,    6,
    5,    4,    6,    7,    0,    1,    0,    0,    1,    2,
    4,    5,    0,    1,    3,    1,    3,    1,    3,    1,
    3,    3,    5,    0,    3,    0,    1,    1,    3,    1,
    3,    1,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    1,
    3,    5,    1,    3,    1,    3,    3,    3,    3,    3,
    3,    1,    3,    3,    3,    3,    1,    3,    3,    3,
    3,    1,    3,    1,    3,    3,    1,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    2,    3,    3,    3,    4,    3,
    4,    4,    5,    3,    3,    1,    3,    2,    2,    2,
    4,    2,    4,    2,    4,    2,    1,    2,    2,    4,
    4,    6,    6,    1,    3,    3,    3,    1,    3,    1,
    3,    1,    1,    1,    1,    6,    1,    1,    1,    1,
    3,    3,    1,
  ]
  yydefred := [                         0,
    2,    0,    0,    0,    0,    1,    0,    0,   48,    0,
    4,    0,    6,    7,    8,    9,   10,    0,  202,    0,
   41,   42,    0,   39,    0,   36,    3,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   49,
    0,    0,   18,    0,    0,   15,   16,    0,    0,   43,
   66,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   10,    0,    0,    0,    0,    0,    0,   68,  203,    0,
  192,  193,  194,  195,    0,    0,    0,  177,    0,  154,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   82,  166,    0,  144,
   78,    0,  100,    0,    0,    0,  117,    0,  124,    0,
  145,  146,  147,  148,  149,  150,  151,  152,   52,   40,
    0,    0,    0,    0,    0,   11,   60,    0,   33,    0,
   34,    0,    0,   31,    0,    0,    0,    0,    0,    0,
  188,    0,    0,    0,    0,    0,  155,    0,    0,    0,
    0,  178,    0,  179,    0,    0,    0,  131,  169,  168,
  134,  137,  133,  141,  139,  132,  130,  135,  142,  143,
  136,  129,  138,  140,    0,    0,    0,    0,    0,  128,
    0,   51,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   45,   44,   67,    0,   32,    0,
    0,   22,    0,    0,    0,    0,    0,    0,    0,   50,
    0,    0,   72,    0,    0,   69,   65,   28,    0,    0,
    0,    0,    0,    0,  156,  158,    0,  157,   79,    0,
   91,   99,   88,   89,   86,   85,   87,   84,   90,   81,
   96,   95,   94,   93,   98,   92,   97,   83,    0,    0,
    0,    0,    0,  104,    0,    0,    0,    0,    0,  121,
  118,  119,  120,  126,  125,  123,    0,  167,  165,    0,
    0,    0,    0,  160,  190,    0,    0,    0,   20,   61,
    0,   26,   27,    0,   46,  189,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  201,    0,  162,    0,  198,
  199,  197,    0,  159,    0,  161,   62,   10,   75,   23,
   73,    0,   53,    0,    0,    0,  184,    0,  102,  163,
    0,  191,    0,   54,    0,    0,    0,  183,    0,  196,
   21,    0,    0,  185,
  ]
  yydgoto := [                          2,
    3,   10,   27,   55,   56,   13,   14,   15,  107,   33,
   52,   44,   49,  143,  243,   66,   17,   58,   59,  147,
  108,  149,   60,   23,   24,   50,  110,  249,   40,  150,
   41,   61,   67,   68,  151,  111,  112,  113,  114,  115,
  116,  117,  118,  119,  120,  121,  122,  123,  124,  125,
  126,  127,  128,  189,  316,  356,  357,  343,
  ]
  yysindex := [                      -222,
    0,    0, -242, -148, -266,    0,   80,   80,    0, -172,
    0, -223,    0,    0,    0,    0,    0, -118,    0, -241,
    0,    0, -142,    0, -142,    0,    0, -190, -190, -190,
 -190,  -50,  -23,  491,   21,   30, -117,   44,  456,    0,
 -172,   80,    0,  -23,  -23,    0,    0,   10,   -7,    0,
    0, -122,   55,   95, -240, -121, -240,   93,   82, -240,
    0,   32,   40,  456,   41,   46, -239,    0,    0, -175,
    0,    0,    0,    0,  456,  456,  456,    0,  456,    0,
  456,  456,  456,  456,  456,  546,  -99,  546,  546,  546,
  546,  546,  546,  546,  546,  546,  546,  546,  546,  546,
  546,  456,  456,  456,  456,  546,    0,    0, -254,    0,
    0, 3868,    0,   35,   85, -123,    0, -164,    0, -281,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   48,   48,  155,  -50,  154,    0,    0,   94,    0, -240,
    0,   99,  146,    0,  181, -236,  122,  -23,  130, -104,
    0,  192, -244,   44,   76,  203,    0, -245, -206, -143,
  130,    0, -162,    0, -127, -126,  117,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    5,  130, -169,  119,  120,    0,
  636,    0,  546,  636,  636,  636,  636,  636,  636,  636,
  636,  636,  636,  636,  636,  636,  636,  636,  636,  636,
  636,  546,  546,  546,  546,  546,  546,  546,  546,  546,
  546,  546,  546,  546,  546,  546,  546,  546,  546, -235,
  456,  128,  456,  272,    0,    0,    0,   44,    0,   44,
  181,    0,  198,  129, -273,   32,   44,   48,  136,    0,
  456,  133,    0,  132,  456,    0,    0,    0,  135,  456,
  456,  456,  456,  456,    0,    0,  456,    0,    0,  214,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   85,   85,
   85,   85,   85,    0,   85, -123, -123, -123, -123,    0,
    0,    0,    0,    0,    0,    0,  117,    0,    0,   22,
  456, -188, -137,    0,    0, -158,  148,  150,    0,    0,
  456,    0,    0,  152,    0,    0,  155,  456, -157,  365,
  130, -243,  130,  130,  130,    0,  546,    0,   42,    0,
    0,    0,  456,    0,  456,    0,    0,    0,    0,    0,
    0, -147,    0,  142, -270,  -58,    0,  456,    0,    0,
 -249,    0,  181,    0,  456,  456,  365,    0,  130,    0,
    0,  130,  130,    0,
  ]
  yyrindex := [                      -139,
    0,    0,  631,  631,    0,    0,    0,    0,    0,  -74,
    0,   45,    0,    0,    0,    0,    0,    0,    0, 3963,
    0,    0, 3848,    0, 3864,    0,    0,  234,  234,  234,
  234,    0,    0, -219,    0,    0,    0,  160,  153,    0,
  726,    0,    0,    0,    0,    0,    0,    0,  243,    0,
    0,  -19,    0,    0,  221,    0,  221,  230,    0,  221,
    0, -159,    0,  107, -108,    0,  166,    0,    0,  821,
    0,    0,    0,    0, 4052,  226, 4052,    0,  213,    0,
 4052, 4052, 4052, 4052, 4052,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  107, 4052,  -93,  -43,    0,    0,    0,    0,    0,
    0, 3756,    0, 3661, 2432, 2527,    0, 2337,    0, 3572,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  255,  259,    0,    0,    0,    0,    0,    0,    0,  221,
    0,   90,    0,    0, -246,    0, 3879,  185, 1011,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1862,    0,
 1106,    0, 1957,    0, 2052, 2147,  821,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1201,    0,  177,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  107,    0,  -42,  187,    0,    0,    0,  160,    0,  160,
 -246,    0,    0,    0, -159, -159,  160,  200,    0,    0,
   -4,   61,    0,    0, -119,    0,    0,    0,    0, 4052,
 4052, 4052, 4052, 4052,    0,    0,  -43,    0,    0, 1292,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2622, 2717,
 2812, 2907, 3002,    0, 3097, 3192, 3287, 3382, 3477,    0,
    0,    0,    0,    0,    0,    0,  916,    0,    0,    0,
  107,  -75,    0,    0,    0,    0,    0,    0,    0,    0,
 -246,    0,    0,    0,    0,    0,    0, -119,    0,  199,
 1387, 2242, 1482, 1577, 1672,    0,    0,    0,    0,    0,
    0,    0,  153,    0, -119,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 4052,    0,    0,
    0,    0, -246,    0,  -43,  -43,  199,    0, 1767,    0,
    0,  -38,  -27,    0,
  ]
  yygindex := [                         0,
  534,    0,   49,  157,   -3,    0,    0,    0,   15,    0,
  -36,  156,    0,    0, -229,   34,    0,  -30,  247,   73,
 -110,  -37,    0,  533,  500,  409, -128,    0,    0,  -98,
    0,  494,    0,  390,  -72, 4216,    0, -186,    0,  194,
  299,  202,    0,  -12,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  282,    0,    0,  183,    0,
  ]
$define YYTABLESIZE 4427
  yytable := [                         12,
   12,  109,  157,  185,  235,  187,  270,  131,  132,  162,
  164,  319,  254,   34,    5,   37,    5,   16,   16,    6,
  245,  307,   53,  253,  139,   74,  141,  358,  191,  144,
  294,  230,  188,    1,    7,  246,    8,  259,  158,  159,
   54,  160,  308,  161,  191,  163,  165,  166,   57,  191,
   20,   28,   30,  191,  231,  191,   29,  145,   30,  232,
   30,   31,  233,  260,  234,  186,   47,  146,  156,   57,
  366,   57,  244,  168,   57,  171,  172,  173,  174,  175,
  176,  177,  178,  179,  180,  181,  182,  183,  184,  129,
  192,  349,  191,  190,   38,  370,   57,   25,   43,  154,
  136,  255,   39,   25,  155,  103,  103,  262,    5,  239,
  191,  248,   25,   19,    9,   25,    9,    2,   25,  309,
   25,   25,    2,   10,   25,   25,   25,    2,    7,   32,
    8,  227,  310,  371,  313,    2,  191,    2,  241,    2,
    2,   20,  263,  264,    2,    2,    2,  261,   35,  340,
  359,  341,  342,   28,   57,  191,  329,  169,   29,   11,
   11,  315,   30,   31,  228,  229,  156,   36,  244,  251,
   26,  191,  191,  223,  170,  266,   25,  224,  326,  225,
  345,  251,   35,   25,   45,   46,   47,   35,  346,  353,
  226,  251,   35,   25,  188,  312,   42,   25,  351,  364,
   35,  251,   35,    2,   35,   35,   48,  344,    9,   35,
   35,   35,  339,    2,  304,  305,  135,    2,   64,   57,
   26,  140,  331,  332,  333,  334,  335,   57,   70,  352,
   70,   32,  250,   51,  251,   70,   35,   35,   35,   35,
   35,   35,   35,   35,   35,   57,   35,   35,  244,   18,
   18,   57,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   35,   77,   35,   35,   35,   35,   35,   77,
   35,  317,  362,  318,   35,   35,   35,   62,   35,   35,
  324,   35,   35,   35,  367,   35,   63,   35,  368,   35,
  244,   35,  355,   35,   35,   57,   57,   57,   57,   57,
   65,    5,   57,   57,  186,  361,    5,   35,  186,   35,
   35,    5,   35,   35,   35,  187,   35,  322,  323,  187,
  369,    5,   35,    5,   35,  133,   35,  372,  373,  355,
    5,  134,   57,   35,   57,   54,   21,   35,   35,   22,
   57,  265,   57,  251,  363,   10,   10,   10,   10,   10,
   10,  138,  212,   10,  213,   10,  214,  215,  338,  216,
  251,   10,   10,   10,   10,   10,  217,   36,  218,   10,
  142,   10,  146,   10,   10,  148,   10,   10,  360,   10,
  251,  152,  153,   10,   10,   10,  135,    5,   10,  219,
   10,  220,   10,  221,   10,  222,   10,   71,   10,   71,
   10,    5,   10,   10,   71,  289,  290,  291,  292,  293,
  237,  295,   71,   72,   73,   74,   10,  242,   10,   10,
  257,   10,   10,   10,  300,  301,  302,  303,  191,  238,
  306,   10,   10,   10,  240,   10,   69,   70,   71,   72,
   73,   74,   10,   57,   75,   57,   76,   10,  252,   71,
   72,   73,   74,   77,   78,   28,   79,  247,  156,  258,
   29,  267,   80,  311,   30,   31,  268,   81,   82,  320,
   83,  321,  325,  327,   84,   85,   86,  328,  337,   87,
  330,   88,  365,   89,  347,   90,  348,   91,  350,   92,
   17,   93,   30,   94,   95,   10,   63,   57,   30,   13,
   10,   19,   64,   57,   10,   10,   47,   96,   57,   97,
   98,   12,   99,  100,  101,   14,  102,  296,  297,  298,
  299,   58,  103,  200,  104,   57,  105,   69,   70,   71,
   72,   73,   74,   32,    4,   75,   59,   76,  106,   57,
   25,  130,  236,  256,   77,   78,  137,   79,  336,  374,
    0,    0,    0,   80,    0,    0,    0,    0,   81,   82,
    0,   83,    0,   10,    0,   84,   85,   86,    0,    0,
   87,    0,   88,   10,   89,    0,   90,    0,   91,    0,
   92,    0,   93,    0,   94,   95,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   96,    0,
   97,   98,    0,   99,  100,  101,    0,  102,    0,    0,
    0,    0,    0,  103,    0,  104,    0,  105,  314,    0,
   69,   70,   71,   72,   73,   74,    0,    0,   75,  106,
   76,    0,    0,  354,    0,    0,    0,   77,   78,    0,
   79,    0,    0,    0,    0,    0,   80,    0,    0,    0,
    0,   81,   82,    0,   83,    0,    0,    0,   84,   85,
   86,    0,    0,   87,    0,   88,    0,   89,    0,   90,
    0,   91,    0,   92,    0,   93,    0,   94,   95,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   96,    0,   97,   98,    0,   99,  100,  101,    0,
  102,    0,    0,    0,    0,    0,  103,    0,  104,    0,
  105,   69,   70,   71,   72,   73,   74,    0,    0,   75,
    0,   76,  106,    0,    0,    0,    0,    0,   77,   78,
    0,   79,    0,    0,    0,    0,    0,   80,    0,    0,
    0,    0,   81,   82,    0,   83,    0,    5,    0,   84,
   85,   86,    0,   53,   87,    0,   88,    0,   89,    0,
   90,    0,   91,    0,   92,   28,   93,    0,   94,   95,
   29,   54,    0,    0,   30,   31,    0,    0,    0,    0,
    0,    0,   96,    0,   97,   98,    0,   99,  100,  101,
    0,  102,    0,    0,    0,    0,    0,  103,    0,  104,
    0,  105,  167,   71,   72,   73,   74,    0,    0,   75,
    0,   76,    0,  106,    0,    0,    0,    0,   77,   78,
    0,   79,    0,    0,    0,    0,    0,   80,    0,    0,
    0,    0,   81,   82,    0,   83,    0,    0,    0,   84,
   85,   86,    0,   32,   87,    0,   88,    9,   89,    0,
   90,    0,   91,    0,   92,    0,   93,    0,   94,   95,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   96,    0,   97,   98,    0,   99,  100,  101,
    0,  102,    0,    0,    0,    0,    0,  103,    0,  104,
    0,  105,   70,   71,   72,   73,   74,   10,    0,   75,
    0,   76,    0,  106,    0,   10,    0,    0,   77,   78,
   10,   79,    0,    0,   10,   10,   10,   80,    0,    0,
    0,    0,   81,   82,    0,   83,    0,    0,    0,   84,
   85,   86,    0,    0,   87,    0,   88,    0,   89,    0,
   90,    0,   91,    0,   92,    0,   93,    0,   94,   95,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   96,    0,   97,   98,    0,   99,  100,  101,
    0,  102,    0,   10,    0,    0,    0,  103,    0,  104,
    0,  105,   35,   10,    0,    0,    0,   35,   35,    0,
   35,    0,   35,  106,    0,   35,   35,   35,    0,    0,
   35,    0,   35,   35,   35,   35,   35,    0,   35,   35,
   35,   35,    0,    0,    0,    0,   35,    0,   35,    0,
    0,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   35,    0,   35,   35,   35,   35,   35,   35,   35,
   35,   35,    0,   35,   35,   35,   35,   35,    0,   35,
   35,   35,   35,   35,   35,   35,   35,    0,    0,   35,
   35,   35,   35,    0,    0,    0,    0,  153,   35,    0,
    0,   35,   35,  153,    0,  153,    0,    0,    0,    0,
  153,  153,  153,    0,    0,  153,    0,    0,  153,    0,
  153,  153,    0,  153,  153,  153,  153,    0,    0,    0,
    0,  153,    0,  153,    0,    0,  153,  153,  153,  153,
  153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
  153,  153,  153,  153,  153,  153,  153,    0,  153,  153,
  153,  153,  153,  153,  153,  153,  153,    0,  153,  153,
  153,  153,  153,    0,  153,  153,  153,  153,  153,  153,
  153,  153,    0,  153,  153,  153,  153,  153,    0,    0,
    0,    0,  164,  153,    0,    0,  153,  153,  164,    0,
  164,    0,    0,    0,    0,  164,  164,  164,    0,    0,
  164,    0,    0,  164,    0,  164,  164,    0,  164,  164,
  164,  164,    0,    0,    0,    0,  164,    0,  164,    0,
    0,  164,  164,  164,  164,  164,  164,  164,  164,  164,
  164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
  164,  164,    0,  164,  164,  164,  164,  164,  164,  164,
  164,  164,    0,  164,  164,  164,  164,  164,    0,  164,
  164,  164,  164,  164,  164,  164,  164,    0,  164,  164,
  164,  164,  164,    0,    0,    0,    0,   77,  164,    0,
    0,  164,  164,   77,    0,   77,    0,    0,    0,    0,
   77,   77,   77,    0,    0,   77,    0,    0,   77,    0,
   77,   77,    0,   77,   77,   77,   77,    0,    0,    0,
    0,   77,    0,   77,    0,    0,   77,   77,   77,    0,
   77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
   77,   77,   77,   77,   77,   77,   77,    0,   77,   77,
   77,   77,   77,   77,   77,   77,   77,    0,   77,   77,
   77,   77,   77,    0,   77,   77,   77,   77,   77,   77,
   77,   77,    0,   77,   77,   77,   77,   77,    0,    0,
    0,    0,  176,   77,    0,    0,   77,   77,  176,    0,
  176,    0,    0,    0,    0,  176,  176,  176,    0,    0,
  176,    0,    0,  176,    0,  176,  176,    0,  176,  176,
  176,  176,    0,    0,    0,    0,  176,    0,  176,    0,
    0,  176,  176,  176,    0,  176,  176,  176,  176,  176,
  176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
  176,  176,    0,  176,  176,  176,  176,  176,  176,  176,
  176,  176,    0,  176,  176,  176,  176,  176,    0,  176,
  176,  176,  176,  176,  176,  176,  176,    0,  176,  176,
  176,  176,  176,    0,    0,    0,    0,   29,  176,    0,
    0,  176,  176,   29,    0,   29,    0,    0,    0,    0,
   29,   29,   29,    0,    0,   29,    0,    0,   29,    0,
   29,   29,    0,   29,   29,   29,   29,    0,    0,    0,
    0,   29,    0,   29,    0,    0,   29,   29,   29,    0,
   29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
   29,   29,   29,   29,   29,   29,   29,    0,   29,   29,
   29,   29,   29,   29,   29,   29,   29,    0,   29,   29,
   29,   29,   29,    0,   29,   29,   29,   29,   29,   29,
   29,   29,    0,   29,   29,   29,   29,   29,  101,    0,
    0,    0,    0,   29,  101,    0,   29,   29,    0,    0,
    0,  101,  101,  101,    0,    0,  101,    0,    0,  101,
    0,  101,  101,    0,  101,  101,  101,  101,    0,    0,
    0,    0,  101,    0,  101,    0,    0,  101,  101,  101,
  101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
  101,  101,  101,  101,  101,  101,  101,  101,    0,  101,
  101,  101,  101,  101,  101,  101,  101,  101,    0,  101,
  101,  101,  101,  101,    0,  101,  101,  101,  101,  101,
  101,  101,  101,    0,  101,  101,  101,  101,  101,    0,
    0,    0,    0,  175,  101,    0,    0,  101,  101,  175,
    0,  175,    0,    0,    0,    0,  175,  175,  175,    0,
    0,  175,    0,    0,  175,    0,  175,  175,    0,  175,
  175,  175,  175,    0,    0,    0,    0,  175,    0,  175,
    0,    0,  175,  175,  175,    0,  175,  175,  175,  175,
  175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
  175,  175,  175,    0,  175,  175,  175,  175,  175,  175,
  175,  175,  175,    0,  175,  175,  175,  175,  175,    0,
  175,  175,  175,  175,  175,  175,  175,  175,    0,  175,
  175,  175,  175,  175,    0,    0,    0,    0,  180,  175,
    0,    0,  175,  175,  180,    0,  180,    0,    0,    0,
    0,  180,  180,  180,    0,    0,  180,    0,    0,  180,
    0,  180,  180,    0,  180,  180,  180,  180,    0,    0,
    0,    0,  180,    0,  180,    0,    0,  180,  180,  180,
    0,  180,  180,  180,  180,  180,  180,  180,  180,  180,
  180,  180,  180,  180,  180,  180,  180,  180,    0,  180,
  180,  180,  180,  180,  180,  180,  180,  180,    0,  180,
  180,  180,  180,  180,    0,  180,  180,  180,  180,  180,
  180,  180,  180,    0,  180,  180,  180,  180,  180,    0,
    0,    0,    0,  173,  180,    0,    0,  180,  180,  173,
    0,  173,    0,    0,    0,    0,  173,  173,  173,    0,
    0,  173,    0,    0,  173,    0,  173,  173,    0,  173,
  173,  173,  173,    0,    0,    0,    0,  173,    0,  173,
    0,    0,  173,  173,  173,    0,  173,  173,  173,  173,
  173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
  173,  173,  173,    0,  173,  173,  173,  173,  173,  173,
  173,  173,  173,    0,  173,  173,  173,  173,  173,    0,
  173,  173,  173,  173,  173,  173,  173,  173,    0,  173,
  173,  173,  173,  173,    0,    0,    0,    0,  171,  173,
    0,    0,  173,  173,  171,    0,  171,    0,    0,    0,
    0,  171,  171,  171,    0,    0,  171,    0,    0,  171,
    0,  171,  171,    0,  171,  171,  171,  171,    0,    0,
    0,    0,  171,    0,  171,    0,    0,  171,  171,  171,
    0,  171,  171,  171,  171,  171,  171,  171,  171,  171,
  171,  171,  171,  171,  171,  171,  171,  171,    0,  171,
  171,  171,  171,  171,  171,  171,  171,  171,    0,  171,
  171,  171,  171,  171,    0,  171,  171,  171,  171,  171,
  171,  171,  171,    0,  171,  171,  171,  171,  171,    0,
    0,    0,    0,  182,  171,    0,    0,  171,  171,  182,
    0,  182,    0,    0,    0,    0,  182,  182,  182,    0,
    0,  182,    0,    0,  182,    0,  182,  182,    0,  182,
  182,  182,  182,    0,    0,    0,    0,  182,    0,  182,
    0,    0,  182,  182,  182,    0,  182,  182,  182,  182,
  182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
  182,  182,  182,    0,  182,  182,  182,  182,  182,  182,
  182,  182,  182,    0,  182,  182,  182,  182,  182,    0,
  182,  182,  182,  182,  182,  182,  182,  182,    0,  182,
  182,  182,  182,  182,    0,    0,    0,    0,  174,  182,
    0,    0,  182,  182,  174,    0,  174,    0,    0,    0,
    0,    0,  174,  174,    0,    0,  174,    0,    0,  174,
    0,  174,  174,    0,  174,  174,  174,  174,    0,    0,
    0,    0,  174,    0,  174,    0,    0,  174,  174,  174,
    0,  174,  174,  174,  174,  174,  174,  174,  174,  174,
  174,  174,  174,  174,  174,  174,  174,  174,    0,  174,
  174,  174,  174,  174,  174,  174,  174,  174,    0,  174,
  174,  174,  174,  174,    0,  174,  174,  174,  174,  174,
  174,  174,  174,    0,  174,  174,  174,  174,  174,    0,
    0,    0,    0,   77,  174,    0,    0,  174,  174,   77,
    0,   77,    0,    0,    0,    0,    0,   77,   77,    0,
    0,   77,    0,    0,   77,    0,   77,   77,    0,   77,
   77,   77,   77,    0,    0,    0,    0,   77,    0,   77,
    0,    0,   77,   77,   77,    0,   77,   77,   77,   77,
   77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
   77,   77,   77,    0,   77,   77,   77,   77,   77,   77,
   77,   77,   77,    0,   77,   77,   77,   77,   77,    0,
   77,   77,   77,   77,   77,   77,   77,   77,    0,   77,
   77,   77,   77,   77,    0,    0,    0,    0,  172,   77,
    0,    0,   77,   77,  172,    0,  172,    0,    0,    0,
    0,    0,  172,  172,    0,    0,  172,    0,    0,  172,
    0,  172,  172,    0,  172,  172,  172,  172,    0,    0,
    0,    0,  172,    0,  172,    0,    0,  172,  172,  172,
    0,  172,  172,  172,  172,  172,  172,  172,  172,  172,
  172,  172,  172,  172,  172,  172,  172,  172,    0,  172,
  172,  172,  172,  172,  172,  172,  172,  172,    0,  172,
  172,  172,  172,  172,    0,  172,  172,  172,  172,  172,
  172,  172,  172,    0,  172,  172,  172,  172,  172,    0,
    0,    0,    0,  170,  172,    0,    0,  172,  172,  170,
    0,  170,    0,    0,    0,    0,    0,  170,  170,    0,
    0,  170,    0,    0,  170,    0,  170,  170,    0,  170,
  170,  170,  170,    0,    0,    0,    0,  170,    0,  170,
    0,    0,  170,  170,  170,    0,  170,  170,  170,  170,
  170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
  170,  170,  170,    0,  170,  170,  170,  170,  170,  170,
  170,  170,  170,    0,  170,  170,  170,  170,  170,    0,
  170,  170,  170,  170,  170,  170,  170,  170,    0,  170,
  170,  170,  170,  170,    0,    0,    0,    0,  181,  170,
    0,    0,  170,  170,  181,    0,  181,    0,    0,    0,
    0,  181,    0,  181,    0,    0,  181,    0,    0,  181,
    0,  181,  181,    0,  181,  181,  181,  181,    0,    0,
    0,    0,  181,    0,  181,    0,    0,  181,  181,  181,
    0,  181,  181,  181,  181,  181,  181,  181,  181,  181,
  181,  181,  181,  181,  181,  181,  181,  181,    0,  181,
  181,  181,  181,  181,  181,  181,  181,  181,    0,  181,
  181,  181,  181,  181,    0,  181,  181,  181,  181,  181,
  181,  181,  181,    0,  181,  181,  181,  181,  181,    0,
    0,    0,    0,  122,  181,    0,    0,  181,  181,  122,
    0,  122,    0,    0,    0,    0,  122,  122,  122,    0,
    0,  122,    0,    0,  122,    0,  122,  122,    0,  122,
  122,  122,  122,    0,    0,    0,    0,  122,    0,  122,
    0,    0,    0,  122,  122,  122,  122,  122,  122,  122,
  122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
  122,  122,  122,    0,  122,  122,  122,  122,  122,  122,
  122,  122,  122,    0,  122,    0,    0,  122,  122,    0,
  122,  122,  122,  122,  122,  122,  122,  122,    0,  122,
  122,  122,  122,  122,    0,    0,    0,    0,  105,  122,
    0,    0,  122,  122,  105,    0,  105,    0,    0,    0,
    0,  105,  105,  105,    0,    0,  105,    0,    0,  105,
    0,  105,  105,    0,  105,  105,  105,  105,    0,    0,
    0,    0,  105,    0,  105,    0,    0,  105,  105,  105,
  105,  105,  105,  105,  105,  105,    0,  105,    0,  105,
    0,  105,    0,  105,  105,  105,  105,  105,    0,  105,
  105,  105,  105,  105,  105,  105,  105,  105,    0,  105,
  105,  105,  105,  105,    0,  105,  105,  105,  105,  105,
  105,  105,  105,    0,  105,  105,  105,  105,  105,    0,
    0,    0,    0,  112,  105,    0,    0,  105,  105,  112,
    0,  112,    0,    0,    0,    0,  112,  112,  112,    0,
    0,  112,    0,    0,  112,    0,  112,  112,    0,  112,
  112,  112,  112,    0,    0,    0,    0,  112,    0,  112,
    0,    0,  112,    0,  112,  112,  112,    0,  112,    0,
  112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
    0,  112,  112,    0,  112,  112,  112,  112,  112,  112,
  112,  112,  112,    0,  112,  112,  112,  112,  112,    0,
  112,  112,  112,  112,  112,  112,  112,  112,    0,  112,
  112,  112,  112,  112,    0,    0,    0,    0,  110,  112,
    0,    0,  112,  112,  110,    0,  110,    0,    0,    0,
    0,  110,  110,  110,    0,    0,  110,    0,    0,  110,
    0,  110,  110,    0,  110,  110,  110,  110,    0,    0,
    0,    0,  110,    0,  110,    0,    0,  110,  110,  110,
  110,  110,  110,  110,  110,  110,    0,  110,    0,  110,
    0,  110,    0,  110,  110,  110,  110,  110,    0,  110,
  110,  110,  110,  110,  110,  110,  110,  110,    0,  110,
  110,  110,  110,  110,    0,  110,  110,  110,  110,  110,
  110,  110,  110,    0,  110,  110,  110,  110,  110,    0,
    0,    0,    0,  109,  110,    0,    0,  110,  110,  109,
    0,  109,    0,    0,    0,    0,  109,  109,  109,    0,
    0,  109,    0,    0,  109,    0,  109,  109,    0,  109,
  109,  109,  109,    0,    0,    0,    0,  109,    0,  109,
    0,    0,  109,  109,  109,  109,  109,  109,  109,  109,
  109,    0,  109,    0,  109,    0,  109,    0,  109,  109,
  109,  109,  109,    0,  109,  109,  109,  109,  109,  109,
  109,  109,  109,    0,  109,  109,  109,  109,  109,    0,
  109,  109,  109,  109,  109,  109,  109,  109,    0,  109,
  109,  109,  109,  109,    0,    0,    0,    0,  106,  109,
    0,    0,  109,  109,  106,    0,  106,    0,    0,    0,
    0,  106,  106,  106,    0,    0,  106,    0,    0,  106,
    0,  106,  106,    0,  106,  106,  106,  106,    0,    0,
    0,    0,  106,    0,  106,    0,    0,  106,  106,  106,
  106,  106,  106,  106,  106,  106,    0,  106,    0,  106,
    0,  106,    0,  106,  106,  106,  106,  106,    0,  106,
  106,  106,  106,  106,  106,  106,  106,  106,    0,  106,
  106,  106,  106,  106,    0,  106,  106,  106,  106,  106,
  106,  106,  106,    0,  106,  106,  106,  106,  106,    0,
    0,    0,    0,  108,  106,    0,    0,  106,  106,  108,
    0,  108,    0,    0,    0,    0,  108,  108,  108,    0,
    0,  108,    0,    0,  108,    0,  108,  108,    0,  108,
  108,  108,  108,    0,    0,    0,    0,  108,    0,  108,
    0,    0,  108,  108,  108,  108,  108,  108,  108,  108,
  108,    0,  108,    0,  108,    0,  108,    0,  108,  108,
  108,  108,  108,    0,  108,  108,  108,  108,  108,  108,
  108,  108,  108,    0,  108,  108,  108,  108,  108,    0,
  108,  108,  108,  108,  108,  108,  108,  108,    0,  108,
  108,  108,  108,  108,    0,    0,    0,    0,  107,  108,
    0,    0,  108,  108,  107,    0,  107,    0,    0,    0,
    0,  107,  107,  107,    0,    0,  107,    0,    0,  107,
    0,  107,  107,    0,  107,  107,  107,  107,    0,    0,
    0,    0,  107,    0,  107,    0,    0,  107,  107,  107,
  107,  107,  107,  107,  107,  107,    0,  107,    0,  107,
    0,  107,    0,  107,  107,  107,  107,  107,    0,  107,
  107,  107,  107,  107,  107,  107,  107,  107,    0,  107,
  107,  107,  107,  107,    0,  107,  107,  107,  107,  107,
  107,  107,  107,    0,  107,  107,  107,  107,  107,    0,
    0,    0,    0,  111,  107,    0,    0,  107,  107,  111,
    0,  111,    0,    0,    0,    0,  111,  111,  111,    0,
    0,  111,    0,    0,  111,    0,  111,  111,    0,  111,
  111,  111,  111,    0,    0,    0,    0,  111,    0,  111,
    0,    0,  111,  111,  111,  111,  111,  111,  111,  111,
  111,    0,  111,    0,  111,    0,  111,    0,  111,  111,
  111,  111,  111,    0,  111,  111,  111,  111,  111,  111,
  111,  111,  111,    0,  111,  111,  111,  111,  111,    0,
  111,  111,  111,  111,  111,  111,  111,  111,    0,  111,
  111,  111,  111,  111,    0,    0,    0,    0,  113,  111,
    0,    0,  111,  111,  113,    0,  113,    0,    0,    0,
    0,  113,  113,  113,    0,    0,  113,    0,    0,  113,
    0,  113,  113,    0,  113,  113,  113,  113,    0,    0,
    0,    0,  113,    0,  113,    0,    0,  113,    0,  113,
  113,  113,    0,  113,    0,  113,  113,  113,  113,  113,
  113,  113,  113,  113,  113,    0,  113,  113,    0,  113,
  113,  113,  113,  113,  113,  113,  113,  113,    0,  113,
  113,  113,  113,  113,    0,  113,  113,  113,  113,  113,
  113,  113,  113,    0,  113,  113,  113,  113,  113,    0,
    0,    0,    0,  115,  113,    0,    0,  113,  113,  115,
    0,  115,    0,    0,    0,    0,  115,  115,  115,    0,
    0,  115,    0,    0,  115,    0,  115,  115,    0,  115,
  115,  115,  115,    0,    0,    0,    0,  115,    0,  115,
    0,    0,  115,    0,  115,  115,  115,    0,  115,    0,
  115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
    0,  115,  115,    0,  115,  115,  115,  115,  115,  115,
  115,  115,  115,    0,  115,  115,  115,  115,  115,    0,
  115,  115,  115,  115,  115,  115,  115,  115,    0,  115,
  115,  115,  115,  115,    0,    0,    0,    0,  116,  115,
    0,    0,  115,  115,  116,    0,  116,    0,    0,    0,
    0,  116,  116,  116,    0,    0,  116,    0,    0,  116,
    0,  116,  116,    0,  116,  116,  116,  116,    0,    0,
    0,    0,  116,    0,  116,    0,    0,  116,    0,  116,
  116,  116,    0,  116,    0,  116,  116,  116,  116,  116,
  116,  116,  116,  116,  116,    0,  116,  116,    0,  116,
  116,  116,  116,  116,  116,  116,  116,  116,    0,  116,
  116,  116,  116,  116,    0,  116,  116,  116,  116,  116,
  116,  116,  116,    0,  116,  116,  116,  116,  116,    0,
    0,    0,    0,  114,  116,    0,    0,  116,  116,  114,
    0,  114,    0,    0,    0,    0,  114,  114,  114,    0,
    0,  114,    0,    0,  114,    0,  114,  114,    0,  114,
  114,  114,  114,    0,    0,    0,    0,  114,    0,  114,
    0,    0,  114,    0,  114,  114,  114,    0,  114,    0,
  114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
    0,  114,  114,    0,  114,  114,  114,  114,  114,  114,
  114,  114,  114,    0,  114,  114,  114,  114,  114,    0,
  114,  114,  114,  114,  114,  114,  114,  114,    0,  114,
  114,  114,  114,  114,    0,    0,    0,    0,  127,  114,
    0,    0,  114,  114,  127,    0,  127,    0,    0,    0,
    0,  127,  127,  127,    0,    0,  127,    0,    0,  127,
    0,  127,  127,    0,  127,  127,  127,  127,    0,    0,
    0,    0,  127,    0,  127,    0,    0,  127,  127,  127,
  127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
  127,  127,  127,  127,    0,  127,  127,  127,    0,  127,
  127,  127,  127,  127,  127,  127,  127,  127,    0,  127,
  127,  127,  127,  127,    0,  127,  127,    0,  127,  127,
  127,  127,    0,    0,  127,    0,  127,  103,  127,    0,
    0,    0,    0,  103,  127,  103,    0,  127,  127,    0,
  103,  103,  103,    0,    0,  103,    0,    0,  103,    0,
  103,  103,    0,  103,  103,  103,  103,    0,    0,    0,
    0,  103,    0,  103,    0,    0,  103,  103,  103,  103,
  103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
  103,  103,  103,  103,  103,  103,  103,    0,    0,  103,
    0,  103,    0,    0,  103,    0,  103,    0,  103,  103,
  103,  103,    0,    0,    0,  103,  103,  103,  103,  103,
  103,  103,    0,  103,  103,  103,  103,  103,    0,    0,
    0,    0,   80,  103,    0,    0,  103,  103,   80,    0,
   80,    0,    0,    0,    0,   80,   80,   80,    0,    0,
   80,    0,    0,   80,    0,   80,   80,    0,   80,   80,
   80,   80,    0,    0,    0,    0,   80,    0,    0,    0,
    0,   80,   80,    0,   80,    0,   80,    0,   80,    0,
   80,    0,   80,    0,   80,    0,   80,    0,   80,   80,
    0,    0,    0,   80,    0,   80,    0,   80,   80,    0,
   80,    0,    0,    0,   80,   80,    0,   80,    0,   80,
    0,   80,   80,   80,   80,   80,   80,    0,   80,   80,
   80,   80,   80,    0,   37,    0,    0,    0,   80,   37,
    0,    0,   80,    0,   37,    0,    0,    0,    0,    0,
   38,    0,   37,    0,   37,   38,   37,   37,    0,    0,
   38,   37,   37,   37,    0,   24,    0,    0,   38,    0,
   38,   24,   38,   38,    0,    0,    0,   38,   38,   38,
   24,    0,    0,   24,    0,    0,   24,    0,   24,   24,
  193,    0,   24,   24,   24,  194,    0,  195,    0,  196,
    0,  197,    0,  198,    0,  199,    0,  200,    0,  201,
    0,    0,  202,  203,    0,    0,  204,    0,  205,    0,
   37,  206,    0,  207,    0,  208,    0,    0,  209,    0,
   37,    0,  210,    0,   37,    0,   38,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   38,    0,    0,    0,
   38,   24,    0,  211,   55,   55,    0,   55,    0,   55,
    0,   24,   55,   55,   55,   24,    0,   55,    0,   55,
   55,   55,   55,   55,    0,   55,   55,   55,   55,    0,
    0,    0,    0,   55,    0,   55,    0,    0,   55,   55,
   55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
   55,   55,   55,   55,   55,   55,   55,   55,   55,    0,
   55,   55,   55,   55,   55,   55,   55,   55,   55,    0,
   55,   55,   55,   55,   55,    0,   55,   55,    0,   55,
   55,   55,   55,   55,    0,   55,    0,   55,   55,   55,
    0,    0,    0,    0,   57,   55,   57,    0,   55,   55,
    0,   57,   57,   57,    0,    0,   57,    0,    0,   57,
    0,   57,   57,    0,   57,   57,   57,   57,    0,    0,
    0,    0,   57,    0,   57,    0,    0,    0,   57,   57,
    0,   57,    0,   57,    0,   57,    0,   57,    0,   57,
    0,   57,    0,   57,    0,    0,   57,   57,    0,   57,
   57,   57,   57,   57,   57,   57,   57,   57,    0,   57,
    0,    0,   57,    0,    0,    0,   57,    0,   57,   57,
   57,   57,   57,    0,   57,    0,   57,    0,   57,    0,
    0,    0,    0,    0,   57,    0,  269,   57,   57,  271,
  272,  273,  274,  275,  276,  277,  278,  279,  280,  281,
  282,  283,  284,  285,  286,  287,  288,
  ]
  yycheck := [                          3,
    4,   39,   75,  102,  133,  104,  193,   44,   45,   82,
   83,  241,  257,   17,  257,  257,  257,    3,    4,  262,
  257,  257,  263,  152,   55,  272,   57,  271,  299,   60,
  217,  313,  105,  256,  277,  146,  279,  283,   76,   77,
  281,   79,  278,   81,  299,   83,   84,   85,   34,  299,
  317,  275,  272,  299,  336,  299,  280,   61,  278,  341,
  284,  285,  344,  270,  346,  103,  286,  341,  342,   55,
  341,   57,  145,   86,   60,   88,   89,   90,   91,   92,
   93,   94,   95,   96,   97,   98,   99,  100,  101,   41,
  345,  321,  299,  106,  336,  345,  343,  257,  289,  339,
   52,  346,  344,  263,  344,  342,  342,  270,  257,  140,
  299,  148,  272,  262,  357,  275,  357,  257,  278,  230,
  280,  281,  262,  343,  284,  285,  286,  267,  277,  353,
  279,  296,  231,  363,  233,  275,  299,  277,  142,  279,
  280,  317,  270,  270,  284,  285,  286,  291,  267,  338,
  337,  340,  341,  275,  140,  299,  255,  257,  280,    3,
    4,  234,  284,  285,  329,  330,  342,  286,  241,  339,
  343,  299,  299,  297,  274,  345,  336,  301,  251,  303,
  339,  339,  257,  343,   29,   30,   31,  262,  347,  347,
  314,  339,  267,  353,  267,  233,  339,  357,  327,  347,
  275,  339,  277,  343,  279,  280,  257,  345,  357,  284,
  285,  286,  311,  353,  227,  228,  339,  357,  336,  339,
  343,  343,  260,  261,  262,  263,  264,  347,  337,  328,
  339,  353,  337,  257,  339,  344,  256,  257,  258,  259,
  260,  261,  262,  263,  264,  339,  266,  267,  321,    3,
    4,  345,  272,  273,  274,  275,  276,  277,  278,  279,
  280,  281,  282,  339,  284,  285,  286,  287,  288,  345,
  290,  238,  345,  240,  294,  295,  296,  257,  353,  299,
  247,  301,  357,  303,  343,  305,  257,  307,  347,  309,
  363,  311,  330,  313,  314,  338,  339,  340,  341,  343,
  257,  257,  345,  347,  343,  343,  262,  327,  347,  329,
  330,  267,  332,  333,  334,  343,  336,  245,  246,  347,
  358,  277,  342,  279,  344,  316,  346,  365,  366,  367,
  286,  339,  337,  353,  339,  281,  257,  357,  358,  260,
  345,  337,  347,  339,  348,  256,  257,  258,  259,  260,
  261,  257,  318,  264,  320,  266,  322,  323,  337,  325,
  339,  272,  273,  274,  275,  276,  332,  286,  334,  280,
  278,  282,  341,  284,  285,  336,  287,  288,  337,  290,
  339,  341,  337,  294,  295,  296,  339,  343,  299,  305,
  301,  307,  303,  309,  305,  311,  307,  337,  309,  339,
  311,  357,  313,  314,  344,  212,  213,  214,  215,  216,
  257,  218,  258,  259,  260,  261,  327,  272,  329,  330,
  345,  332,  333,  334,  223,  224,  225,  226,  299,  336,
  229,  342,  343,  344,  336,  346,  256,  257,  258,  259,
  260,  261,  353,  337,  264,  339,  266,  358,  257,  258,
  259,  260,  261,  273,  274,  275,  276,  336,  342,  257,
  280,  343,  282,  336,  284,  285,  347,  287,  288,  272,
  290,  343,  337,  341,  294,  295,  296,  346,  265,  299,
  346,  301,  341,  303,  337,  305,  337,  307,  337,  309,
  257,  311,  272,  313,  314,  275,  337,  345,  278,  257,
  280,  272,  337,  291,  284,  285,  286,  327,  283,  329,
  330,  257,  332,  333,  334,  257,  336,  219,  220,  221,
  222,  337,  342,  347,  344,  339,  346,  256,  257,  258,
  259,  260,  261,  353,    1,  264,  337,  266,  358,  341,
    8,   42,  134,  154,  273,  274,   53,  276,  267,  367,
   -1,   -1,   -1,  282,   -1,   -1,   -1,   -1,  287,  288,
   -1,  290,   -1,  343,   -1,  294,  295,  296,   -1,   -1,
  299,   -1,  301,  353,  303,   -1,  305,   -1,  307,   -1,
  309,   -1,  311,   -1,  313,  314,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  327,   -1,
  329,  330,   -1,  332,  333,  334,   -1,  336,   -1,   -1,
   -1,   -1,   -1,  342,   -1,  344,   -1,  346,  347,   -1,
  256,  257,  258,  259,  260,  261,   -1,   -1,  264,  358,
  266,   -1,   -1,  269,   -1,   -1,   -1,  273,  274,   -1,
  276,   -1,   -1,   -1,   -1,   -1,  282,   -1,   -1,   -1,
   -1,  287,  288,   -1,  290,   -1,   -1,   -1,  294,  295,
  296,   -1,   -1,  299,   -1,  301,   -1,  303,   -1,  305,
   -1,  307,   -1,  309,   -1,  311,   -1,  313,  314,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  327,   -1,  329,  330,   -1,  332,  333,  334,   -1,
  336,   -1,   -1,   -1,   -1,   -1,  342,   -1,  344,   -1,
  346,  256,  257,  258,  259,  260,  261,   -1,   -1,  264,
   -1,  266,  358,   -1,   -1,   -1,   -1,   -1,  273,  274,
   -1,  276,   -1,   -1,   -1,   -1,   -1,  282,   -1,   -1,
   -1,   -1,  287,  288,   -1,  290,   -1,  257,   -1,  294,
  295,  296,   -1,  263,  299,   -1,  301,   -1,  303,   -1,
  305,   -1,  307,   -1,  309,  275,  311,   -1,  313,  314,
  280,  281,   -1,   -1,  284,  285,   -1,   -1,   -1,   -1,
   -1,   -1,  327,   -1,  329,  330,   -1,  332,  333,  334,
   -1,  336,   -1,   -1,   -1,   -1,   -1,  342,   -1,  344,
   -1,  346,  257,  258,  259,  260,  261,   -1,   -1,  264,
   -1,  266,   -1,  358,   -1,   -1,   -1,   -1,  273,  274,
   -1,  276,   -1,   -1,   -1,   -1,   -1,  282,   -1,   -1,
   -1,   -1,  287,  288,   -1,  290,   -1,   -1,   -1,  294,
  295,  296,   -1,  353,  299,   -1,  301,  357,  303,   -1,
  305,   -1,  307,   -1,  309,   -1,  311,   -1,  313,  314,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  327,   -1,  329,  330,   -1,  332,  333,  334,
   -1,  336,   -1,   -1,   -1,   -1,   -1,  342,   -1,  344,
   -1,  346,  257,  258,  259,  260,  261,  267,   -1,  264,
   -1,  266,   -1,  358,   -1,  275,   -1,   -1,  273,  274,
  280,  276,   -1,   -1,  284,  285,  286,  282,   -1,   -1,
   -1,   -1,  287,  288,   -1,  290,   -1,   -1,   -1,  294,
  295,  296,   -1,   -1,  299,   -1,  301,   -1,  303,   -1,
  305,   -1,  307,   -1,  309,   -1,  311,   -1,  313,  314,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  327,   -1,  329,  330,   -1,  332,  333,  334,
   -1,  336,   -1,  343,   -1,   -1,   -1,  342,   -1,  344,
   -1,  346,  257,  353,   -1,   -1,   -1,  262,  263,   -1,
  265,   -1,  267,  358,   -1,  270,  271,  272,   -1,   -1,
  275,   -1,  277,  278,  279,  280,  281,   -1,  283,  284,
  285,  286,   -1,   -1,   -1,   -1,  291,   -1,  293,   -1,
   -1,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
  315,  316,   -1,  318,  319,  320,  321,  322,  323,  324,
  325,  326,   -1,  328,  329,  330,  331,  332,   -1,  334,
  335,  336,  337,  338,  339,  340,  341,   -1,   -1,  344,
  345,  346,  347,   -1,   -1,   -1,   -1,  257,  353,   -1,
   -1,  356,  357,  263,   -1,  265,   -1,   -1,   -1,   -1,
  270,  271,  272,   -1,   -1,  275,   -1,   -1,  278,   -1,
  280,  281,   -1,  283,  284,  285,  286,   -1,   -1,   -1,
   -1,  291,   -1,  293,   -1,   -1,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,  316,   -1,  318,  319,
  320,  321,  322,  323,  324,  325,  326,   -1,  328,  329,
  330,  331,  332,   -1,  334,  335,  336,  337,  338,  339,
  340,  341,   -1,  343,  344,  345,  346,  347,   -1,   -1,
   -1,   -1,  257,  353,   -1,   -1,  356,  357,  263,   -1,
  265,   -1,   -1,   -1,   -1,  270,  271,  272,   -1,   -1,
  275,   -1,   -1,  278,   -1,  280,  281,   -1,  283,  284,
  285,  286,   -1,   -1,   -1,   -1,  291,   -1,  293,   -1,
   -1,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
  315,  316,   -1,  318,  319,  320,  321,  322,  323,  324,
  325,  326,   -1,  328,  329,  330,  331,  332,   -1,  334,
  335,  336,  337,  338,  339,  340,  341,   -1,  343,  344,
  345,  346,  347,   -1,   -1,   -1,   -1,  257,  353,   -1,
   -1,  356,  357,  263,   -1,  265,   -1,   -1,   -1,   -1,
  270,  271,  272,   -1,   -1,  275,   -1,   -1,  278,   -1,
  280,  281,   -1,  283,  284,  285,  286,   -1,   -1,   -1,
   -1,  291,   -1,  293,   -1,   -1,  296,  297,  298,   -1,
  300,  301,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,  316,   -1,  318,  319,
  320,  321,  322,  323,  324,  325,  326,   -1,  328,  329,
  330,  331,  332,   -1,  334,  335,  336,  337,  338,  339,
  340,  341,   -1,  343,  344,  345,  346,  347,   -1,   -1,
   -1,   -1,  257,  353,   -1,   -1,  356,  357,  263,   -1,
  265,   -1,   -1,   -1,   -1,  270,  271,  272,   -1,   -1,
  275,   -1,   -1,  278,   -1,  280,  281,   -1,  283,  284,
  285,  286,   -1,   -1,   -1,   -1,  291,   -1,  293,   -1,
   -1,  296,  297,  298,   -1,  300,  301,  302,  303,  304,
  305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
  315,  316,   -1,  318,  319,  320,  321,  322,  323,  324,
  325,  326,   -1,  328,  329,  330,  331,  332,   -1,  334,
  335,  336,  337,  338,  339,  340,  341,   -1,  343,  344,
  345,  346,  347,   -1,   -1,   -1,   -1,  257,  353,   -1,
   -1,  356,  357,  263,   -1,  265,   -1,   -1,   -1,   -1,
  270,  271,  272,   -1,   -1,  275,   -1,   -1,  278,   -1,
  280,  281,   -1,  283,  284,  285,  286,   -1,   -1,   -1,
   -1,  291,   -1,  293,   -1,   -1,  296,  297,  298,   -1,
  300,  301,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,  316,   -1,  318,  319,
  320,  321,  322,  323,  324,  325,  326,   -1,  328,  329,
  330,  331,  332,   -1,  334,  335,  336,  337,  338,  339,
  340,  341,   -1,  343,  344,  345,  346,  347,  257,   -1,
   -1,   -1,   -1,  353,  263,   -1,  356,  357,   -1,   -1,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,  278,
   -1,  280,  281,   -1,  283,  284,  285,  286,   -1,   -1,
   -1,   -1,  291,   -1,  293,   -1,   -1,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,   -1,  318,
  319,  320,  321,  322,  323,  324,  325,  326,   -1,  328,
  329,  330,  331,  332,   -1,  334,  335,  336,  337,  338,
  339,  340,  341,   -1,  343,  344,  345,  346,  347,   -1,
   -1,   -1,   -1,  257,  353,   -1,   -1,  356,  357,  263,
   -1,  265,   -1,   -1,   -1,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,  278,   -1,  280,  281,   -1,  283,
  284,  285,  286,   -1,   -1,   -1,   -1,  291,   -1,  293,
   -1,   -1,  296,  297,  298,   -1,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,   -1,  318,  319,  320,  321,  322,  323,
  324,  325,  326,   -1,  328,  329,  330,  331,  332,   -1,
  334,  335,  336,  337,  338,  339,  340,  341,   -1,  343,
  344,  345,  346,  347,   -1,   -1,   -1,   -1,  257,  353,
   -1,   -1,  356,  357,  263,   -1,  265,   -1,   -1,   -1,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,  278,
   -1,  280,  281,   -1,  283,  284,  285,  286,   -1,   -1,
   -1,   -1,  291,   -1,  293,   -1,   -1,  296,  297,  298,
   -1,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,   -1,  318,
  319,  320,  321,  322,  323,  324,  325,  326,   -1,  328,
  329,  330,  331,  332,   -1,  334,  335,  336,  337,  338,
  339,  340,  341,   -1,  343,  344,  345,  346,  347,   -1,
   -1,   -1,   -1,  257,  353,   -1,   -1,  356,  357,  263,
   -1,  265,   -1,   -1,   -1,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,  278,   -1,  280,  281,   -1,  283,
  284,  285,  286,   -1,   -1,   -1,   -1,  291,   -1,  293,
   -1,   -1,  296,  297,  298,   -1,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,   -1,  318,  319,  320,  321,  322,  323,
  324,  325,  326,   -1,  328,  329,  330,  331,  332,   -1,
  334,  335,  336,  337,  338,  339,  340,  341,   -1,  343,
  344,  345,  346,  347,   -1,   -1,   -1,   -1,  257,  353,
   -1,   -1,  356,  357,  263,   -1,  265,   -1,   -1,   -1,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,  278,
   -1,  280,  281,   -1,  283,  284,  285,  286,   -1,   -1,
   -1,   -1,  291,   -1,  293,   -1,   -1,  296,  297,  298,
   -1,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,   -1,  318,
  319,  320,  321,  322,  323,  324,  325,  326,   -1,  328,
  329,  330,  331,  332,   -1,  334,  335,  336,  337,  338,
  339,  340,  341,   -1,  343,  344,  345,  346,  347,   -1,
   -1,   -1,   -1,  257,  353,   -1,   -1,  356,  357,  263,
   -1,  265,   -1,   -1,   -1,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,  278,   -1,  280,  281,   -1,  283,
  284,  285,  286,   -1,   -1,   -1,   -1,  291,   -1,  293,
   -1,   -1,  296,  297,  298,   -1,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,   -1,  318,  319,  320,  321,  322,  323,
  324,  325,  326,   -1,  328,  329,  330,  331,  332,   -1,
  334,  335,  336,  337,  338,  339,  340,  341,   -1,  343,
  344,  345,  346,  347,   -1,   -1,   -1,   -1,  257,  353,
   -1,   -1,  356,  357,  263,   -1,  265,   -1,   -1,   -1,
   -1,   -1,  271,  272,   -1,   -1,  275,   -1,   -1,  278,
   -1,  280,  281,   -1,  283,  284,  285,  286,   -1,   -1,
   -1,   -1,  291,   -1,  293,   -1,   -1,  296,  297,  298,
   -1,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,   -1,  318,
  319,  320,  321,  322,  323,  324,  325,  326,   -1,  328,
  329,  330,  331,  332,   -1,  334,  335,  336,  337,  338,
  339,  340,  341,   -1,  343,  344,  345,  346,  347,   -1,
   -1,   -1,   -1,  257,  353,   -1,   -1,  356,  357,  263,
   -1,  265,   -1,   -1,   -1,   -1,   -1,  271,  272,   -1,
   -1,  275,   -1,   -1,  278,   -1,  280,  281,   -1,  283,
  284,  285,  286,   -1,   -1,   -1,   -1,  291,   -1,  293,
   -1,   -1,  296,  297,  298,   -1,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,   -1,  318,  319,  320,  321,  322,  323,
  324,  325,  326,   -1,  328,  329,  330,  331,  332,   -1,
  334,  335,  336,  337,  338,  339,  340,  341,   -1,  343,
  344,  345,  346,  347,   -1,   -1,   -1,   -1,  257,  353,
   -1,   -1,  356,  357,  263,   -1,  265,   -1,   -1,   -1,
   -1,   -1,  271,  272,   -1,   -1,  275,   -1,   -1,  278,
   -1,  280,  281,   -1,  283,  284,  285,  286,   -1,   -1,
   -1,   -1,  291,   -1,  293,   -1,   -1,  296,  297,  298,
   -1,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,   -1,  318,
  319,  320,  321,  322,  323,  324,  325,  326,   -1,  328,
  329,  330,  331,  332,   -1,  334,  335,  336,  337,  338,
  339,  340,  341,   -1,  343,  344,  345,  346,  347,   -1,
   -1,   -1,   -1,  257,  353,   -1,   -1,  356,  357,  263,
   -1,  265,   -1,   -1,   -1,   -1,   -1,  271,  272,   -1,
   -1,  275,   -1,   -1,  278,   -1,  280,  281,   -1,  283,
  284,  285,  286,   -1,   -1,   -1,   -1,  291,   -1,  293,
   -1,   -1,  296,  297,  298,   -1,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,   -1,  318,  319,  320,  321,  322,  323,
  324,  325,  326,   -1,  328,  329,  330,  331,  332,   -1,
  334,  335,  336,  337,  338,  339,  340,  341,   -1,  343,
  344,  345,  346,  347,   -1,   -1,   -1,   -1,  257,  353,
   -1,   -1,  356,  357,  263,   -1,  265,   -1,   -1,   -1,
   -1,  270,   -1,  272,   -1,   -1,  275,   -1,   -1,  278,
   -1,  280,  281,   -1,  283,  284,  285,  286,   -1,   -1,
   -1,   -1,  291,   -1,  293,   -1,   -1,  296,  297,  298,
   -1,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,   -1,  318,
  319,  320,  321,  322,  323,  324,  325,  326,   -1,  328,
  329,  330,  331,  332,   -1,  334,  335,  336,  337,  338,
  339,  340,  341,   -1,  343,  344,  345,  346,  347,   -1,
   -1,   -1,   -1,  257,  353,   -1,   -1,  356,  357,  263,
   -1,  265,   -1,   -1,   -1,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,  278,   -1,  280,  281,   -1,  283,
  284,  285,  286,   -1,   -1,   -1,   -1,  291,   -1,  293,
   -1,   -1,   -1,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,   -1,  318,  319,  320,  321,  322,  323,
  324,  325,  326,   -1,  328,   -1,   -1,  331,  332,   -1,
  334,  335,  336,  337,  338,  339,  340,  341,   -1,  343,
  344,  345,  346,  347,   -1,   -1,   -1,   -1,  257,  353,
   -1,   -1,  356,  357,  263,   -1,  265,   -1,   -1,   -1,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,  278,
   -1,  280,  281,   -1,  283,  284,  285,  286,   -1,   -1,
   -1,   -1,  291,   -1,  293,   -1,   -1,  296,  297,  298,
  299,  300,  301,  302,  303,  304,   -1,  306,   -1,  308,
   -1,  310,   -1,  312,  313,  314,  315,  316,   -1,  318,
  319,  320,  321,  322,  323,  324,  325,  326,   -1,  328,
  329,  330,  331,  332,   -1,  334,  335,  336,  337,  338,
  339,  340,  341,   -1,  343,  344,  345,  346,  347,   -1,
   -1,   -1,   -1,  257,  353,   -1,   -1,  356,  357,  263,
   -1,  265,   -1,   -1,   -1,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,  278,   -1,  280,  281,   -1,  283,
  284,  285,  286,   -1,   -1,   -1,   -1,  291,   -1,  293,
   -1,   -1,  296,   -1,  298,  299,  300,   -1,  302,   -1,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
   -1,  315,  316,   -1,  318,  319,  320,  321,  322,  323,
  324,  325,  326,   -1,  328,  329,  330,  331,  332,   -1,
  334,  335,  336,  337,  338,  339,  340,  341,   -1,  343,
  344,  345,  346,  347,   -1,   -1,   -1,   -1,  257,  353,
   -1,   -1,  356,  357,  263,   -1,  265,   -1,   -1,   -1,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,  278,
   -1,  280,  281,   -1,  283,  284,  285,  286,   -1,   -1,
   -1,   -1,  291,   -1,  293,   -1,   -1,  296,  297,  298,
  299,  300,  301,  302,  303,  304,   -1,  306,   -1,  308,
   -1,  310,   -1,  312,  313,  314,  315,  316,   -1,  318,
  319,  320,  321,  322,  323,  324,  325,  326,   -1,  328,
  329,  330,  331,  332,   -1,  334,  335,  336,  337,  338,
  339,  340,  341,   -1,  343,  344,  345,  346,  347,   -1,
   -1,   -1,   -1,  257,  353,   -1,   -1,  356,  357,  263,
   -1,  265,   -1,   -1,   -1,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,  278,   -1,  280,  281,   -1,  283,
  284,  285,  286,   -1,   -1,   -1,   -1,  291,   -1,  293,
   -1,   -1,  296,  297,  298,  299,  300,  301,  302,  303,
  304,   -1,  306,   -1,  308,   -1,  310,   -1,  312,  313,
  314,  315,  316,   -1,  318,  319,  320,  321,  322,  323,
  324,  325,  326,   -1,  328,  329,  330,  331,  332,   -1,
  334,  335,  336,  337,  338,  339,  340,  341,   -1,  343,
  344,  345,  346,  347,   -1,   -1,   -1,   -1,  257,  353,
   -1,   -1,  356,  357,  263,   -1,  265,   -1,   -1,   -1,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,  278,
   -1,  280,  281,   -1,  283,  284,  285,  286,   -1,   -1,
   -1,   -1,  291,   -1,  293,   -1,   -1,  296,  297,  298,
  299,  300,  301,  302,  303,  304,   -1,  306,   -1,  308,
   -1,  310,   -1,  312,  313,  314,  315,  316,   -1,  318,
  319,  320,  321,  322,  323,  324,  325,  326,   -1,  328,
  329,  330,  331,  332,   -1,  334,  335,  336,  337,  338,
  339,  340,  341,   -1,  343,  344,  345,  346,  347,   -1,
   -1,   -1,   -1,  257,  353,   -1,   -1,  356,  357,  263,
   -1,  265,   -1,   -1,   -1,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,  278,   -1,  280,  281,   -1,  283,
  284,  285,  286,   -1,   -1,   -1,   -1,  291,   -1,  293,
   -1,   -1,  296,  297,  298,  299,  300,  301,  302,  303,
  304,   -1,  306,   -1,  308,   -1,  310,   -1,  312,  313,
  314,  315,  316,   -1,  318,  319,  320,  321,  322,  323,
  324,  325,  326,   -1,  328,  329,  330,  331,  332,   -1,
  334,  335,  336,  337,  338,  339,  340,  341,   -1,  343,
  344,  345,  346,  347,   -1,   -1,   -1,   -1,  257,  353,
   -1,   -1,  356,  357,  263,   -1,  265,   -1,   -1,   -1,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,  278,
   -1,  280,  281,   -1,  283,  284,  285,  286,   -1,   -1,
   -1,   -1,  291,   -1,  293,   -1,   -1,  296,  297,  298,
  299,  300,  301,  302,  303,  304,   -1,  306,   -1,  308,
   -1,  310,   -1,  312,  313,  314,  315,  316,   -1,  318,
  319,  320,  321,  322,  323,  324,  325,  326,   -1,  328,
  329,  330,  331,  332,   -1,  334,  335,  336,  337,  338,
  339,  340,  341,   -1,  343,  344,  345,  346,  347,   -1,
   -1,   -1,   -1,  257,  353,   -1,   -1,  356,  357,  263,
   -1,  265,   -1,   -1,   -1,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,  278,   -1,  280,  281,   -1,  283,
  284,  285,  286,   -1,   -1,   -1,   -1,  291,   -1,  293,
   -1,   -1,  296,  297,  298,  299,  300,  301,  302,  303,
  304,   -1,  306,   -1,  308,   -1,  310,   -1,  312,  313,
  314,  315,  316,   -1,  318,  319,  320,  321,  322,  323,
  324,  325,  326,   -1,  328,  329,  330,  331,  332,   -1,
  334,  335,  336,  337,  338,  339,  340,  341,   -1,  343,
  344,  345,  346,  347,   -1,   -1,   -1,   -1,  257,  353,
   -1,   -1,  356,  357,  263,   -1,  265,   -1,   -1,   -1,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,  278,
   -1,  280,  281,   -1,  283,  284,  285,  286,   -1,   -1,
   -1,   -1,  291,   -1,  293,   -1,   -1,  296,   -1,  298,
  299,  300,   -1,  302,   -1,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,   -1,  315,  316,   -1,  318,
  319,  320,  321,  322,  323,  324,  325,  326,   -1,  328,
  329,  330,  331,  332,   -1,  334,  335,  336,  337,  338,
  339,  340,  341,   -1,  343,  344,  345,  346,  347,   -1,
   -1,   -1,   -1,  257,  353,   -1,   -1,  356,  357,  263,
   -1,  265,   -1,   -1,   -1,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,  278,   -1,  280,  281,   -1,  283,
  284,  285,  286,   -1,   -1,   -1,   -1,  291,   -1,  293,
   -1,   -1,  296,   -1,  298,  299,  300,   -1,  302,   -1,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
   -1,  315,  316,   -1,  318,  319,  320,  321,  322,  323,
  324,  325,  326,   -1,  328,  329,  330,  331,  332,   -1,
  334,  335,  336,  337,  338,  339,  340,  341,   -1,  343,
  344,  345,  346,  347,   -1,   -1,   -1,   -1,  257,  353,
   -1,   -1,  356,  357,  263,   -1,  265,   -1,   -1,   -1,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,  278,
   -1,  280,  281,   -1,  283,  284,  285,  286,   -1,   -1,
   -1,   -1,  291,   -1,  293,   -1,   -1,  296,   -1,  298,
  299,  300,   -1,  302,   -1,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,   -1,  315,  316,   -1,  318,
  319,  320,  321,  322,  323,  324,  325,  326,   -1,  328,
  329,  330,  331,  332,   -1,  334,  335,  336,  337,  338,
  339,  340,  341,   -1,  343,  344,  345,  346,  347,   -1,
   -1,   -1,   -1,  257,  353,   -1,   -1,  356,  357,  263,
   -1,  265,   -1,   -1,   -1,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,  278,   -1,  280,  281,   -1,  283,
  284,  285,  286,   -1,   -1,   -1,   -1,  291,   -1,  293,
   -1,   -1,  296,   -1,  298,  299,  300,   -1,  302,   -1,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
   -1,  315,  316,   -1,  318,  319,  320,  321,  322,  323,
  324,  325,  326,   -1,  328,  329,  330,  331,  332,   -1,
  334,  335,  336,  337,  338,  339,  340,  341,   -1,  343,
  344,  345,  346,  347,   -1,   -1,   -1,   -1,  257,  353,
   -1,   -1,  356,  357,  263,   -1,  265,   -1,   -1,   -1,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,  278,
   -1,  280,  281,   -1,  283,  284,  285,  286,   -1,   -1,
   -1,   -1,  291,   -1,  293,   -1,   -1,  296,  297,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,   -1,  314,  315,  316,   -1,  318,
  319,  320,  321,  322,  323,  324,  325,  326,   -1,  328,
  329,  330,  331,  332,   -1,  334,  335,   -1,  337,  338,
  339,  340,   -1,   -1,  343,   -1,  345,  257,  347,   -1,
   -1,   -1,   -1,  263,  353,  265,   -1,  356,  357,   -1,
  270,  271,  272,   -1,   -1,  275,   -1,   -1,  278,   -1,
  280,  281,   -1,  283,  284,  285,  286,   -1,   -1,   -1,
   -1,  291,   -1,  293,   -1,   -1,  296,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,  316,   -1,   -1,  319,
   -1,  321,   -1,   -1,  324,   -1,  326,   -1,  328,  329,
  330,  331,   -1,   -1,   -1,  335,  336,  337,  338,  339,
  340,  341,   -1,  343,  344,  345,  346,  347,   -1,   -1,
   -1,   -1,  257,  353,   -1,   -1,  356,  357,  263,   -1,
  265,   -1,   -1,   -1,   -1,  270,  271,  272,   -1,   -1,
  275,   -1,   -1,  278,   -1,  280,  281,   -1,  283,  284,
  285,  286,   -1,   -1,   -1,   -1,  291,   -1,   -1,   -1,
   -1,  296,  297,   -1,  299,   -1,  301,   -1,  303,   -1,
  305,   -1,  307,   -1,  309,   -1,  311,   -1,  313,  314,
   -1,   -1,   -1,  318,   -1,  320,   -1,  322,  323,   -1,
  325,   -1,   -1,   -1,  329,  330,   -1,  332,   -1,  334,
   -1,  336,  337,  338,  339,  340,  341,   -1,  343,  344,
  345,  346,  347,   -1,  257,   -1,   -1,   -1,  353,  262,
   -1,   -1,  357,   -1,  267,   -1,   -1,   -1,   -1,   -1,
  257,   -1,  275,   -1,  277,  262,  279,  280,   -1,   -1,
  267,  284,  285,  286,   -1,  257,   -1,   -1,  275,   -1,
  277,  263,  279,  280,   -1,   -1,   -1,  284,  285,  286,
  272,   -1,   -1,  275,   -1,   -1,  278,   -1,  280,  281,
  293,   -1,  284,  285,  286,  298,   -1,  300,   -1,  302,
   -1,  304,   -1,  306,   -1,  308,   -1,  310,   -1,  312,
   -1,   -1,  315,  316,   -1,   -1,  319,   -1,  321,   -1,
  343,  324,   -1,  326,   -1,  328,   -1,   -1,  331,   -1,
  353,   -1,  335,   -1,  357,   -1,  343,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  353,   -1,   -1,   -1,
  357,  343,   -1,  356,  262,  263,   -1,  265,   -1,  267,
   -1,  353,  270,  271,  272,  357,   -1,  275,   -1,  277,
  278,  279,  280,  281,   -1,  283,  284,  285,  286,   -1,
   -1,   -1,   -1,  291,   -1,  293,   -1,   -1,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,  316,   -1,
  318,  319,  320,  321,  322,  323,  324,  325,  326,   -1,
  328,  329,  330,  331,  332,   -1,  334,  335,   -1,  337,
  338,  339,  340,  341,   -1,  343,   -1,  345,  346,  347,
   -1,   -1,   -1,   -1,  263,  353,  265,   -1,  356,  357,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,  278,
   -1,  280,  281,   -1,  283,  284,  285,  286,   -1,   -1,
   -1,   -1,  291,   -1,  293,   -1,   -1,   -1,  297,  298,
   -1,  300,   -1,  302,   -1,  304,   -1,  306,   -1,  308,
   -1,  310,   -1,  312,   -1,   -1,  315,  316,   -1,  318,
  319,  320,  321,  322,  323,  324,  325,  326,   -1,  328,
   -1,   -1,  331,   -1,   -1,   -1,  335,   -1,  337,  338,
  339,  340,  341,   -1,  343,   -1,  345,   -1,  347,   -1,
   -1,   -1,   -1,   -1,  353,   -1,  191,  356,  357,  194,
  195,  196,  197,  198,  199,  200,  201,  202,  203,  204,
  205,  206,  207,  208,  209,  210,  211,
  ]
$define YYFINAL 2
$define YYMAXTOKEN 359
  yyname := [
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"IDENT","INTLIT","REALLIT",
"STRINGLIT","CSETLIT","EOFX","ABSTRACT","BREAK","BY","CASE","CLASS","CRITICAL",
"DEFAULT","DO","ELSE","END","EVERY","FAIL","GLOBAL","IF","IMPORT","CONSTRUCTOR",
"LINK","PRIVATE","METHOD","NEXT","OF","PUBLIC","READ","RECORD","REPEAT",
"RETURN","STATIC","SUSPEND","THEN","THREAD","TO","UNTIL","WHILE","BANG","MOD",
"AUGMOD","AND","AUGAND","STAR","AUGSTAR","INTER","AUGINTER","PLUS","AUGPLUS",
"UNION","AUGUNION","MINUS","AUGMINUS","DIFF","AUGDIFF","DOT","SLASH","AUGSLASH",
"ASSIGN","INVASSIGN","LTH","AUGLTH","LTHE","AUGLTHE","EQ","GTH","AUGGTH","GTHE",
"AUGGTHE","QMARK","AUGQMARK","BACKSLASH","CARET","AUGCARET","BAR","TILDE","NE",
"AUGNE","LPAREN","RPAREN","PCOLON","COMMA","MCOLON","COLON","COLONCOLON",
"SEMICOL","LBRACK","RBRACK","LBRACE","RBRACE","DOLLAR","SND","SNDBK","RCV",
"RCVBK","CONST","TOPIC","FUNK","CONASSIGN","STORE","AT","CREATE",
  ]
  yyrule := [
"$accept : program",
"program : decls EOFX",
"decls :",
"decls : decls decl semiOptional",
"decl : record",
"decl : varDecl",
"decl : link",
"decl : import",
"decl : classdef",
"decl : invocDef",
"varDecl :",
"varDecl : varDecl retentions idlist semiOptional",
"retentions : GLOBAL staticOption idlist",
"retentions : CONST constlist",
"retentions : PRIVATE staticOption idlist",
"retentions : PUBLIC staticOption",
"retentions : READ staticOption",
"staticOption :",
"staticOption : STATIC",
"constructor :",
"constructor : CONSTRUCTOR varDecl methbody",
"constructor : CONSTRUCTOR LPAREN arglist RPAREN varDecl methbody",
"classdef : classhead varDecl methods constructor END",
"classhead : storeFlag CLASS IDENT supers LPAREN arglist RPAREN",
"classhead : storeFlag CLASS IDENT supers",
"supers :",
"supers : COLON IDENT supers",
"supers : COLON packageref supers",
"packageref : IDENT COLONCOLON IDENT",
"packageref : COLONCOLON expr",
"methods :",
"methods : meth methods",
"methods : varDecl SEMICOL methods",
"methods : record methods",
"methods : invocDef methods",
"semiOptional :",
"semiOptional : SEMICOL",
"import : IMPORT lnklist",
"link : LINK lnklist",
"lnklist : lnkfile",
"lnklist : lnklist COMMA lnkfile",
"lnkfile : IDENT",
"lnkfile : STRINGLIT",
"constlist : constdef",
"constlist : constlist COMMA constdef",
"constdef : IDENT ASSIGN literal",
"record : storeFlag RECORD IDENT LPAREN fldlist RPAREN",
"storeFlag :",
"storeFlag : STORE",
"invocDef : IDENT INVASSIGN query",
"invocDef : IDENT INVASSIGN IDENT LPAREN exprlist RPAREN",
"invocDef : IDENT INVASSIGN LBRACK expr RBRACK",
"invocDef : IDENT INVASSIGN patternList semiOptional",
"query : LPAREN arglist RPAREN LBRACE exprlist RBRACE",
"query : LPAREN arglist RPAREN IDENT LBRACE exprlist RBRACE",
"patternList :",
"patternList : patternList",
"expr :",
"fldlist :",
"fldlist : idlist",
"meth : ABSTRACT methhead",
"meth : methhead varDecl methbody END",
"methhead : METHOD IDENT LPAREN arglist RPAREN",
"arglist :",
"arglist : parmlist",
"arglist : parmlist LBRACK RBRACK",
"idlist : IDENT",
"idlist : idlist COMMA IDENT",
"parmlist : arg",
"parmlist : parmlist COMMA arg",
"arg : IDENT",
"arg : IDENT COLON IDENT",
"arg : IDENT COLON literal",
"arg : IDENT COLON IDENT COLON literal",
"methbody :",
"methbody : nexpr SEMICOL methbody",
"nexpr :",
"nexpr : expr",
"expr : expr1",
"expr : expr AND expr1",
"expr1 : expr2",
"expr1 : expr2 ASSIGN expr1",
"expr1 : invocDef",
"expr1 : expr2 CONASSIGN expr1",
"expr1 : expr2 AUGDIFF expr1",
"expr1 : expr2 AUGUNION expr1",
"expr1 : expr2 AUGPLUS expr1",
"expr1 : expr2 AUGMINUS expr1",
"expr1 : expr2 AUGSTAR expr1",
"expr1 : expr2 AUGINTER expr1",
"expr1 : expr2 AUGSLASH expr1",
"expr1 : expr2 AUGMOD expr1",
"expr1 : expr2 AUGCARET expr1",
"expr1 : expr2 AUGGTHE expr1",
"expr1 : expr2 AUGGTH expr1",
"expr1 : expr2 AUGLTHE expr1",
"expr1 : expr2 AUGLTH expr1",
"expr1 : expr2 AUGNE expr1",
"expr1 : expr2 AUGQMARK expr1",
"expr1 : expr2 AUGAND expr1",
"expr2 : expr3",
"expr2 : expr2 TO expr3",
"expr2 : expr2 TO expr3 BY expr3",
"expr3 : expr4",
"expr3 : expr4 BAR expr3",
"expr4 : expr5",
"expr4 : expr4 EQ expr5",
"expr4 : expr4 GTHE expr5",
"expr4 : expr4 GTH expr5",
"expr4 : expr4 LTHE expr5",
"expr4 : expr4 LTH expr5",
"expr4 : expr4 NE expr5",
"expr5 : expr7",
"expr5 : expr5 PLUS expr7",
"expr5 : expr5 DIFF expr7",
"expr5 : expr5 UNION expr7",
"expr5 : expr5 MINUS expr7",
"expr7 : expr8",
"expr7 : expr7 STAR expr8",
"expr7 : expr7 INTER expr8",
"expr7 : expr7 SLASH expr8",
"expr7 : expr7 MOD expr8",
"expr8 : expr9",
"expr8 : expr9 CARET expr8",
"expr9 : expr10",
"expr9 : expr9 BACKSLASH expr10",
"expr9 : expr9 BANG expr10",
"expr10 : expr11",
"expr10 : AT expr10",
"expr10 : BAR expr10",
"expr10 : DOT expr10",
"expr10 : BANG expr10",
"expr10 : DIFF expr10",
"expr10 : PLUS expr10",
"expr10 : STAR expr10",
"expr10 : SLASH expr10",
"expr10 : CARET expr10",
"expr10 : INTER expr10",
"expr10 : TILDE expr10",
"expr10 : MINUS expr10",
"expr10 : NE expr10",
"expr10 : UNION expr10",
"expr10 : QMARK expr10",
"expr10 : BACKSLASH expr10",
"expr11 : literal",
"expr11 : section",
"expr11 : return",
"expr11 : if",
"expr11 : case",
"expr11 : while",
"expr11 : until",
"expr11 : every",
"expr11 : repeat",
"expr11 : IDENT",
"expr11 : NEXT",
"expr11 : BREAK nexpr",
"expr11 : LPAREN exprlist RPAREN",
"expr11 : LBRACE compound RBRACE",
"expr11 : LBRACK exprlist RBRACK",
"expr11 : expr11 LBRACK exprlist RBRACK",
"expr11 : expr11 LBRACE RBRACE",
"expr11 : expr11 LBRACE pdcolist RBRACE",
"expr11 : expr11 LPAREN exprlist RPAREN",
"expr11 : expr11 COLON LPAREN exprlist RPAREN",
"expr11 : expr11 DOT IDENT",
"expr11 : expr11 DOT packageref",
"expr11 : packageref",
"expr11 : expr11 DOT CONSTRUCTOR",
"expr11 : AND FAIL",
"expr11 : AND IDENT",
"while : WHILE expr",
"while : WHILE expr DO expr",
"until : UNTIL expr",
"until : UNTIL expr DO expr",
"every : EVERY expr",
"every : EVERY expr DO expr",
"repeat : REPEAT expr",
"return : FAIL",
"return : RETURN nexpr",
"return : SUSPEND nexpr",
"return : SUSPEND expr DO expr",
"if : IF expr THEN expr",
"if : IF expr THEN expr ELSE expr",
"case : CASE expr OF LBRACE caselist RBRACE",
"caselist : cclause",
"caselist : caselist SEMICOL cclause",
"cclause : DEFAULT COLON expr",
"cclause : expr COLON expr",
"exprlist : nexpr",
"exprlist : exprlist COMMA nexpr",
"pdcolist : nexpr",
"pdcolist : pdcolist COMMA nexpr",
"literal : INTLIT",
"literal : REALLIT",
"literal : STRINGLIT",
"literal : CSETLIT",
"section : expr11 LBRACK expr sectop expr RBRACK",
"sectop : COLON",
"sectop : PCOLON",
"sectop : MCOLON",
"compound : nexpr",
"compound : nexpr SEMICOL compound",
"program : error decls EOFX",
"expr : error",
  ]

end

#####################################################################
#####################################################################
invocable all    # need to look up semantic actions by name

global yytext    # user variable to return contextual strings
global yyval     # used to return semantic vals from action routines
global yylval    # the 'lval' (result) I got from yylex()
global yydebug   # (boolean) do I want debug output?
global yynerrs   # (integer) number of errors so far
global yyerrflag # (integer) was there an error?
global yychar    # (integer) the current working character
global action    # maps an integer to a semantic action procedure

global yylhs
global yylen
global yydefred
global yydgoto
global yysindex
global yyrindex
global yygindex
global yytable
global yycheck
global yyname
global yyrule

global statestk         # state stack
global valstk           # value stack
################################################################
# procedure: init_stacks : allocate and prepare stacks
################################################################
procedure init_stacks()
  local i
  statestk := []
  valstk := []
  yyval  := 0 
  yylval := 0 
  action := list(1000, action_null)  # remove hard coded 1000 later
  every i := 1 to 1000 do action[i] := proc("action_" || i)
end

#line 1160 "scoelgram.y"

global tokens

#
# This procedure parenthesizes the right-hand side of an expression,
# apparently to simplify or correct any precedence or semantic issues
# when passing the code on to iconc.
#
procedure parenthesize_assign(nd)
	local rhs

	if /iconc then return nd
	if not (*nd.children = 3) then return nd
	rhs := nd.children[3]
	if (not(type(rhs) == "treenode")) then return nd
	if (not(rhs.label == "invoke")) then return nd
	rhs := node("Paren", "(", rhs, ")")
	nd.children[3] := rhs
	return nd
end

#procedure FieldRef(lhs, dot, rhs)
#	if /iconc | (type(lhs) ~== "treenode") then return Field(lhs, dot, rhs)

#	if (lhs.label == "invoke") then {
#		tmpcount +:= 1;
#		return node("Paren", "(",
#				node("assign", "__" || tmpcount, " := ", lhs, ")", "& "),
#				node("invoke", Field("__" || tmpcount, ".", rhs))
#			);
#	}
#	return Field(lhs, dot, rhs)
#end

procedure InvocationNode(args[])
	tmpcount +:= 1
	if type(args[1]) == "token" & (args[1].tok = IDENT) then {
		n1 := args[1]
		lparen := copy(args[1])
		lparen.tok := LPAREN
		lparen.s := "("
	} else {
		n1 := node("Paren","(",node("assign","__"||tmpcount,":=",args[1]),")")
		if lparen := Clone1stToken(args[1]) then {
			lparen.tok := LPAREN
			lparen.s := "("
		} else lparen := "("
	}
	if *args = 6 then {
		return node("Paren",lparen,node("invoke",
				# iconc uses no __m business
				(if /iconc then Field(Field(n1, ".", "__m"), "." , args[3]) 
						else Field(n1, ".", args[3])),

				args[4], node("exprlist",
				if n1 === args[1] then args[1] else "__"||tmpcount,
				if args[5] === EmptyNode then EmptyNode else ",",args[5]),args[6])
				,")")
	} else {
		if /iconc then
			return  node("Paren",lparen,node("invoke",Field(Field(
					Field(n1,".", "__m"),
					"." , args[3]),".",args[5]),
					args[6], node("exprlist",
					if n1 === args[1] then args[1] else "__"||tmpcount,
					if args[7] === EmptyNode then EmptyNode else ",",args[7]),args[8])
					,")")
		else return SuperMethodInvok ! args
	}
end

procedure SimpleInvocation(expr11, lparen, args, rparen)
	if /iconc then return node("invoke", expr11, lparen, args, rparen)
	
	if ((type(expr11) == "token") & (expr11.tok = IDENT)) then {
		return node("invoke", expr11, lparen, args, rparen)
	}

	if (type(expr11) == "treenode") then {
		case expr11.label of {
			"field": {
				#
				# need to examine lhs of field-ref to determine
				# whether we need to decompose the expr11 further...
				#
				if (type(expr11.children[1]) == "treenode") then {
					tmpcount +:= 1;
					n1 := node("Paren", "(", node("assign", "__"||tmpcount, ":=",
							expr11.children[1]), ")")
					return node("exprlist", "(", n1, "&",
							node("invoke", Field("__"||tmpcount, ".", expr11.children[3]),
							lparen, args, rparen), ")")
				} else {
					return node("invoke", expr11, lparen, args, rparen)
				}
			}
			default: {
				return node("invoke", expr11, lparen, args, rparen)
			}
		}
	}
   return node("invoke", expr11, lparen, args, rparen)
end

procedure SuperMethodInvok(args[])
	tmpcount +:= 1
	if (type(args[1]) == "token") & (args[1].tok = IDENT) then {
		n1 := args[1]
		lparen := copy(args[1])
		lparen.tok := LPAREN
		lparen.s := "("
	} else {
		n1 := node("Paren","(",node("assign","__"||tmpcount,":=",args[1]),")")
		if lparen := Clone1stToken(args[1]) then {
			lparen.tok := LPAREN
			lparen.s := "("
		} else lparen := "("
	}

	args[3].s := mangle_class_sym(args[3].s)
	args[3].s ||:= "__oprec"
	return node("exprlist", "(", n1, ")", " & ",
			node("Paren", lparen, node("invoke",
			Field(args[3], ".", args[5]),
			args[6], node("exprlist",
			if n1 === args[1] then args[1] else "__" || tmpcount,
			if args[7] === EmptyNode then EmptyNode else ",", args[7]), args[8]),
			")", ))
end

procedure isloco(node, s)
	case type(node) of {
		"treenode": {
			if *node.children > 0 then return isloco(!node.children, s)
		}
		"token" : {
			if (node.tok = IDENT) & (node.s == s) then return
		}
	}
end

procedure buildtab_from_cclause(n, args)
	if type(n) ~== "treenode" then stop("bad table literal")
	comma := copy(n.children[2])
	comma.tok := COMMA
	comma.s := ","
	case n.label of {
		"cclause0": {
			if *args.children > 0 then push(args.children, comma)
			push(args.children, n.children[3])
		}
		"cclause1": {
			if *args.children > 0 then push(args.children, comma)
			push(args.children, n.children[3])
			push(args.children, comma)
			push(args.children, n.children[1])
		}
	}
end

# build a tree equivalent to
# {__tmp :=[]; every put(__tmp, expr); if __tmp>0 then __tmp}
# The enclosing procedure/method also needs to declare this temp var;
# see AppendListCompTemps
#
procedure ListComp(expr)
	local tmp
	tmpcount +:= 1
	tmp := "__" || tmpcount
	return node("ListComp",
			"{", string(tmp), " :=[]; every put(" || tmp || ", ",
			expr,
			"); if *" || tmp || ">0 then " || tmp || "}")
end

#
# AppendListCompTemps(localdecls, methbody) - at the procedure/method
# outermost level, we may need to add some declarations based on whats
# in the methbody. If there are changes to the declared lcls section,
# returns changed locals.
#
procedure AppendListCompTemps(lcls, body)
	# if there is, in the methbody, a list of varnames to declare
	if *\(ltmps := ListCompTemps(body)) > 0 then {
		# make a varlist containing ltmps
		if *ltmps > 1 then {
			vl := token(IDENT, ltmps[1], 0, 0, "lambda.icn")
			every i := 2 to *ltmps do vl := node("varlist3", vl, ",",
					token(IDENT, ltmps[i], 0, 0, "lambda.icn"))
		} else {
			# the varlist will just be an IDENT
			vl := token(IDENT, ltmps[1], 0, 0, "lambda.icn")
		}
		if (lcls === EmptyNode) |
				(type(lcls)==="treenode" & lcls.label==("locals2"|"locals3")) then {
			return node("locals2", lcls, "local", vl, ";")
		} else
			write(&errout, "don't know what to do with ", image(lcls))
	}
end

#
# ListCompTemps(n) - lower level temp. var extraction from proc body.
# returns list of strings containing temp. variables from list comprehension
# L
procedure ListCompTemps(n)
	local LCT
	if type(n) == "treenode" then {
		if n.label=="ListComp" then {
			LCT := [n.children[2]]
			LCT |||:= ListCompTemps(n.children[4])
			return LCT
		} else if LCT := ListCompTemps(n.children[k := 1 to *(n.children)]) then {
			every kk := k+1 to *(n.children) do {
				LCT |||:= ListCompTemps(n.children[kk])
			}
			return LCT
		}
	}
end

procedure tablelit(lb, cl, rb)
local tabid, lp, rp, args
	args := node("elst1")
	write("I am a tablelit, cl is ", image(cl.label))
	while type(cl)=="treenode" & cl.label == "Caselist" do {
		buildtab_from_cclause(cl.children[3], args)
		cl := cl.children[1]
	}
	buildtab_from_cclause(cl, args)
	tabid := copy(lb); tabid.tok := IDENT; tabid.s := "table"
	lp := copy(lb); lp.tok := LPAREN; lp.s := "("
	rp := copy(rb); rp.tok := RPAREN; rp.s := ")"
	return node("invoke", tabid, lp, args, rp)
end
#line 1844 "scoelgram.icn"
$define YYACCEPT return 0
$define YYABORT return 1
################################################################
# procedure: yyparse : parse input and execute indicated items
################################################################
procedure yyparse()
  local yyn        # next next thing to do
  local yym        #
  local yystate    # current parsing state from state table
  local yys        # current token string
  local doaction   # set to 1 if there need to execute action
  local token      # current token

  if /yytable then init() 
  init_stacks() 
  yynerrs   := 0 
  yyerrflag := 0 
  yychar    := -1           # impossible char forces a read
  yystate   := 0            # initial state
  push(statestk, yystate)   # save it

  repeat { # until parsing is done, either correctly, or w/error
    doaction := 1 

    ##### NEXT ACTION (from reduction table)
	yyn := yydefred[yystate+1]

    while yyn = 0 do {

      if yychar < 0 then {   # we want a char?
        yychar := yylex()    # get next token
        ##### ERROR CHECK ####
        if yychar < 0 then { # it it didn't work/error
          yychar := 0        # change it to default string (no -1!)
          if \yydebug = 1 then yylexdebug(yystate, yychar) 
          }
        } # yychar < 0
	  
      yyn := yysindex[yystate+1]  # get amount to shift by (shift index)

      if (yyn ~= 0)           & ((yyn +:= yychar) >= 0) & 
         (yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yychar) then {
		
        ##### NEXT STATE ####
        yystate := yytable[yyn+1] # we are in a new state
        push(statestk, yystate)   # save it
        push(valstk, yylval)      # push our lval as the input for next rule
        yychar := -1              # since we have 'eaten' a token, say we need another
        if yyerrflag > 0 then     # have we recovered an error?
           yyerrflag -:= 1        # give ourselves credit
        doaction := 0             # but don't process yet
        break                     # quit the yyn=0 loop
        }

    yyn := yyrindex[yystate+1]    # reduce

    if (yyn ~= 0)           & ((yyn +:= yychar) >= 0) &
       (yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yychar) then {
      # e reduced!
      yyn      := yytable[yyn+1] 
      doaction := 1  # get ready to execute
      break          # drop down to actions
      }
    else { #ERROR RECOVERY
      if yyerrflag == 0 then {
        (\yyerror | write)("syntax error") 
        yynerrs +:= 1 
      }
      if yyerrflag < 3 then {     # low error count?
        yyerrflag := 3 
        repeat { #do until break
          if *statestk < 1 then {  # check for under & overflow here
            (\yyerror | write)("stack underflow. aborting...")   # note lower case 's'
            return 1 
          }
          yyn := yysindex[statestk[1]] 
          if ((yyn ~= 0) & (yyn +:= YYERRCODE) >= 0 &
                    yyn <= YYTABLESIZE & yycheck[yyn+1] == YYERRCODE) then {
            yystate := yytable[yyn+1] 
            push(statestk, yystate) 
            push(valstk, yylval) 
            doaction := 0 
            break 
          }
          else {
            if *statestk = 0 then { # check for under & overflow here
              write("Stack underflow. aborting...") # capital 'S'
              return 1 
            }
            pop(statestk) 
            pop(valstk) 
            }
          }
        }
      else  # discard this token
        {
        if yychar = 0 then return 1  # yyabort
        if \yydebug = 1 then {
          yys := &null 
          if yychar <= YYMAXTOKEN then yys := yyname[yychar+1] 
          if integer(yys) & yys = 0 then yys := "illegal-symbol" 
          write("state ",  yystate, ", error recovery discards token ",
                yychar, " (", yys, ")") 
          }
        yychar := -1       # read another
        }
      } # end error recovery
      yyn := yydefred[yystate+1] 
    }# yyn = 0 loop

    if doaction = 0 then   # any reason not to proceed?
      next                 # skip action

    yym := yylen[yyn+1]    # get count of terminals on rhs
    yyval := valstk[yym]   # get current semantic value
    if arv := action[yyn]() then return arv # execute the semantic action

    ##### Now let's reduce... ####
    every 1 to yym do pop(statestk)# we just reduced yylen states
    yystate := statestk[1]        # get new state

    every 1 to yym do pop(valstk) # corresponding value drop
    yym := yylhs[yyn+1]           # select next TERMINAL(on lhs)
    if yystate = 0 & yym = 0 then {
                                  # done? 'rest' state and at first TERMINAL
      yystate := YYFINAL          # explicitly say we're done
      push(statestk, YYFINAL)     # and save it
      push(valstk, yyval)         # also save the semantic value of parsing
      if yychar < 0 then {        # we want another character?
        yychar := yylex()         # get next character
        if yychar < 0 then yychar := 0   #clean, if necessary
      }
      if yychar = 0 then break    # Good exit (if lex returns 0  -)
                                  # quit the loop--all DONE
    } # if yystate
    else {                        #else not done yet
      # get next state and push, for next yydefred[]
      yyn := yygindex[yym+1]        # find out where to go
      if (yyn ~= 0)           & ((yyn +:= yystate) >= 0) &
         (yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yystate) then {
        yystate := yytable[yyn+1]   # get new state
        }
      else {
        yystate := yydgoto[yym+1]   # else go to new defred
	     }
      push(statestk, yystate)       # going again, so push state & val...
      push(valstk, yyval)           # for next action
      }
    } # main loop

  return 0 # yyaccept!!
end

### end of procedure parse() ######################################

### start semantic actions ########################################

procedure action_null()
  #write("null action")
end

procedure action_1()
#line 283 "scoelgram.y"
	
		children := [valstk[2]]
		yyval := program_node(children)
	
end

procedure action_2()
#line 289 "scoelgram.y"
 
		yyval := EmptyNode 
	
end

procedure action_3()
#line 292 "scoelgram.y"

	   #if yynerrs = 0 then iwrites(&errout,".");
	   children := [valstk[3], valstk[2]]
	   yyval := decls_node(children)
	
end

procedure action_4()
#line 299 "scoelgram.y"
	
		children := [valstk[1]]
		yyval := decl_node(children)
	
end

procedure action_5()
#line 303 "scoelgram.y"
	
		children := [valstk[1]]
		yyval := decl_node(children)
	
end

procedure action_6()
#line 307 "scoelgram.y"
	
		children := [valstk[1]]
		yyval := decl_node(children)
	
end

procedure action_7()
#line 311 "scoelgram.y"
	
		children := [valstk[1]]
		yyval := decl_node(children)
	
end

procedure action_8()
#line 315 "scoelgram.y"
	
		children := [valstk[1]]
		yyval := decl_node(children)
	
end

procedure action_9()
#line 319 "scoelgram.y"
 
		children := [valstk[1]]
		yyval := methods_node(children) 
	
end

procedure action_10()
#line 325 "scoelgram.y"
 
		yyval := EmptyNode
	
end

procedure action_11()
#line 328 "scoelgram.y"
 
		children := [valstk[4],valstk[3],valstk[2],";"]
		yyval := varDecl_node(2, children)
	
end

procedure action_12()
#line 334 "scoelgram.y"
 
		children := [valstk[3],valstk[2]]
		yyval := global_node(children) 
	
end

procedure action_13()
#line 338 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := const_node(children) 
	
end

procedure action_14()
#line 342 "scoelgram.y"
 
		children := [valstk[3],valstk[2]]
		yyval := private_node(children) 
	
end

procedure action_15()
#line 346 "scoelgram.y"
 
		children := [valstk[2], valstk[1]]
		yyval := public_node(children[1].string, children)
	
end

procedure action_16()
#line 350 "scoelgram.y"
 
		children := [valstk[2], valstk[1]]
		yyval := read_node(children[1].string, children)
	
end

procedure action_17()
#line 356 "scoelgram.y"

	yyval := EmptyNode
	
end

procedure action_18()
#line 359 "scoelgram.y"
 
		children := [valstk[1]]
		yyval := static_node(children[1].string, children)
	
end

procedure action_19()
#line 364 "scoelgram.y"
 
		yyval := EmptyNode 
	
end

procedure action_20()
#line 367 "scoelgram.y"

		children := [valstk[3], valstk[2], valstk[1]]
		yyval := constructor_node(2, children)
	
end

procedure action_21()
#line 371 "scoelgram.y"

		children := [valstk[6], valstk[5], valstk[4], valstk[3], valstk[2], valstk[1]]
		yyval := constructor_node(4, children)
	
end

procedure action_22()
#line 377 "scoelgram.y"

		children := [valstk[5], valstk[4], valstk[3], valstk[2], valstk[1]]
		yyval := class_node(children)
	
end

procedure action_23()
#line 383 "scoelgram.y"

		children := [valstk[7],valstk[6],valstk[5], valstk[4], "(",valstk[2],")"]
		yyval := classhead_node(children)
	
end

procedure action_24()
#line 387 "scoelgram.y"

		children := [valstk[4],valstk[3],valstk[2], valstk[1]]
		yyval := classhead_node(children)
	
end

procedure action_25()
#line 393 "scoelgram.y"
 
		yyval := EmptyNode 
	
end

procedure action_26()
#line 396 "scoelgram.y"
 
		children := [":", valstk[2], valstk[1]]
		yyval := supers_node(children) 
	
end

procedure action_27()
#line 400 "scoelgram.y"
 
		children := [":", valstk[2], valstk[1]]
		yyval := supers_node(children) 
	
end

procedure action_28()
#line 406 "scoelgram.y"
 
		children := [valstk[3],"::",valstk[1]]
		yyval := packageref_node(children) 
	
end

procedure action_29()
#line 410 "scoelgram.y"
 
		children := ["::",valstk[1]]
		yyval := packageref_node(children) 
	
end

procedure action_30()
#line 416 "scoelgram.y"
 
		yyval := EmptyNode 
	
end

procedure action_31()
#line 419 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := methods_node(children) 
	
end

procedure action_32()
#line 423 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := methods_node(children) 
	
end

procedure action_33()
#line 427 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := methods_node(children) 
	
end

procedure action_34()
#line 431 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := methods_node(children) 
	
end

procedure action_35()
#line 437 "scoelgram.y"

		yyval := semiOptional_node()
	
end

procedure action_36()
#line 440 "scoelgram.y"

		yyval := semiOptional_node()
	
end

procedure action_37()
#line 445 "scoelgram.y"

		children := [valstk[2],valstk[1]]
		yyval := import_node(children)
	
end

procedure action_38()
#line 451 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := link_node(children)
	
end

procedure action_39()
#line 457 "scoelgram.y"

		children := [valstk[1]]
		yyval := linklist_node(children)
	
end

procedure action_40()
#line 461 "scoelgram.y"
 
		children := [valstk[3],",",valstk[1]]
		yyval := linklist_node(children)
	
end

procedure action_41()
#line 467 "scoelgram.y"

		children := [valstk[1]]
		yyval := lnkfile_node(children)
	
end

procedure action_42()
#line 471 "scoelgram.y"

		children := [valstk[1]]
		yyval := lnkfile_node(children)
	
end

procedure action_43()
#line 477 "scoelgram.y"

		children := [valstk[1]]
		yyval := constlist_node(children)
	
end

procedure action_44()
#line 481 "scoelgram.y"

		children := [valstk[3], ",", valstk[1]]
		yyval := constlist_node(children)
	
end

procedure action_45()
#line 487 "scoelgram.y"

		children := [valstk[3], valstk[2], valstk[1]]
		yyval := constdef_node(children)
	
end

procedure action_46()
#line 493 "scoelgram.y"

		children := [valstk[6],valstk[5],valstk[4],valstk[3],valstk[2]]
		yyval := record_node(children)
	
end

procedure action_47()
#line 499 "scoelgram.y"
 
		yyval := EmptyNode 
	
end

procedure action_48()
#line 502 "scoelgram.y"

		children := [valstk[1]]
		yyval := store_node(children)
	
end

procedure action_49()
#line 508 "scoelgram.y"

		children := [valstk[3],":-",valstk[1]]
		yyval := queryDef_node(children)
	
end

procedure action_50()
#line 512 "scoelgram.y"
 
		children := [valstk[6],":-",valstk[4], "(", valstk[2], ")"]
		yyval := fact_node(children)
	
end

procedure action_51()
#line 516 "scoelgram.y"

		children := [valstk[5], valstk[4]]
		yyval := functionDef_node(children)
	
end

procedure action_52()
#line 520 "scoelgram.y"

		children := [valstk[4], ":-", "{", valstk[1], "}"]
		yyval := patternDef_node(children)
	
end

procedure action_53()
#line 526 "scoelgram.y"

		children := ["(", valstk[5], ")", ";", "{", valstk[1], "}"]
		yyval := query_node(children)
	
end

procedure action_54()
#line 530 "scoelgram.y"

		children := ["(", valstk[6], ")", ";", valstk[3], "(", valstk[1], ")"]
		yyval := query_node(children)
	
end

procedure action_55()
#line 536 "scoelgram.y"

		yyval := EmptyNode
	
end

procedure action_57()
#line 539 "scoelgram.y"

		children := [valstk[0], valstk[-1]]
		yyval := patternList_node(children)
	
end

procedure action_58()
#line 545 "scoelgram.y"
 
		yyval := EmptyNode 
	
end

procedure action_59()
#line 548 "scoelgram.y"

		children := [valstk[1]]
		yyval := fldlist_node(children)
	
end

procedure action_60()
#line 554 "scoelgram.y"

		children := [valstk[2],valstk[1]]
		yyval := method_node(children)
	
end

procedure action_61()
#line 558 "scoelgram.y"

		children := [valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := method_node(children)
	
end

procedure action_62()
#line 564 "scoelgram.y"

		children := [valstk[5],valstk[4],"(",valstk[2],")"]
		yyval := methhead_node(children)
	
end

procedure action_63()
#line 570 "scoelgram.y"
 
		yyval := EmptyNode 
	
end

procedure action_64()
#line 573 "scoelgram.y"
 
		children := [valstk[1]]
		yyval := arglist_node(children) 
	
end

procedure action_65()
#line 577 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := arglist_node(children) 
	
end

procedure action_66()
#line 583 "scoelgram.y"

		children := [valstk[1]]
		yyval := idlist_node(children)
	
end

procedure action_67()
#line 587 "scoelgram.y"
 
		children := [valstk[3],",",valstk[1]]
		yyval := idlist_node(children) 
	
end

procedure action_68()
#line 593 "scoelgram.y"

		children := [valstk[1]]
		yyval := parmlist_node(children) 
	
end

procedure action_69()
#line 597 "scoelgram.y"
 
		children := [valstk[3],",",valstk[1]]
		yyval := parmlist_node(children) 
	
end

procedure action_70()
#line 603 "scoelgram.y"

		children := [valstk[1]]
		yyval := arg_node(1, children)
	
end

procedure action_71()
#line 607 "scoelgram.y"
 
		children := [valstk[3], ":", valstk[1]]
		yyval := arg_node(2, children) 
	
end

procedure action_72()
#line 611 "scoelgram.y"
 
		children := [valstk[3], ":", valstk[1]]
		yyval := arg_node(3, children) 
	
end

procedure action_73()
#line 615 "scoelgram.y"
 
		children := [valstk[5], ":", valstk[3], ":", valstk[1]]
		yyval := arg_node(4, children) 
	
end

procedure action_74()
#line 621 "scoelgram.y"
 
		yyval := EmptyNode 
	
end

procedure action_75()
#line 624 "scoelgram.y"
 
		children := [valstk[3],";",valstk[1]]
		yyval := methbody_node(children)
	
end

procedure action_76()
#line 630 "scoelgram.y"
 
		yyval := EmptyNode 
	
end

procedure action_77()
#line 633 "scoelgram.y"

		children := [valstk[1]]
		yyval := expr_node(children)
	
end

procedure action_79()
#line 640 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := and_node(children) 
	
end

procedure action_81()
#line 647 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := assign_node(children)
	
end

procedure action_82()
#line 651 "scoelgram.y"

		children := [valstk[1]]
		yyval := invocAssign_node(children)
	
end

procedure action_83()
#line 655 "scoelgram.y"

		children := [valstk[3],valstk[2],valstk[1]]
		yyval := condAssign_node(children)
	
end

procedure action_84()
#line 659 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bdiffa_node(children)
	
end

procedure action_85()
#line 663 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Buniona_node(children)
	
end

procedure action_86()
#line 667 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bplusa_node(children)
	
end

procedure action_87()
#line 671 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bminusa_node(children)
	
end

procedure action_88()
#line 675 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bstara_node(children)
	
end

procedure action_89()
#line 679 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bintera_node(children)
	
end

procedure action_90()
#line 683 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bslasha_node(children)
	
end

procedure action_91()
#line 687 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bmoda_node(children)
	
end

procedure action_92()
#line 691 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bcareta_node(children)
	
end

procedure action_93()
#line 695 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Baugge_node(children)
	
end

procedure action_94()
#line 699 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bauggt_node(children)
	
end

procedure action_95()
#line 703 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Baugle_node(children)
	
end

procedure action_96()
#line 707 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bauglt_node(children)
	
end

procedure action_97()
#line 711 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Baugne_node(children)
	
end

procedure action_98()
#line 715 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Baugques_node(children)
	
end

procedure action_99()
#line 719 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Baugamper_node(children)
	
end

procedure action_101()
#line 726 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := to_node("to", children)
	
end

procedure action_102()
#line 730 "scoelgram.y"
 
		children := [valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := toby_node(children)
	
end

procedure action_104()
#line 737 "scoelgram.y"

		children := [valstk[3],valstk[2],valstk[1]]
		yyval := bar_node(children)
	
end

procedure action_106()
#line 744 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Beq_node(children)
	
end

procedure action_107()
#line 748 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bge_node(children)
	
end

procedure action_108()
#line 752 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bgt_node(children)
	
end

procedure action_109()
#line 756 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Ble_node(children)
	
end

procedure action_110()
#line 760 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Blt_node(children)
	
end

procedure action_111()
#line 764 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bne_node(children)
	
end

procedure action_113()
#line 771 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bplus_node(children)
	
end

procedure action_114()
#line 775 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bdiff_node(children)
	
end

procedure action_115()
#line 779 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bunion_node(children)
	
end

procedure action_116()
#line 783 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bminus_node(children)
	
end

procedure action_118()
#line 790 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bstar_node(children)
	
end

procedure action_119()
#line 794 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Binter_node(children)
	
end

procedure action_120()
#line 798 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bslash_node(children)
	
end

procedure action_121()
#line 802 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bmod_node(children)
	
end

procedure action_123()
#line 809 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bcaret_node(children)
	
end

procedure action_125()
#line 816 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := limit_node(children)
	
end

procedure action_126()
#line 820 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := apply_node(children)
	
end

procedure action_128()
#line 827 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := uat_node(children)
	
end

procedure action_129()
#line 831 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := ubar_node(children)
	
end

procedure action_130()
#line 835 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := udot_node(children)
	
end

procedure action_131()
#line 839 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := ubang_node(children)
	
end

procedure action_132()
#line 843 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := udiff_node(children)
	
end

procedure action_133()
#line 847 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := uplus_node(children)
	
end

procedure action_134()
#line 851 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := ustar_node(children)
	
end

procedure action_135()
#line 855 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := uslash_node(children)
	
end

procedure action_136()
#line 859 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := ucaret_node(children)
	
end

procedure action_137()
#line 863 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := uinter_node(children)
	
end

procedure action_138()
#line 867 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := utilde_node(children)
	
end

procedure action_139()
#line 871 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := uminus_node(children)
	
end

procedure action_140()
#line 875 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := unumne_node(children)
	
end

procedure action_141()
#line 879 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := uunion_node(children)
	
end

procedure action_142()
#line 883 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := uqmark_node(children)
	
end

procedure action_143()
#line 887 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := ubackslash_node(children)
	
end

procedure action_145()
#line 894 "scoelgram.y"

		children := [valstk[1]]
		yyval := section_node(children)
	
end

procedure action_146()
#line 898 "scoelgram.y"

		children := [valstk[1]]
		yyval := return_node(children)
	
end

procedure action_147()
#line 902 "scoelgram.y"

		children := [valstk[1]]
		yyval := if_node(children)
	
end

procedure action_148()
#line 906 "scoelgram.y"

		children := [valstk[1]]
		yyval := case_node(children)
	
end

procedure action_149()
#line 910 "scoelgram.y"

		children := [valstk[1]]
		yyval := while_node(children)
	
end

procedure action_150()
#line 914 "scoelgram.y"

		children := [valstk[1]]
		yyval := until_node(children)
	
end

procedure action_151()
#line 918 "scoelgram.y"

		children := [valstk[1]]
		yyval := every_node(children)
	
end

procedure action_152()
#line 922 "scoelgram.y"

		children := [valstk[1]]
		yyval := repeat_node(children)
	
end

procedure action_153()
#line 926 "scoelgram.y"

		children := [valstk[1]]
		yyval := ident_node(children)
	
end

procedure action_154()
#line 930 "scoelgram.y"
 
		children := [valstk[1]]
		yyval := next_node(children)
	
end

procedure action_155()
#line 934 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := Break_node(children)
	
end

procedure action_156()
#line 938 "scoelgram.y"
 
		children := [valstk[3], valstk[2], valstk[1]]
		yyval := Paren_node(children)
	
end

procedure action_157()
#line 942 "scoelgram.y"
 
		children := [valstk[3], valstk[2], valstk[1]]
		yyval := Brace_node(children)
	
end

procedure action_158()
#line 946 "scoelgram.y"
 
		children := [valstk[3], valstk[2], valstk[1]]
		yyval := Brack_node(children)
	
end

procedure action_159()
#line 950 "scoelgram.y"
 
		children := [valstk[4], valstk[3], valstk[2], valstk[1]]
		yyval := Subscript_node(children)
	
end

procedure action_160()
#line 954 "scoelgram.y"
 
		children := [valstk[3], valstk[2], valstk[1]]
		yyval := Pdco_node(0, children)
	
end

procedure action_161()
#line 958 "scoelgram.y"
 
		children := [valstk[4], valstk[3], valstk[2], valstk[1]]
		yyval := Pdco_node(1, children)
	
end

procedure action_162()
#line 962 "scoelgram.y"
 
		children := [valstk[4], "(", valstk[2], ")"]
		yyval := invoke_node(children)
	
end

procedure action_163()
#line 966 "scoelgram.y"

		children := [valstk[5],":", "(", valstk[2], ")"]
		yyval := invocationnode(children)
	
end

procedure action_164()
#line 970 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := field_node(children)
	
end

procedure action_165()
#line 974 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := field_node(children)
	
end

procedure action_166()
#line 978 "scoelgram.y"

		children := [valstk[1]]
		yyval := packageref_node(children)
	
end

procedure action_167()
#line 982 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := field_node(children)
	
end

procedure action_168()
#line 986 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := keyword_node(children)
	
end

procedure action_169()
#line 990 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := keyword_node(children)
	
end

procedure action_170()
#line 996 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := While_node(0, children)
	
end

procedure action_171()
#line 1000 "scoelgram.y"
 
		children := [valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := While_node(1, children)
	
end

procedure action_172()
#line 1006 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := Until_node(0, children)
	
end

procedure action_173()
#line 1010 "scoelgram.y"
 
		children := [valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := Until_node(1, children)
	
end

procedure action_174()
#line 1016 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := Every_node(0, children)
	
end

procedure action_175()
#line 1020 "scoelgram.y"
 
		children := [valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := Every_node(1, children)
	
end

procedure action_176()
#line 1026 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := Repeat_node(0, children)
	
end

procedure action_178()
#line 1033 "scoelgram.y"
 
		children := [valstk[2], valstk[1]]
		yyval := Return_node(0, children)
	
end

procedure action_179()
#line 1037 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := Suspend_node(0, children)
	
end

procedure action_180()
#line 1041 "scoelgram.y"
 
		children := [valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := Suspend_node(1, children)
	
end

procedure action_181()
#line 1047 "scoelgram.y"
 
		children := [valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := If_node(0, children)
	
end

procedure action_182()
#line 1051 "scoelgram.y"
 
		children := [valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := If_node(1, children)
	
end

procedure action_183()
#line 1057 "scoelgram.y"
 
		children := [valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := Case_node(0, children)
	
end

procedure action_185()
#line 1064 "scoelgram.y"
 
		children := [valstk[3],";",valstk[1]]
		yyval := caselist_node(children)
	
end

procedure action_186()
#line 1070 "scoelgram.y"
 
		children := [valstk[3],":",valstk[1]]
		yyval := cclause_node(0, children)
	
end

procedure action_187()
#line 1074 "scoelgram.y"
 
		children := [valstk[3],":",valstk[1]]
		yyval := cclause_node(0, children)
	
end

procedure action_188()
#line 1080 "scoelgram.y"

		children := [valstk[1]]
		yyval := exprlist_node(children)
	
end

procedure action_189()
#line 1084 "scoelgram.y"

		children := [valstk[3],",",valstk[1]]
		yyval := exprlist_node(children)
	
end

procedure action_190()
#line 1090 "scoelgram.y"
 
		children := [valstk[1]]
		yyval := pdcolist_node(0, children) 
	
end

procedure action_191()
#line 1094 "scoelgram.y"
 
		children := [valstk[3],",",valstk[1]]
		yyval := pdcolist_node(1, children)
	
end

procedure action_192()
#line 1100 "scoelgram.y"

		children := [valstk[1]]
		yyval := intlit_node(children)
	
end

procedure action_193()
#line 1104 "scoelgram.y"

		children := [valstk[1]]
		yyval := reallit_node(children)
	
end

procedure action_194()
#line 1108 "scoelgram.y"

		children := [valstk[1]]
		yyval := stringlit_node(children)
	
end

procedure action_195()
#line 1112 "scoelgram.y"

		children := [valstk[1]]
		yyval := csetlit_node(children)
	
end

procedure action_196()
#line 1118 "scoelgram.y"
 
		children := [valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := section_node(children)
	
end

procedure action_197()
#line 1124 "scoelgram.y"

		children := [valstk[1]]
		yyval := colon_node(children)
	
end

procedure action_198()
#line 1128 "scoelgram.y"

		children := [valstk[1]]
		yyval := pcolon_node(children)
	
end

procedure action_199()
#line 1132 "scoelgram.y"

		children := [valstk[1]]
		yyval := mcolon_node(children)
	
end

procedure action_200()
#line 1138 "scoelgram.y"

		children := [valstk[1]]
		yyval := compound_node(children)
	
end

procedure action_201()
#line 1142 "scoelgram.y"
 
		children := [valstk[3],";",valstk[1]]
		yyval := compound_node(children)
	
end

procedure action_202()
#line 1148 "scoelgram.y"

		children := [valstk[3]]
		yyval := program_node(children)
	
end

procedure action_203()
#line 1154 "scoelgram.y"
 
		yyval := error_node(); 
	
end

#line 3504 "scoelgram.icn"
