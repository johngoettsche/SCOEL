#
# failedsubscript.icn
# Ziad Al-Sharif
# June 1, 2008 
#

$include "evdefs.icn"

#
# This class handles the failed subscript
#
$ifndef StandAlone
class FailedSubscript : Listener(
$else
class FailedSubscript (
$endif

   eventMask,      # Cset of the monitored events
   
   failedSubNames, # Table maps each failed list Serial into its used aliases
   failedSubCount, # Table maps each failed list Serial into its num of fails
   failedSubInfo,  # Table maps each failed list Serial into a list of locations
   
   FailedSubscriptInfo # A list with the Failed information 
   )

#
# Suspicious [] subscript fail
# The monitored events are E_Deref, E_Lref, E_Lsub, and E_Ofail
#
method handle_Events()
   static lname, lref, index, Serial
   local i, fname, line, info

   # keep track of the list actual name
   if &eventcode == E_Deref then{
      lname := &eventvalue
      }
   # keep track of the last referenced list
   if &eventcode == E_Lref then{
      lref := &eventvalue
      Serial := serial(&eventvalue)
      }
   # keep track of the index of the last referenced list
   else if &eventcode == E_Lsub then{
      index := &eventvalue
      } 
   # Suspicious [] subscript fail
   else if &eventcode  == E_Ofail & find("[]",image(&eventvalue)) then{
      failedSubNames[Serial] ||:= lname ||", " 
      failedSubCount[Serial] +:= 1

      fname := keyword("file", Monitored)
      line  := keyword("line", Monitored)
      if i := find("-", lname) then lname := lname[1:i] 
      else                          lname := lname[1:-1] 
      #info  := fname||"("||line||") "||lname||"["||index||
      /failedSubInfo[Serial] := [] 
      push(failedSubInfo[Serial], 
           fname||"("||line||"): "||lname||"["||index||"], index off by "||
           abs(*lref-index)
           ) 
      }
end

#
# Updates the Failed Subscript info,
# It receives the param j which is the most elapsed j loops 
#
method update_Info(j)
   local i:=1, Serial

   if \failedSubCount & *failedSubCount > 0 then{
      if /j then j := *failedSubCount + 1
      else  j >=:= *failedSubCount + 1
  
      FailedSubscriptInfo := reverse(sort(failedSubCount,2))[1:j]
      # 1-"Used Names"    | 
      # 2-"Serial"        |
      # 3-"Num of Fail"   |
      # 4-"Last Fail Info"|  
      while i <= j  & \FailedSubscriptInfo do{
          Serial := FailedSubscriptInfo[i][1]
          push(FailedSubscriptInfo[i],failedSubNames[Serial])
          put(FailedSubscriptInfo[i],failedSubInfo[Serial][1])
          i +:= 1
          }
      } 
end

#
# Prints out the most failed sunscripts info
# It is to be used in a console based application such as UDB
#
method write_Info( num )
   local i:=1

   update_Info(num)
   /num := *FailedSubscriptInfo

   write("\n-------------------------------------------------------------")
   write("\n---- Subscript's info [The Most (",num,") Subscripts] ----")
   write(left("Used Names",15), " : ",
         left("Serial",6),      " : ",        
         left("#Fail",5),       " : ",
         left("Last Fail Info",40)
         )
   while i <= num &  \FailedSubscriptInfo do{
      write(left(FailedSubscriptInfo[i][1],15)," : ",
            left(FailedSubscriptInfo[i][2],6), " : ",
            left(FailedSubscriptInfo[i][3],5), " : ",
            left(FailedSubscriptInfo[i][4],40)
            )
      i +:= 1
      }
end

#
# Initialize the class attributes
#
initially(name, state)

$ifndef StandAlone
   self.Listener.initially(name, state)
$endif

   eventMask      := cset(E_Exit || E_Error) ++ 
                     cset(E_Deref || E_Lref || E_Lsub || E_Ofail)

   failedSubNames := table("")
   failedSubCount := table(0)
   failedSubInfo  := table()

   FailedSubscriptInfo := []
end

#
# StandAlone is defined when this tool is used as a stand-alone monitor.
#  Otherwise, this tool can be statically linked into the main utop/udb
#  source code 
#
$ifdef StandAlone

link evinit

#
# This main procedure is only used in the standalone mode
# or udb's external co-expression mode
# 
procedure main(arg)
   local obj
   
   EvInit(arg) | stop(" **** can not initialize Monitor !!!")
   obj := FailedSubscript()

   while EvGet(obj.eventMask) do{
      if &eventcode == (E_Exit | E_Error) then
         obj.write_Info()
      else
         obj.handle_Events() 
      }
   #obj.write_Info()
   handle_Events() #fake call
end

#
# This handle_Events procedure is only used udb's external 
# inter-program procedure calls
#
procedure handle_Events(code, value)
   static obj
   
   initial{
      #EvInit(arg) | stop(" **** can not initialize Monitor !!!")
      obj := FailedSubscript()
      return obj.eventMask
      } 

   &eventcode  := code
   &eventvalue := value

   if &eventcode == (E_Exit | E_Error) then
      obj.write_Info()
   else
      obj.handle_Events() 
end

$endif
