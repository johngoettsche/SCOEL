#
# $Id: getweb.icn,v 1.3 2006-09-14 18:31:58 rparlett Exp $
#

import gui
import util
import http
import ipc
import net
import lang

$include "guih.icn"

#
# This demo was supposed to show how you could do something
# in a forked process (eg get some web page data),  and update
# the gui as it produced data, which it sent to the parent
# process via an ipc message queue.
# But it doesn't really work at the moment because the X event
# thread gets confused with two processes....
#
# To try and run it :-
# LD_LIBRARY_PATH=$LD_LIBRARY_PATH:../../native  ./getweb
#


class HttpProcess : Process(mq, url)
   method event(r)
      mq.send("Event:"||r.type)
   end

   method run()
      local hc, hr, res, s
      hc := HttpClient()
      hr := HttpRequest()
      hr.set_url(url)
      hc.connect(self, "event")
      if res := hc.retrieve(hr) then {
         res.data ? {
            repeat {
               s := tab(upto('\n') | 0)
               mq.send("Data:"||s)
               if pos(0) then
                  break
               move(1)
            }
         }
      }
      mq.send("Done")
   end

   initially

end

class GetWeb : Dialog(text_list_1, text_button_1, text_button_2, text_button_3, text_field_1, bp, data, mq)
   method handle_start(ev)
      local url

      url := URL()
      url.parse(text_field_1.get_contents())
      if url.get_protocol() ~== "http" then
         stop("only supports http")

      data := []
      text_list_1.set_contents(data)
      mq := ipc::create_private_msg()
      bp := HttpProcess(mq, url)
      bp.start()
      set_ticker(1000)
   end

   method handle_stop(ev)
      if \bp then {
         bp.stop()
         write("joining")
         bp.join()
         write("removeing")
         mq.remove()
         bp := &null
         mq := &null
         stop_ticker()
      }
   end

   method tick()
      local r, s
      while r := mq.poll(0) do {
         put(data, r)
         if r == ("Event:Failed"|"Done") then {
            bp.join()
            bp := &null
            mq.remove()
            mq := &null
            stop_ticker()
            break
         }
      }
      text_list_1.set_contents(data)
   end

   method init_dialog(ev)
      text_field_1.set_contents("http://news.bbc.co.uk")
      data := []
   end

   method setup()
      local panel_1
      self.set_attribs("size=423,450", "resize=on")
      text_list_1 := TextDisplay()
      text_list_1.set_pos("50%", "25")
      text_list_1.set_size("100%-50", "248")
      text_list_1.set_align("c", "t")
      text_list_1.set_contents([""])
      self.add(text_list_1)
      panel_1 := Panel()
      panel_1.set_pos("50%", "373")
      panel_1.set_size("263", "50")
      panel_1.set_align("c", "t")
      text_button_1 := TextButton()
      text_button_1.connect(self, "dispose", ACTION_EVENT)
      text_button_1.set_pos("0", "50%")
      text_button_1.set_align("l", "c")
      text_button_1.set_internal_alignment("c")
      text_button_1.set_label("Close")
      panel_1.add(text_button_1)
      text_button_2 := TextButton()
      text_button_2.set_pos("50%", "50%")
      text_button_2.set_align("c", "c")
      text_button_2.set_internal_alignment("c")
      text_button_2.set_label("Start")
      text_button_2.connect(self, "handle_start", ACTION_EVENT)
      panel_1.add(text_button_2)
      text_button_3 := TextButton()
      text_button_3.set_pos("100%", "50%")
      text_button_3.set_align("r", "c")
      text_button_3.set_internal_alignment("c")
      text_button_3.set_label("Stop")
      text_button_3.connect(self, "handle_stop", ACTION_EVENT)
      panel_1.add(text_button_3)
      self.add(panel_1)
      text_field_1 := TextField()
      text_field_1.set_pos("50%", "316")
      text_field_1.set_size("263", )
      text_field_1.set_align("c", "t")
      text_field_1.set_draw_border()
      text_field_1.set_contents("")
      self.add(text_field_1)
   end

   method component_setup()
      self.setup()
   end

   initially
      self.Dialog.initially()
end

procedure main(a)
   local d

   d := GetWeb()
   d.show_modal()
end
