
#
# proctime.icn 
# Ziad Al-Sharif
# June 1, 2008
#

$include "evdefs.icn"

#
# This class handles the procedure calling time, 
# it associates all names fo called procedures with
# their acumulated elapsed time from all calls. 
#
$ifndef StandAlone
class ProcTime : Listener(
$else
class ProcTime (
$endif

   eventMask,        # The monitored events for this detection

   callMask,         # The monitored events for the calls + resumes
   retMask,          # The monitored events for the ret+rem+susp+fail

   procCallCount,    # Table maps each proc name into its number of calls 
   procLastCallTime, # Table maps each procedure name into its last call time
   procTime,         # Table maps each proc+call sequence into its elapsed time

   ProcTimeInfo      # A list of list with information about each procedure time
   )

#
# Counts the total time spent during the execution of procedures 
#
method handle_Events()
   local pname

   #== (E_Pcall | E_Presum)
   if member(callMask,&eventcode) then{
      pname := image(&eventvalue)
      pname := pname[find(" ", pname)+1: 0]
      procCallCount[pname] +:= 1
      procLastCallTime[pname] := keyword("time",Monitored)
      }
   # == (E_Pret | E_Pfail | E_Psusp | E_Prem) 
   else if member(retMask,&eventcode) then{
      pname := image(proc(Monitored,0))
      pname := pname[find(" ", pname)+1: 0]
      procTime[pname] +:= (procLastCallTime[pname] := 
                           keyword("time",Monitored) - procLastCallTime[pname])
      }
end

#
# updates the procedure time info,
# it receives the param j which is the most important j procedures 
#
method update_Info(j)
   local i:=1, pname

   if \procTime & *procTime > 0 then{
      if /j then j := *procTime + 1
      else  j >=:= *procTime + 1
  
      ProcTimeInfo := reverse(sort(procTime,2))[1:j]
      # 1-"Seq Num"      | # 2-"Procedure Name"    | # 3-"Total Time"
      # 4-"Num of Calls" | # 5-"Avg Time/Num-Call" | # 6-"Last Call Time"
      while i <= j  & \ProcTimeInfo do{
         pname := ProcTimeInfo[i][1]
         push(ProcTimeInfo[i],i)                     
         put(ProcTimeInfo[i],
             procCallCount[pname],
             ProcTimeInfo[i][3] / procCallCount[pname],
             procLastCallTime[pname]
             )
         i +:= 1
         }
      }
end

#
# Prints out the total time of a procedure call in ms 
# It is to be used in a console based application such as UDB
#
method write_Info( num )
   local i:=1

   update_Info(num)
   /num := *ProcTimeInfo

   write("\n-------------------------------------------------------------")
   write("\n---- Procedure's Time info [The Most (",num,") Procedures] ----")
   write(left("Num",3),             " | ",
         left("Procedure Name",20), " : ",
         left("Total Time",10),     " : ",
         left("# Calls",10),        " : ",
         left("Avg Time/Call",15),  " : ",
         left("Last Call/Resume Time",22)
         )
   while i <= num &  \ProcTimeInfo do{
      write(left(ProcTimeInfo[i][1],3), " | ",
            left(ProcTimeInfo[i][2],20)," : ",
            left(ProcTimeInfo[i][3],10)," : ",
            left(ProcTimeInfo[i][4],10)," : ",
            left(ProcTimeInfo[i][5],15)," : ",
            left(ProcTimeInfo[i][6],15)
            )
      i +:= 1
      }
end

#
# Initialize the Monitoring Stuff
#
initially(name, state)

$ifndef StandAlone
   self.Listener.initially(name, state)
$endif

   eventMask := cset(E_Exit || E_Error) ++ ProcMask
   callMask  := cset(E_Pcall || E_Presum)
   retMask   := cset(E_Pfail || E_Pret || E_Psusp || E_Prem)

   procCallCount     := table(0)
   procLastCallTime  := table(0)
   procTime          := table(0)

   ProcTimeInfo      := [ ]
end

#
# StandAlone is defined when this tool is used as a stand-alone monitor.
#  Otherwise, this tool can be statically linked into the main utop/udb
#  source code 
#
$ifdef StandAlone

link evinit

#
# This main procedure is only used in the standalone mode
# or udb's external co-expression mode
# 
procedure main(arg)
   local obj
   
   EvInit(arg) | stop(" **** can not initialize Monitor !!!")
   obj := ProcTime()   

   while EvGet(obj.eventMask) do{
      if &eventcode == (E_Exit | E_Error) then
         obj.write_Info(20)
      else
         obj.handle_Events()
      }
   handle_Events() #fake call
end

#
# This handle_Events procedure is only used udb's external 
# inter-program procedure calls
#
procedure handle_Events(code, value)
   static obj
   
   initial{
      #EvInit(arg) | stop(" **** can not initialize Monitor !!!")
      obj := ProcTime()   
      return obj.eventMask
      } 

   &eventcode  := code
   &eventvalue := value

   if &eventcode == (E_Exit | E_Error) then
      obj.write_Info(20)
   else
      obj.handle_Events()
end

$endif
