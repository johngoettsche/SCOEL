### This file created by IYACC 1.0
### Please send bug reports to raypereda@hotmail.com
#define YYPREFIX "yy"
#line 124 "scoelgram.y"

procedure Keyword(x1,x2)
	static 
		keywords
	
	local
		children
		
	initial {
		keywords := set(["allocated","clock","collections","column","current",
				"date","now","dateline","digits","e","error",
				"errornumber","errortext","errorvalue","errout","fail",
				"eventcode","eventsource","eventvalue","features",
				"file","host","input","lcase","letters","level",
				"line","main","null","output","phi","pi","pick","pos",
				"progname","random","regions","source","storage",
				"subject","time","trace","dump","ucase","version",
				"errno","window","col","row","x","y","interval",
				"control","shift","meta","lpress","mpress","rpress",
				"lrelease","mrelease","rrelease","ldrag","mdrag",
				"rdrag","resize","ascii","cset"])
	}

	# verify that x2 is a valid keyword
	if not member(keywords, x2.s) then
		yyerror("&" || x2.s ||" is not a valid keyword!")

	children := [x1, x2]
	return node("keyword", children)
end

global set_of_all_fields, dummyrecno
procedure Field(x1,x2,x3)
#	initial { set_of_all_fields := set(); dummyrecno := 1 }

#	if \iconc then {
#		if type(x3) == "token" then {
#			nsert(set_of_all_fields, x3.s)
#			write(&errout, "field ", image(x3.s))
#		}
#	}
#	children := [x1, x2, x3]
#	return node("field", children)
end

procedure Clone1stToken(n)
	case type(n) of {
		"token": return copy(n)
		"treenode": {
				return Clone1stToken(!n.children)
			}
	}
end

global outline, outcol, outfilename,package_level_syms,package_level_class_syms

procedure Progend(x1)
	# pe  istop set_package_level_syms
	local 
		pe
   
	if *\parsingErrors > 0 then {
		every pe := !parsingErrors do {
			write(&errout, pe.errorMessage)
		}
		istop(*\parsingErrors || " error" ||
				(if *\parsingErrors > 1 then "s" else ""))
	}

	if /x1 then istop("error: empty file")

	package_level_syms := set()
	package_level_class_syms := set()
	set_package_level_syms(x1)
	scopecheck_superclass_decs(x1)

	outline := 1
	outcol := 1
   #
   # export specifications for each class
   #
	native := set()
	every cl := classes.foreach_t() do {
		cl.WriteSpec()
		insert(native, cl)
	}
   #
   # import class specifications, transitively
   #
	repeat {
		added := 0
		every super := ((classes.foreach_t()).foreachsuper() | !imports) do {
			if /classes.lookup(super) then {
				added := 1
				readspec(super)
				cl := classes.lookup(super)
				if /cl then halt("can't inherit class '",super,"'")
				iwrite("  inherits ", super, " from ", cl.linkfile)
				writelink(cl.dir, cl.linkfile)
			}
		}
		if added = 0 then break
	}
  #
  # Compute the transitive closure of the superclass graph. Then
  # resolve inheritance for each class, and use it to apply scoping rules.
  #
	every (classes.foreach_t()).transitive_closure()
	every (classes.foreach_t()).resolve()

	scopecheck_bodies(x1)

	if \thePackage then {
		every thePackage.insertsym(!package_level_syms)
	}

	if \iconc then  {
		iconc_prep_parse_tree(&null, x1)
	}

  #
  # generate output
  #
#  iwrite("Generating code:")
	yyprint(x1)
	write(yyout)

   # generate invocable declarations for identifiers in unevaluated exprs
	if (*\list_of_invocables)>0 then {
		writes(yyout, "invocable ")
		every temp := list_of_invocables[i := 1 to *list_of_invocables] do {
			writes(yyout, image(temp))
			if i < *list_of_invocables then writes(yyout, ",")
		}
		write(yyout)
	}

	if \iconc & (type(set_of_all_fields) == "set") &
			(*set_of_all_fields > 0) then {
		arandomfield := !set_of_all_fields
		writes(yyout, "record __dummyrecord",dummyrecno,"(",arandomfield)
		delete(set_of_all_fields, arandomfield)
		every writes(yyout, ",", !set_of_all_fields)
		write(yyout, ")")
		dummyrecno +:= 1
		set_of_all_fields := set()
	}
end
# idlist
#line 154 "scoelgram.icn"
$define IDENT 257
$define INTLIT 258
$define REALLIT 259
$define STRINGLIT 260
$define CSETLIT 261
$define EOFX 262
$define ABSTRACT 263
$define BREAK 264
$define BY 265
$define CASE 266
$define CLASS 267
$define CRITICAL 268
$define DEFAULT 269
$define DO 270
$define ELSE 271
$define END 272
$define EVERY 273
$define FAIL 274
$define GLOBAL 275
$define IF 276
$define IMPORT 277
$define CONSTRUCTOR 278
$define LINK 279
$define PRIVATE 280
$define METHOD 281
$define NEXT 282
$define OF 283
$define PUBLIC 284
$define READ 285
$define RECORD 286
$define REPEAT 287
$define RETURN 288
$define STATIC 289
$define SUSPEND 290
$define THEN 291
$define THREAD 292
$define TO 293
$define UNTIL 294
$define WHILE 295
$define BANG 296
$define MOD 297
$define AUGMOD 298
$define AND 299
$define AUGAND 300
$define STAR 301
$define AUGSTAR 302
$define INTER 303
$define AUGINTER 304
$define PLUS 305
$define AUGPLUS 306
$define UNION 307
$define AUGUNION 308
$define MINUS 309
$define AUGMINUS 310
$define DIFF 311
$define AUGDIFF 312
$define DOT 313
$define SLASH 314
$define AUGSLASH 315
$define ASSIGN 316
$define INVASSIGN 317
$define LTH 318
$define AUGLTH 319
$define LTHE 320
$define AUGLTHE 321
$define EQ 322
$define GTH 323
$define AUGGTH 324
$define GTHE 325
$define AUGGTHE 326
$define QMARK 327
$define AUGQMARK 328
$define BACKSLASH 329
$define CARET 330
$define AUGCARET 331
$define BAR 332
$define TILDE 333
$define NE 334
$define AUGNE 335
$define LPAREN 336
$define RPAREN 337
$define PCOLON 338
$define COMMA 339
$define MCOLON 340
$define COLON 341
$define COLONCOLON 342
$define SEMICOL 343
$define LBRACK 344
$define RBRACK 345
$define LBRACE 346
$define RBRACE 347
$define DOLLAR 348
$define SND 349
$define SNDBK 350
$define RCV 351
$define RCVBK 352
$define CONST 353
$define TOPIC 354
$define FUNK 355
$define CONASSIGN 356
$define STORE 357
$define AT 358
$define CREATE 359
$define YYERRCODE 256
procedure init() 
  yylhs := [                                        -1,
    0,    1,    1,    2,    2,    2,    2,    2,    2,    2,
   11,   11,   11,    8,   15,   15,   18,   18,   18,   19,
   19,   16,   16,   16,   16,   16,   16,    3,    3,    7,
    6,   22,   22,   23,   23,    5,    5,    5,   25,   25,
   26,    4,   17,   17,   30,    9,    9,    9,   10,   29,
   29,   31,   28,   28,   21,   21,   33,   14,   14,   14,
   24,   24,   34,   34,   35,   35,   35,   35,   12,   12,
   36,   36,   36,   37,   37,   13,   13,   38,   38,   20,
   20,   39,   39,   39,   39,   39,   39,   39,   39,   39,
   39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
   39,   40,   40,   40,   41,   41,   42,   42,   42,   42,
   42,   42,   42,   43,   43,   43,   43,   43,   44,   44,
   44,   44,   44,   45,   45,   46,   46,   46,   47,   47,
   47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
   47,   47,   47,   47,   47,   48,   48,   48,   48,   48,
   48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
   48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
   48,   53,   53,   54,   54,   55,   55,   56,   50,   50,
   50,   50,   51,   51,   52,   59,   59,   60,   60,   32,
   32,   58,   58,   27,   27,   27,   27,   49,   61,   61,
   61,   57,   57,    0,   20,
  ]
  yylen := [                            2,
    2,    0,    3,    1,    1,    1,    1,    1,    1,    1,
    0,    3,    6,    5,    7,    4,    0,    3,    3,    3,
    2,    0,    2,    3,    2,    2,    2,    0,    1,    2,
    2,    1,    3,    1,    1,    2,    2,    2,    1,    3,
    3,    6,    0,    1,    0,    7,    2,    5,    5,    7,
    8,    6,    0,    1,    2,    4,    5,    0,    1,    3,
    1,    3,    1,    3,    1,    3,    3,    5,    0,    4,
    2,    2,    2,    0,    1,    0,    3,    0,    1,    1,
    3,    1,    3,    1,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    1,    3,    5,    1,    3,    1,    3,    3,    3,
    3,    3,    3,    1,    3,    3,    3,    3,    1,    3,
    3,    3,    3,    1,    3,    1,    3,    3,    1,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    2,    3,    3,    3,
    4,    3,    4,    4,    5,    3,    3,    1,    3,    2,
    2,    2,    4,    2,    4,    2,    4,    2,    1,    2,
    2,    4,    4,    6,    6,    1,    3,    3,    3,    1,
    3,    1,    3,    1,    1,    1,    1,    6,    1,    1,
    1,    1,    3,    3,    1,
  ]
  yydefred := [                         0,
    2,    0,    0,    0,    0,    1,    0,    0,    0,    0,
    0,   44,    0,    4,    5,    6,    7,    8,    9,   10,
   69,    0,  204,    0,    0,    0,   47,   61,    0,   34,
   35,    0,   32,    0,    0,    0,   39,    0,   29,    3,
    0,    0,    0,    0,    0,   45,  205,    0,  194,  195,
  196,  197,    0,    0,    0,  179,    0,  156,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   84,  168,    0,  146,    0,  190,
   80,    0,  102,    0,    0,    0,  119,    0,  126,    0,
  147,  148,  149,  150,  151,  152,  153,  154,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   69,    0,    0,    0,    0,
    0,    0,   63,    0,    0,    0,  157,    0,    0,    0,
    0,  180,    0,  181,    0,    0,    0,  133,  171,  170,
  136,  139,  135,  143,  141,  134,  132,  137,  144,  145,
  138,  131,  140,  142,    0,    0,    0,    0,    0,  130,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   62,   33,   41,
   40,   55,   75,   71,    0,   72,   73,   25,   26,   27,
    0,    0,    0,   23,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   48,    0,   20,    0,    0,    0,    0,
    0,    0,  158,  160,    0,  159,   81,   49,  191,    0,
   93,  101,   90,   91,   88,   87,   89,   86,   92,   83,
   98,   97,   96,   95,  100,   94,   99,   85,    0,    0,
    0,    0,    0,  106,    0,    0,    0,    0,    0,  123,
  120,  121,  122,  128,  127,  125,    0,  169,  167,    0,
    0,    0,    0,  162,  192,    0,    0,    0,   24,    0,
    0,   14,    0,    0,   70,    0,    0,    0,    0,    0,
   67,    0,   64,   60,    0,    0,    0,    0,    0,    0,
    0,  203,    0,  164,    0,  200,  201,  199,    0,  161,
    0,  163,    0,    0,    0,   12,   56,    0,   18,   19,
    0,   42,    0,    0,    0,    0,   46,    0,    0,    0,
  186,    0,  104,  165,    0,  193,    0,   57,   69,   77,
   15,   68,    0,    0,    0,    0,    0,  185,    0,  198,
    0,    0,   50,    0,    0,  187,   13,   51,
  ]
  yydgoto := [                          2,
    3,   13,   40,  119,   15,   16,   17,   18,   85,  121,
  233,  122,  313,  131,   21,  123,  124,  238,   86,   87,
  125,   32,   33,  216,   36,   37,   88,  217,   46,  135,
   27,   89,  126,  132,  133,  127,  224,   90,   91,   92,
   93,   94,   95,   96,   97,   98,   99,  100,  101,  102,
  103,  104,  105,  106,  107,  108,  169,  306,  360,  361,
  339,
  ]
  yysindex := [                      -210,
    0,    0, -159,  243, -181,    0, -242,  -92,  -92,  -75,
 -242,    0, -257,    0,    0,    0,    0,    0,    0,    0,
    0, -101,    0, -127,  547, -239,    0,    0, -146,    0,
    0, -139,    0, -139,  -82,  -68,    0, -146,    0,    0,
  -55,  -10,   -8,   25,  547,    0,    0, -194,    0,    0,
    0,    0,  547,  547,  547,    0,  547,    0,  547,  547,
  547,  547,  547,  637, -241,  637,  637,  637,  637,  637,
  637,  637,  637,  637,  637,  637,  637,  637,  637,  547,
  547,  547,  547,  637,    0,    0,  -15,    0,   38,    0,
    0, 4209,    0,  -37,   -1,  -96,    0, -171,    0,  -81,
    0,    0,    0,    0,    0,    0,    0,    0, -242,   30,
  -92,  190,  -75,   11,   10,   54,   10,   10, -185, -185,
 -185, -244,   40,   39, -185,    0, -242,   22,   -5,   28,
   46, -108,    0, -202,  144,  149,    0, -169, -228,  -38,
  -15,    0, -148,    0, -132, -110,   68,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   47,  -15,  -72,   71,   74,    0,
  727, -257,  547,  637,  727,  727,  727,  727,  727,  727,
  727,  727,  727,  727,  727,  727,  727,  727,  727,  727,
  727,  727,  637,  637,  637,  637,  637,  637,  637,  637,
  637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
 -235,  547,   90,  547,  363, -146,   94,    0,    0,    0,
    0,    0,    0,    0,   99,    0,    0,    0,    0,    0,
 -185,  110,  180,    0,  272, -270, -225,  120, -242,   96,
 -257,   25,  115,    0,  145,    0,  118,  547,  547,  547,
  547,  547,    0,    0,  547,    0,    0,    0,    0,  202,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   -1,   -1,
   -1,   -1,   -1,    0,   -1,  -96,  -96,  -96,  -96,    0,
    0,    0,    0,    0,    0,    0,   68,    0,    0,   51,
  547, -184,  -45,    0,    0,  -77,  153,   25,    0,   25,
  272,    0,  206,  131,    0,   37,   22,   25,  146,  138,
    0, -245,    0,    0,  224,  456,  -15, -236,  -15,  -15,
  -15,    0,  637,    0,   55,    0,    0,    0,  547,    0,
  547,    0,  547,  148,  152,    0,    0,  547,    0,    0,
  154,    0,  190,  151,  547,  165,    0,  161, -275, -168,
    0,  547,    0,    0, -234,    0,  -15,    0,    0,    0,
    0,    0,  547,  -71,  547,  547,  456,    0,  -15,    0,
  272,   59,    0,  -15,  -15,    0,    0,    0,
  ]
  yyrindex := [                       -40,
    0,    0,  -90,  -90,    0,    0,    0,    0,    0,    0,
    0,    0, 4082,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   72,    0,    0,    0, -173,    0,
    0, -167,    0, -133,    0,  -34,    0,  150,    0,    0,
 -137,    0,    0,  169,  -70,    0,    0,  817,    0,    0,
    0,    0, 4147,    0,    0,    0,    0,    0,    0, 4147,
 4147,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   72,
    0,  -24,  -42,    0,    0,    0, 1013,    0,    0,    0,
    0, 4051,    0, 3953, 2679, 2777,    0, 2581,    0, 3855,
    0,    0,    0,    0,    0,    0,    0,    0,  172,    0,
    0,    0,    0,    0,  255,    0,  255,  255, -204, -204,
 -204,    0,  244,    0, -204,    0,    0, -193,    0, -140,
    0,  182,    0,    0,    0,    0,    0,    0, 2091,    0,
 1111,    0, 2189,    0, 2287, 2385,  817,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1209,    0,  170,    0,    0,
    0, 1307,  -97,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   72,    0,  -24,  187,  184,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 -204,  181,    0,    0, -268,   86,    0,   -6,  172,    0,
 -237,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  -42,    0,    0,    0,    0, 1405,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 2875, 2973,
 3071, 3169, 3267,    0, 3365, 3463, 3561, 3659, 3757,    0,
    0,    0,    0,    0,    0,    0,  915,    0,    0,    0,
   72,  -23,    0,    0,    0,    0,    0,  169,    0,  169,
 -268,    0,    0,    0,    0, -193, -193,  169,    0,  -46,
    0,    0,    0,    0,    0,    0, 1503, 2483, 1601, 1699,
 1797,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  -70,    0,    0,    0,    0,    0,    0, -268,    0,    0,
    0,    0,    0,    0,  -70,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1895,    0,    0,    0,
    0,    0,   72,    0,    0,    0,    0,    0, 1993,    0,
 -268,    0,    0,  -19,   18,    0,    0,    0,
  ]
  yygindex := [                         0,
  533,    0,  -89,  420,    0,    0,    0,    0,    7,    2,
    0,  -21, -304,  -54,    0,  -91,  430,  142,  -49,  -36,
    0,  526,  426,    6,    0,  427, -109,  302,    0,    0,
    0,  -43,  428,    0,  301,    0,  355,  -52, 4370,    0,
 -160,    0,  139,  296,  198,    0,  -17,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  289,    0,    0,  173,
    0,
  ]
$define YYTABLESIZE 4565
  yytable := [                         41,
  137,  134,  220,   76,   20,   20,  346,  142,  144,   19,
   19,  354,   29,  260,   28,  149,   38,  138,  139,   28,
  140,  297,  141,  171,  143,  145,  146,  228,  229,  230,
  168,  316,  150,  234,  362,  115,  165,  284,  167,  117,
  118,  248,  298,  370,  166,    1,  148,  120,  151,  152,
  153,  154,  155,  156,  157,  158,  159,  160,  161,  162,
  163,  164,  171,   17,  171,  376,  170,   22,  110,   17,
  171,    5,   39,   22,   78,   69,  387,  114,   17,   69,
   69,   43,  258,   36,   17,   39,   17,   17,   36,   30,
   17,   17,   17,   36,   30,  116,  109,    5,  231,   30,
  355,   36,    6,   36,  235,   36,   81,   30,   28,   30,
  380,   30,   36,  247,  171,    7,   81,    8,   30,    9,
  259,  250,   24,   31,  208,  120,  120,  120,   31,  171,
  321,  120,  236,   31,   22,   24,  173,  251,   69,  309,
   22,   31,   17,   31,  244,   31,  315,  136,   43,   17,
  171,  322,   31,  336,   25,  337,  338,  209,  210,  252,
   26,  299,  305,   17,   30,   42,  171,   31,  300,   36,
  303,   12,  363,   26,  377,   30,   43,  302,  378,   36,
   36,   35,  314,   36,   43,   30,   30,  317,  171,   30,
  294,  295,  110,   10,   11,   43,   65,   12,   65,  111,
  204,    5,  168,   65,  205,   69,  206,  114,   44,   31,
  311,  327,  328,  329,  330,  331,    2,  207,   45,   31,
   31,    2,   37,   31,  115,  116,    2,   37,  117,  118,
  242,  211,   37,  112,    2,  243,    2,  120,    2,   78,
   37,   78,   37,  372,   37,    2,  128,   78,  129,   78,
   16,   37,  249,  344,  212,  345,   16,  335,  314,  213,
  171,  341,  214,  351,  215,   16,  173,  173,   78,  342,
  113,   16,  254,   16,   16,  383,   78,   16,   16,   16,
  193,  130,  194,  171,  195,  196,  218,  197,  366,  359,
   66,  116,   66,  173,  198,  314,  199,   66,  223,  340,
   78,   12,  365,  200,   78,  201,  367,  202,   37,  203,
  225,  374,    2,    2,   78,   79,    2,  232,   37,   37,
   78,   79,   37,  188,   43,  379,  357,  188,  314,  382,
  239,  279,  280,  281,  282,  283,   16,  285,  384,  385,
  359,   28,   28,   28,   28,   28,   28,  381,   28,   28,
   16,   28,  320,   49,   50,   51,   52,   28,   28,   28,
  189,   28,  237,   28,  189,   28,   28,   28,  240,   28,
   28,   28,   28,   28,  172,   28,  173,  237,  136,   28,
   28,   28,  241,  253,   28,  173,   28,  334,   28,  173,
   28,  364,   28,  173,   28,  388,   28,  173,   28,   28,
  245,  290,  291,  292,  293,  246,   38,  296,   78,  136,
   78,   38,   28,  255,   28,   28,   38,   28,   28,   28,
  256,   28,   14,   14,   38,  301,   38,   28,   38,   28,
  307,   28,   22,   22,  308,   38,   69,   69,   69,   69,
   69,   69,   28,   28,   69,  310,   69,   49,   50,   51,
   52,  312,   69,   69,   69,  318,   69,  349,  350,  324,
   69,  325,   69,  326,   69,   69,  333,   69,   69,  343,
   69,  226,  227,  348,   69,   69,   69,  347,  353,   69,
  356,   69,  352,   69,  368,   69,  373,   69,  369,   69,
  371,   69,   38,   69,   69,  286,  287,  288,  289,    5,
   25,  375,   38,   38,   23,   58,   38,   69,   53,   69,
   69,   74,   69,   69,   69,   11,  202,    7,   59,    8,
   54,    9,   69,   69,   69,   78,   69,   47,   48,   49,
   50,   51,   52,    4,   34,   53,  219,   54,   69,  221,
  319,  222,  323,  332,   55,   56,    0,   57,    0,  386,
    0,  115,    0,   58,    0,  117,  118,    0,   59,   60,
    0,   61,    0,    0,    0,   62,   63,   64,    0,    0,
   65,    0,   66,    0,   67,    0,   68,    0,   69,    0,
   70,    0,   71,    0,   72,   73,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   10,   11,    0,   74,   12,
   75,   76,    0,   77,   78,   79,    0,   80,    0,    0,
    0,    0,    0,   81,    0,   82,    0,   83,   47,   48,
   49,   50,   51,   52,    0,    0,   53,    0,   54,   84,
    0,    0,    0,    0,    0,   55,   56,    0,   57,    0,
    0,    0,    0,    0,   58,    0,    0,    0,    0,   59,
   60,    0,   61,    0,    0,    0,   62,   63,   64,    0,
    0,   65,    0,   66,    0,   67,    0,   68,    0,   69,
    0,   70,    0,   71,    0,   72,   73,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   74,
    0,   75,   76,    0,   77,   78,   79,    0,   80,    0,
    0,    0,    0,    0,   81,    0,   82,    0,   83,  304,
    0,   47,   48,   49,   50,   51,   52,    0,    0,   53,
   84,   54,    0,    0,  358,    0,    0,    0,   55,   56,
    0,   57,    0,    0,    0,    0,    0,   58,    0,    0,
    0,    0,   59,   60,    0,   61,    0,    0,    0,   62,
   63,   64,    0,    0,   65,    0,   66,    0,   67,    0,
   68,    0,   69,    0,   70,    0,   71,    0,   72,   73,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   74,    0,   75,   76,    0,   77,   78,   79,
    0,   80,    0,    0,    0,    0,    0,   81,    0,   82,
    0,   83,   47,   48,   49,   50,   51,   52,    0,    0,
   53,    0,   54,   84,    0,    0,    0,    0,    0,   55,
   56,    0,   57,    0,    0,    0,    0,    0,   58,    0,
    0,    0,    0,   59,   60,    0,   61,    0,    0,    0,
   62,   63,   64,    0,    0,   65,    0,   66,    0,   67,
    0,   68,    0,   69,    0,   70,    0,   71,    0,   72,
   73,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   74,    0,   75,   76,    0,   77,   78,
   79,    0,   80,    0,    0,    0,    0,    0,   81,    0,
   82,    0,   83,  147,   49,   50,   51,   52,    0,    0,
   53,    0,   54,    0,   84,    0,    0,    0,    0,   55,
   56,    0,   57,    0,    0,    0,    0,    0,   58,    0,
    0,    0,    0,   59,   60,    0,   61,    0,    0,    0,
   62,   63,   64,    0,    0,   65,    0,   66,    0,   67,
    0,   68,    0,   69,    0,   70,    0,   71,    0,   72,
   73,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   74,    0,   75,   76,    0,   77,   78,
   79,    0,   80,    0,    0,    0,    0,    0,   81,    0,
   82,    0,   83,   48,   49,   50,   51,   52,    0,    0,
   53,    0,   54,    0,   84,    0,    0,    0,    0,   55,
   56,    0,   57,    0,    0,    0,    0,    0,   58,    0,
    0,    0,    0,   59,   60,    0,   61,    0,    0,    0,
   62,   63,   64,    0,    0,   65,    0,   66,    0,   67,
    0,   68,    0,   69,    0,   70,    0,   71,    0,   72,
   73,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   74,    0,   75,   76,    0,   77,   78,
   79,    0,   80,    0,    0,    0,    0,    0,   81,    0,
   82,    0,   83,  155,    0,    0,    0,    0,  155,  155,
    0,  155,    0,  155,   84,    0,  155,  155,  155,    0,
    0,  155,    0,  155,  155,  155,  155,  155,    0,  155,
  155,  155,  155,    0,    0,    0,    0,  155,    0,  155,
    0,    0,  155,  155,  155,  155,  155,  155,  155,  155,
  155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
  155,  155,  155,    0,  155,  155,  155,  155,  155,  155,
  155,  155,  155,    0,  155,  155,  155,  155,  155,    0,
  155,  155,  155,  155,  155,  155,  155,  155,    0,  155,
  155,  155,  155,  155,    0,    0,    0,    0,    0,  155,
  155,  166,  155,  155,    0,    0,  166,  166,    0,  166,
    0,  166,    0,    0,  166,  166,  166,    0,    0,  166,
    0,  166,  166,  166,  166,  166,    0,  166,  166,  166,
  166,    0,    0,    0,    0,  166,    0,  166,    0,    0,
  166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
  166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
  166,    0,  166,  166,  166,  166,  166,  166,  166,  166,
  166,    0,  166,  166,  166,  166,  166,    0,  166,  166,
  166,  166,  166,  166,  166,  166,    0,  166,  166,  166,
  166,  166,    0,    0,    0,    0,    0,  166,  166,   79,
  166,  166,    0,    0,   79,   79,    0,   79,    0,   79,
    0,    0,   79,   79,   79,    0,    0,   79,    0,   79,
   79,   79,   79,   79,    0,   79,   79,   79,   79,    0,
    0,    0,    0,   79,    0,   79,    0,    0,   79,   79,
   79,    0,   79,   79,   79,   79,   79,   79,   79,   79,
   79,   79,   79,   79,   79,   79,   79,   79,   79,    0,
   79,   79,   79,   79,   79,   79,   79,   79,   79,    0,
   79,   79,   79,   79,   79,    0,   79,   79,   79,   79,
   79,   79,   79,   79,    0,   79,   79,   79,   79,   79,
    0,    0,    0,    0,    0,   79,   79,  178,   79,   79,
    0,    0,  178,  178,    0,  178,    0,  178,    0,    0,
  178,  178,  178,    0,    0,  178,    0,  178,  178,  178,
  178,  178,    0,  178,  178,  178,  178,    0,    0,    0,
    0,  178,    0,  178,    0,    0,  178,  178,  178,    0,
  178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
  178,  178,  178,  178,  178,  178,  178,    0,  178,  178,
  178,  178,  178,  178,  178,  178,  178,    0,  178,  178,
  178,  178,  178,    0,  178,  178,  178,  178,  178,  178,
  178,  178,    0,  178,  178,  178,  178,  178,    0,    0,
    0,    0,    0,  178,  178,   21,  178,  178,    0,    0,
   21,   21,    0,   21,    0,   21,    0,    0,   21,   21,
   21,    0,    0,   21,    0,   21,   21,   21,   21,   21,
    0,   21,   21,   21,   21,    0,    0,    0,    0,   21,
    0,   21,    0,    0,   21,   21,   21,    0,   21,   21,
   21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
   21,   21,   21,   21,   21,    0,   21,   21,   21,   21,
   21,   21,   21,   21,   21,    0,   21,   21,   21,   21,
   21,    0,   21,   21,   21,   21,   21,   21,   21,   21,
    0,   21,   21,   21,   21,   21,    0,    0,    0,    0,
    0,   21,   21,   28,   21,   21,    0,    0,   28,   28,
    0,   28,    0,   28,    0,    0,   28,   28,   28,    0,
    0,   28,    0,   28,   28,   28,   28,   28,    0,   28,
   28,   28,   28,    0,    0,    0,    0,   28,    0,   28,
    0,    0,   28,   28,   28,   28,   28,   28,   28,   28,
   28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
   28,   28,   28,    0,   28,   28,   28,   28,   28,   28,
   28,   28,   28,    0,   28,   28,   28,   28,   28,    0,
   28,   28,   28,   28,   28,   28,   28,   28,    0,    0,
   28,   28,   28,   28,    0,    0,    0,    0,    0,   28,
   28,  103,   28,   28,    0,    0,  103,  103,    0,    0,
    0,  103,    0,    0,  103,  103,  103,    0,    0,  103,
    0,  103,  103,  103,  103,  103,    0,  103,  103,  103,
  103,    0,    0,    0,    0,  103,    0,  103,    0,    0,
  103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
  103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
  103,    0,  103,  103,  103,  103,  103,  103,  103,  103,
  103,    0,  103,  103,  103,  103,  103,    0,  103,  103,
  103,  103,  103,  103,  103,  103,    0,  103,  103,  103,
  103,  103,    0,    0,    0,    0,    0,  103,  103,  177,
  103,  103,    0,    0,  177,  177,    0,  177,    0,  177,
    0,    0,  177,  177,  177,    0,    0,  177,    0,  177,
  177,  177,  177,  177,    0,  177,  177,  177,  177,    0,
    0,    0,    0,  177,    0,  177,    0,    0,  177,  177,
  177,    0,  177,  177,  177,  177,  177,  177,  177,  177,
  177,  177,  177,  177,  177,  177,  177,  177,  177,    0,
  177,  177,  177,  177,  177,  177,  177,  177,  177,    0,
  177,  177,  177,  177,  177,    0,  177,  177,  177,  177,
  177,  177,  177,  177,    0,  177,  177,  177,  177,  177,
    0,    0,    0,    0,    0,  177,  177,  182,  177,  177,
    0,    0,  182,  182,    0,  182,    0,  182,    0,    0,
  182,  182,  182,    0,    0,  182,    0,  182,  182,  182,
  182,  182,    0,  182,  182,  182,  182,    0,    0,    0,
    0,  182,    0,  182,    0,    0,  182,  182,  182,    0,
  182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
  182,  182,  182,  182,  182,  182,  182,    0,  182,  182,
  182,  182,  182,  182,  182,  182,  182,    0,  182,  182,
  182,  182,  182,    0,  182,  182,  182,  182,  182,  182,
  182,  182,    0,  182,  182,  182,  182,  182,    0,    0,
    0,    0,    0,  182,  182,  175,  182,  182,    0,    0,
  175,  175,    0,  175,    0,  175,    0,    0,  175,  175,
  175,    0,    0,  175,    0,  175,  175,  175,  175,  175,
    0,  175,  175,  175,  175,    0,    0,    0,    0,  175,
    0,  175,    0,    0,  175,  175,  175,    0,  175,  175,
  175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
  175,  175,  175,  175,  175,    0,  175,  175,  175,  175,
  175,  175,  175,  175,  175,    0,  175,  175,  175,  175,
  175,    0,  175,  175,  175,  175,  175,  175,  175,  175,
    0,  175,  175,  175,  175,  175,    0,    0,    0,    0,
    0,  175,  175,  173,  175,  175,    0,    0,  173,  173,
    0,  173,    0,  173,    0,    0,  173,  173,  173,    0,
    0,  173,    0,  173,  173,  173,  173,  173,    0,  173,
  173,  173,  173,    0,    0,    0,    0,  173,    0,  173,
    0,    0,  173,  173,  173,    0,  173,  173,  173,  173,
  173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
  173,  173,  173,    0,  173,  173,  173,  173,  173,  173,
  173,  173,  173,    0,  173,  173,  173,  173,  173,    0,
  173,  173,  173,  173,  173,  173,  173,  173,    0,  173,
  173,  173,  173,  173,    0,    0,    0,    0,    0,  173,
  173,   52,  173,  173,    0,    0,   52,   52,    0,   52,
    0,   52,    0,    0,   52,   52,   52,    0,    0,   52,
    0,   52,   52,   52,   52,   52,    0,   52,   52,   52,
   52,    0,    0,    0,    0,   52,    0,   52,    0,    0,
   52,   52,   52,    0,   52,   52,   52,   52,   52,   52,
   52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
   52,    0,   52,   52,   52,   52,   52,   52,   52,   52,
   52,    0,   52,   52,   52,   52,   52,    0,   52,   52,
   52,   52,   52,   52,   52,   52,    0,   52,   52,   52,
   52,   52,    0,    0,    0,    0,    0,   52,   52,  184,
   52,   52,    0,    0,  184,  184,    0,  184,    0,  184,
    0,    0,  184,  184,  184,    0,    0,  184,    0,  184,
  184,  184,  184,  184,    0,  184,  184,  184,  184,    0,
    0,    0,    0,  184,    0,  184,    0,    0,  184,  184,
  184,    0,  184,  184,  184,  184,  184,  184,  184,  184,
  184,  184,  184,  184,  184,  184,  184,  184,  184,    0,
  184,  184,  184,  184,  184,  184,  184,  184,  184,    0,
  184,  184,  184,  184,  184,    0,  184,  184,  184,  184,
  184,  184,  184,  184,    0,  184,  184,  184,  184,  184,
    0,    0,    0,    0,    0,  184,  184,  176,  184,  184,
    0,    0,  176,  176,    0,  176,    0,  176,    0,    0,
    0,  176,  176,    0,    0,  176,    0,  176,  176,  176,
  176,  176,    0,  176,  176,  176,  176,    0,    0,    0,
    0,  176,    0,  176,    0,    0,  176,  176,  176,    0,
  176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
  176,  176,  176,  176,  176,  176,  176,    0,  176,  176,
  176,  176,  176,  176,  176,  176,  176,    0,  176,  176,
  176,  176,  176,    0,  176,  176,  176,  176,  176,  176,
  176,  176,    0,  176,  176,  176,  176,  176,    0,    0,
    0,    0,    0,  176,  176,   79,  176,  176,    0,    0,
   79,   79,    0,   79,    0,   79,    0,    0,    0,   79,
   79,    0,    0,   79,    0,   79,   79,   79,   79,   79,
    0,   79,   79,   79,   79,    0,    0,    0,    0,   79,
    0,   79,    0,    0,   79,   79,   79,    0,   79,   79,
   79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
   79,   79,   79,   79,   79,    0,   79,   79,   79,   79,
   79,   79,   79,   79,   79,    0,   79,   79,   79,   79,
   79,    0,   79,   79,   79,   79,   79,   79,   79,   79,
    0,   79,   79,   79,   79,   79,    0,    0,    0,    0,
    0,   79,   79,  174,   79,   79,    0,    0,  174,  174,
    0,  174,    0,  174,    0,    0,    0,  174,  174,    0,
    0,  174,    0,  174,  174,  174,  174,  174,    0,  174,
  174,  174,  174,    0,    0,    0,    0,  174,    0,  174,
    0,    0,  174,  174,  174,    0,  174,  174,  174,  174,
  174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
  174,  174,  174,    0,  174,  174,  174,  174,  174,  174,
  174,  174,  174,    0,  174,  174,  174,  174,  174,    0,
  174,  174,  174,  174,  174,  174,  174,  174,    0,  174,
  174,  174,  174,  174,    0,    0,    0,    0,    0,  174,
  174,  172,  174,  174,    0,    0,  172,  172,    0,  172,
    0,  172,    0,    0,    0,  172,  172,    0,    0,  172,
    0,  172,  172,  172,  172,  172,    0,  172,  172,  172,
  172,    0,    0,    0,    0,  172,    0,  172,    0,    0,
  172,  172,  172,    0,  172,  172,  172,  172,  172,  172,
  172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
  172,    0,  172,  172,  172,  172,  172,  172,  172,  172,
  172,    0,  172,  172,  172,  172,  172,    0,  172,  172,
  172,  172,  172,  172,  172,  172,    0,  172,  172,  172,
  172,  172,    0,    0,    0,    0,    0,  172,  172,  183,
  172,  172,    0,    0,  183,  183,    0,  183,    0,  183,
    0,    0,  183,    0,  183,    0,    0,  183,    0,  183,
  183,  183,  183,  183,    0,  183,  183,  183,  183,    0,
    0,    0,    0,  183,    0,  183,    0,    0,  183,  183,
  183,    0,  183,  183,  183,  183,  183,  183,  183,  183,
  183,  183,  183,  183,  183,  183,  183,  183,  183,    0,
  183,  183,  183,  183,  183,  183,  183,  183,  183,    0,
  183,  183,  183,  183,  183,    0,  183,  183,  183,  183,
  183,  183,  183,  183,    0,  183,  183,  183,  183,  183,
    0,    0,    0,    0,    0,  183,  183,  124,  183,  183,
    0,    0,  124,  124,    0,  124,    0,  124,    0,    0,
  124,  124,  124,    0,    0,  124,    0,  124,  124,  124,
  124,  124,    0,  124,  124,  124,  124,    0,    0,    0,
    0,  124,    0,  124,    0,    0,    0,  124,  124,  124,
  124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
  124,  124,  124,  124,  124,  124,  124,    0,  124,  124,
  124,  124,  124,  124,  124,  124,  124,    0,  124,    0,
    0,  124,  124,    0,  124,  124,  124,  124,  124,  124,
  124,  124,    0,  124,  124,  124,  124,  124,    0,    0,
    0,    0,    0,  124,  124,  107,  124,  124,    0,    0,
  107,  107,    0,  107,    0,  107,    0,    0,  107,  107,
  107,    0,    0,  107,    0,  107,  107,  107,  107,  107,
    0,  107,  107,  107,  107,    0,    0,    0,    0,  107,
    0,  107,    0,    0,  107,  107,  107,  107,  107,  107,
  107,  107,  107,    0,  107,    0,  107,    0,  107,    0,
  107,  107,  107,  107,  107,    0,  107,  107,  107,  107,
  107,  107,  107,  107,  107,    0,  107,  107,  107,  107,
  107,    0,  107,  107,  107,  107,  107,  107,  107,  107,
    0,  107,  107,  107,  107,  107,    0,    0,    0,    0,
    0,  107,  107,  114,  107,  107,    0,    0,  114,  114,
    0,  114,    0,  114,    0,    0,  114,  114,  114,    0,
    0,  114,    0,  114,  114,  114,  114,  114,    0,  114,
  114,  114,  114,    0,    0,    0,    0,  114,    0,  114,
    0,    0,  114,    0,  114,  114,  114,    0,  114,    0,
  114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
    0,  114,  114,    0,  114,  114,  114,  114,  114,  114,
  114,  114,  114,    0,  114,  114,  114,  114,  114,    0,
  114,  114,  114,  114,  114,  114,  114,  114,    0,  114,
  114,  114,  114,  114,    0,    0,    0,    0,    0,  114,
  114,  112,  114,  114,    0,    0,  112,  112,    0,  112,
    0,  112,    0,    0,  112,  112,  112,    0,    0,  112,
    0,  112,  112,  112,  112,  112,    0,  112,  112,  112,
  112,    0,    0,    0,    0,  112,    0,  112,    0,    0,
  112,  112,  112,  112,  112,  112,  112,  112,  112,    0,
  112,    0,  112,    0,  112,    0,  112,  112,  112,  112,
  112,    0,  112,  112,  112,  112,  112,  112,  112,  112,
  112,    0,  112,  112,  112,  112,  112,    0,  112,  112,
  112,  112,  112,  112,  112,  112,    0,  112,  112,  112,
  112,  112,    0,    0,    0,    0,    0,  112,  112,  111,
  112,  112,    0,    0,  111,  111,    0,  111,    0,  111,
    0,    0,  111,  111,  111,    0,    0,  111,    0,  111,
  111,  111,  111,  111,    0,  111,  111,  111,  111,    0,
    0,    0,    0,  111,    0,  111,    0,    0,  111,  111,
  111,  111,  111,  111,  111,  111,  111,    0,  111,    0,
  111,    0,  111,    0,  111,  111,  111,  111,  111,    0,
  111,  111,  111,  111,  111,  111,  111,  111,  111,    0,
  111,  111,  111,  111,  111,    0,  111,  111,  111,  111,
  111,  111,  111,  111,    0,  111,  111,  111,  111,  111,
    0,    0,    0,    0,    0,  111,  111,  108,  111,  111,
    0,    0,  108,  108,    0,  108,    0,  108,    0,    0,
  108,  108,  108,    0,    0,  108,    0,  108,  108,  108,
  108,  108,    0,  108,  108,  108,  108,    0,    0,    0,
    0,  108,    0,  108,    0,    0,  108,  108,  108,  108,
  108,  108,  108,  108,  108,    0,  108,    0,  108,    0,
  108,    0,  108,  108,  108,  108,  108,    0,  108,  108,
  108,  108,  108,  108,  108,  108,  108,    0,  108,  108,
  108,  108,  108,    0,  108,  108,  108,  108,  108,  108,
  108,  108,    0,  108,  108,  108,  108,  108,    0,    0,
    0,    0,    0,  108,  108,  110,  108,  108,    0,    0,
  110,  110,    0,  110,    0,  110,    0,    0,  110,  110,
  110,    0,    0,  110,    0,  110,  110,  110,  110,  110,
    0,  110,  110,  110,  110,    0,    0,    0,    0,  110,
    0,  110,    0,    0,  110,  110,  110,  110,  110,  110,
  110,  110,  110,    0,  110,    0,  110,    0,  110,    0,
  110,  110,  110,  110,  110,    0,  110,  110,  110,  110,
  110,  110,  110,  110,  110,    0,  110,  110,  110,  110,
  110,    0,  110,  110,  110,  110,  110,  110,  110,  110,
    0,  110,  110,  110,  110,  110,    0,    0,    0,    0,
    0,  110,  110,  109,  110,  110,    0,    0,  109,  109,
    0,  109,    0,  109,    0,    0,  109,  109,  109,    0,
    0,  109,    0,  109,  109,  109,  109,  109,    0,  109,
  109,  109,  109,    0,    0,    0,    0,  109,    0,  109,
    0,    0,  109,  109,  109,  109,  109,  109,  109,  109,
  109,    0,  109,    0,  109,    0,  109,    0,  109,  109,
  109,  109,  109,    0,  109,  109,  109,  109,  109,  109,
  109,  109,  109,    0,  109,  109,  109,  109,  109,    0,
  109,  109,  109,  109,  109,  109,  109,  109,    0,  109,
  109,  109,  109,  109,    0,    0,    0,    0,    0,  109,
  109,  113,  109,  109,    0,    0,  113,  113,    0,  113,
    0,  113,    0,    0,  113,  113,  113,    0,    0,  113,
    0,  113,  113,  113,  113,  113,    0,  113,  113,  113,
  113,    0,    0,    0,    0,  113,    0,  113,    0,    0,
  113,  113,  113,  113,  113,  113,  113,  113,  113,    0,
  113,    0,  113,    0,  113,    0,  113,  113,  113,  113,
  113,    0,  113,  113,  113,  113,  113,  113,  113,  113,
  113,    0,  113,  113,  113,  113,  113,    0,  113,  113,
  113,  113,  113,  113,  113,  113,    0,  113,  113,  113,
  113,  113,    0,    0,    0,    0,    0,  113,  113,  115,
  113,  113,    0,    0,  115,  115,    0,  115,    0,  115,
    0,    0,  115,  115,  115,    0,    0,  115,    0,  115,
  115,  115,  115,  115,    0,  115,  115,  115,  115,    0,
    0,    0,    0,  115,    0,  115,    0,    0,  115,    0,
  115,  115,  115,    0,  115,    0,  115,  115,  115,  115,
  115,  115,  115,  115,  115,  115,    0,  115,  115,    0,
  115,  115,  115,  115,  115,  115,  115,  115,  115,    0,
  115,  115,  115,  115,  115,    0,  115,  115,  115,  115,
  115,  115,  115,  115,    0,  115,  115,  115,  115,  115,
    0,    0,    0,    0,    0,  115,  115,  117,  115,  115,
    0,    0,  117,  117,    0,  117,    0,  117,    0,    0,
  117,  117,  117,    0,    0,  117,    0,  117,  117,  117,
  117,  117,    0,  117,  117,  117,  117,    0,    0,    0,
    0,  117,    0,  117,    0,    0,  117,    0,  117,  117,
  117,    0,  117,    0,  117,  117,  117,  117,  117,  117,
  117,  117,  117,  117,    0,  117,  117,    0,  117,  117,
  117,  117,  117,  117,  117,  117,  117,    0,  117,  117,
  117,  117,  117,    0,  117,  117,  117,  117,  117,  117,
  117,  117,    0,  117,  117,  117,  117,  117,    0,    0,
    0,    0,    0,  117,  117,  118,  117,  117,    0,    0,
  118,  118,    0,  118,    0,  118,    0,    0,  118,  118,
  118,    0,    0,  118,    0,  118,  118,  118,  118,  118,
    0,  118,  118,  118,  118,    0,    0,    0,    0,  118,
    0,  118,    0,    0,  118,    0,  118,  118,  118,    0,
  118,    0,  118,  118,  118,  118,  118,  118,  118,  118,
  118,  118,    0,  118,  118,    0,  118,  118,  118,  118,
  118,  118,  118,  118,  118,    0,  118,  118,  118,  118,
  118,    0,  118,  118,  118,  118,  118,  118,  118,  118,
    0,  118,  118,  118,  118,  118,    0,    0,    0,    0,
    0,  118,  118,  116,  118,  118,    0,    0,  116,  116,
    0,  116,    0,  116,    0,    0,  116,  116,  116,    0,
    0,  116,    0,  116,  116,  116,  116,  116,    0,  116,
  116,  116,  116,    0,    0,    0,    0,  116,    0,  116,
    0,    0,  116,    0,  116,  116,  116,    0,  116,    0,
  116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
    0,  116,  116,    0,  116,  116,  116,  116,  116,  116,
  116,  116,  116,    0,  116,  116,  116,  116,  116,    0,
  116,  116,  116,  116,  116,  116,  116,  116,    0,  116,
  116,  116,  116,  116,    0,    0,    0,    0,    0,  116,
  116,  129,  116,  116,    0,    0,  129,  129,    0,  129,
    0,  129,    0,    0,  129,  129,  129,    0,    0,  129,
    0,  129,  129,  129,  129,  129,    0,  129,  129,  129,
  129,    0,    0,    0,    0,  129,    0,  129,    0,    0,
  129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
  129,  129,  129,  129,  129,  129,  129,    0,  129,  129,
  129,    0,  129,  129,  129,  129,  129,  129,  129,  129,
  129,    0,  129,  129,  129,  129,  129,    0,  129,  129,
    0,  129,  129,  129,  129,    0,    0,  129,    0,  129,
    0,  129,    0,    0,    0,    0,    0,  129,  129,  105,
  129,  129,    0,    0,  105,  105,    0,  105,    0,  105,
    0,    0,  105,  105,  105,    0,    0,  105,    0,  105,
  105,  105,  105,  105,    0,  105,  105,  105,  105,    0,
    0,    0,    0,  105,    0,  105,    0,    0,  105,  105,
  105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
  105,  105,  105,  105,  105,  105,  105,  105,  105,    0,
    0,  105,    0,  105,    0,    0,  105,    0,  105,    0,
  105,  105,  105,  105,    0,    0,    0,  105,  105,  105,
  105,  105,  105,  105,    0,  105,  105,  105,  105,  105,
    0,    0,    0,    0,    0,  105,  105,   82,  105,  105,
    0,    0,   82,   82,    0,   82,    0,   82,    0,    0,
   82,   82,   82,    0,    0,   82,    0,   82,   82,   82,
   82,   82,    0,   82,   82,   82,   82,    0,   28,    0,
    0,   82,    0,   28,    0,    0,   82,   82,   28,   82,
    0,   82,    0,   82,    0,   82,   28,   82,   28,   82,
   28,   82,    0,   82,   82,    0,    0,   28,   82,    0,
   82,    0,   82,   82,    0,   82,    0,    0,    0,   82,
   82,    0,   82,    0,   82,    0,   82,   82,   82,   82,
   82,   82,    0,   82,   82,   82,   82,   82,    0,    0,
    0,    0,    0,   82,   82,    0,    0,   82,   78,   78,
    0,   78,    0,   78,    0,    0,   78,   78,   78,    0,
    0,   78,    0,   78,   78,   78,   78,   78,    0,   78,
   78,   78,   78,    0,   28,   28,    0,   78,   28,   78,
    0,    0,    0,   78,   78,    0,   78,    0,   78,    0,
   78,    0,   78,    0,   78,    0,   78,    0,   78,    0,
    0,   78,   78,    0,   78,   78,   78,   78,   78,   78,
   78,   78,   78,    0,   78,    0,    0,   78,    0,    0,
    0,   78,    0,   78,   78,   78,   78,   78,    0,   78,
    0,   78,    0,   78,    0,    0,    0,    0,    0,   78,
   78,  174,   78,   78,    0,    0,  175,    0,  176,    0,
  177,    0,  178,    0,  179,    0,  180,    0,  181,    0,
  182,    0,    0,  183,  184,    0,    0,  185,    0,  186,
    0,    0,  187,    0,  188,    0,  189,    0,    0,  190,
  257,    0,    0,  191,  261,  262,  263,  264,  265,  266,
  267,  268,  269,  270,  271,  272,  273,  274,  275,  276,
  277,  278,    0,    0,  192,
  ]
  yycheck := [                         21,
   53,   45,  112,  272,    3,    4,  311,   60,   61,    3,
    4,  257,    7,  174,  257,  257,   11,   54,   55,  257,
   57,  257,   59,  299,   61,   62,   63,  119,  120,  121,
   83,  257,  274,  125,  271,  280,   80,  198,   82,  284,
  285,  270,  278,  348,   81,  256,   64,   41,   66,   67,
   68,   69,   70,   71,   72,   73,   74,   75,   76,   77,
   78,   79,  299,  257,  299,  341,   84,  272,  339,  263,
  299,  257,  343,  278,  343,  280,  381,  263,  272,  284,
  285,  286,  172,  257,  278,  343,  280,  281,  262,  257,
  284,  285,  286,  267,  262,  281,  336,  257,  343,  267,
  346,  275,  262,  277,  126,  279,  342,  275,  346,  277,
  345,  279,  286,  283,  299,  275,  342,  277,  286,  279,
  173,  270,  317,  257,  296,  119,  120,  121,  262,  299,
  240,  125,  127,  267,  272,  317,  339,  270,  343,  231,
  278,  275,  336,  277,  347,  279,  236,  342,  286,  343,
  299,  241,  286,  338,  336,  340,  341,  329,  330,  270,
  355,  211,  215,  357,  257,  267,  299,  260,  212,  343,
  214,  357,  333,  355,  343,  343,  267,  214,  347,  353,
  354,  257,  235,  357,  286,  353,  354,  237,  299,  357,
  208,  209,  339,  353,  354,  286,  337,  357,  339,  339,
  297,  257,  255,  344,  301,  343,  303,  263,  336,  343,
  232,  248,  249,  250,  251,  252,  257,  314,  346,  353,
  354,  262,  257,  357,  280,  281,  267,  262,  284,  285,
  339,  313,  267,  316,  275,  344,  277,  231,  279,  337,
  275,  339,  277,  353,  279,  286,  257,  345,  257,  347,
  257,  286,  291,  308,  336,  310,  263,  301,  311,  341,
  299,  339,  344,  318,  346,  272,  339,  339,  339,  347,
  339,  278,  345,  280,  281,  347,  347,  284,  285,  286,
  318,  257,  320,  299,  322,  323,  257,  325,  341,  326,
  337,  281,  339,  339,  332,  348,  334,  344,  289,  345,
  343,  357,  339,  305,  347,  307,  343,  309,  343,  311,
  257,  355,  353,  354,  339,  339,  357,  278,  353,  354,
  345,  345,  357,  343,  286,  362,  325,  347,  381,  373,
  336,  193,  194,  195,  196,  197,  343,  199,  375,  376,
  377,  256,  257,  258,  259,  260,  261,  369,  263,  264,
  357,  266,  257,  258,  259,  260,  261,  272,  273,  274,
  343,  276,  341,  278,  347,  280,  281,  282,  341,  284,
  285,  286,  287,  288,  337,  290,  339,  341,  342,  294,
  295,  296,  337,  337,  299,  339,  301,  337,  303,  339,
  305,  337,  307,  339,  309,  337,  311,  339,  313,  314,
  257,  204,  205,  206,  207,  257,  257,  210,  337,  342,
  339,  262,  327,  343,  329,  330,  267,  332,  333,  334,
  347,  336,    3,    4,  275,  336,  277,  342,  279,  344,
  337,  346,    3,    4,  336,  286,  256,  257,  258,  259,
  260,  261,  357,  358,  264,  336,  266,  258,  259,  260,
  261,  272,  272,  273,  274,  336,  276,  316,  317,  345,
  280,  317,  282,  346,  284,  285,  265,  287,  288,  317,
  290,  117,  118,  343,  294,  295,  296,  272,  341,  299,
  257,  301,  337,  303,  337,  305,  336,  307,  337,  309,
  337,  311,  343,  313,  314,  200,  201,  202,  203,  257,
  336,  341,  353,  354,  262,  337,  357,  327,  337,  329,
  330,  257,  332,  333,  334,  272,  347,  275,  337,  277,
  337,  279,  342,  343,  344,  339,  346,  256,  257,  258,
  259,  260,  261,    1,    9,  264,  111,  266,  358,  113,
  239,  114,  242,  255,  273,  274,   -1,  276,   -1,  377,
   -1,  280,   -1,  282,   -1,  284,  285,   -1,  287,  288,
   -1,  290,   -1,   -1,   -1,  294,  295,  296,   -1,   -1,
  299,   -1,  301,   -1,  303,   -1,  305,   -1,  307,   -1,
  309,   -1,  311,   -1,  313,  314,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  353,  354,   -1,  327,  357,
  329,  330,   -1,  332,  333,  334,   -1,  336,   -1,   -1,
   -1,   -1,   -1,  342,   -1,  344,   -1,  346,  256,  257,
  258,  259,  260,  261,   -1,   -1,  264,   -1,  266,  358,
   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,  276,   -1,
   -1,   -1,   -1,   -1,  282,   -1,   -1,   -1,   -1,  287,
  288,   -1,  290,   -1,   -1,   -1,  294,  295,  296,   -1,
   -1,  299,   -1,  301,   -1,  303,   -1,  305,   -1,  307,
   -1,  309,   -1,  311,   -1,  313,  314,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  327,
   -1,  329,  330,   -1,  332,  333,  334,   -1,  336,   -1,
   -1,   -1,   -1,   -1,  342,   -1,  344,   -1,  346,  347,
   -1,  256,  257,  258,  259,  260,  261,   -1,   -1,  264,
  358,  266,   -1,   -1,  269,   -1,   -1,   -1,  273,  274,
   -1,  276,   -1,   -1,   -1,   -1,   -1,  282,   -1,   -1,
   -1,   -1,  287,  288,   -1,  290,   -1,   -1,   -1,  294,
  295,  296,   -1,   -1,  299,   -1,  301,   -1,  303,   -1,
  305,   -1,  307,   -1,  309,   -1,  311,   -1,  313,  314,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  327,   -1,  329,  330,   -1,  332,  333,  334,
   -1,  336,   -1,   -1,   -1,   -1,   -1,  342,   -1,  344,
   -1,  346,  256,  257,  258,  259,  260,  261,   -1,   -1,
  264,   -1,  266,  358,   -1,   -1,   -1,   -1,   -1,  273,
  274,   -1,  276,   -1,   -1,   -1,   -1,   -1,  282,   -1,
   -1,   -1,   -1,  287,  288,   -1,  290,   -1,   -1,   -1,
  294,  295,  296,   -1,   -1,  299,   -1,  301,   -1,  303,
   -1,  305,   -1,  307,   -1,  309,   -1,  311,   -1,  313,
  314,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  327,   -1,  329,  330,   -1,  332,  333,
  334,   -1,  336,   -1,   -1,   -1,   -1,   -1,  342,   -1,
  344,   -1,  346,  257,  258,  259,  260,  261,   -1,   -1,
  264,   -1,  266,   -1,  358,   -1,   -1,   -1,   -1,  273,
  274,   -1,  276,   -1,   -1,   -1,   -1,   -1,  282,   -1,
   -1,   -1,   -1,  287,  288,   -1,  290,   -1,   -1,   -1,
  294,  295,  296,   -1,   -1,  299,   -1,  301,   -1,  303,
   -1,  305,   -1,  307,   -1,  309,   -1,  311,   -1,  313,
  314,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  327,   -1,  329,  330,   -1,  332,  333,
  334,   -1,  336,   -1,   -1,   -1,   -1,   -1,  342,   -1,
  344,   -1,  346,  257,  258,  259,  260,  261,   -1,   -1,
  264,   -1,  266,   -1,  358,   -1,   -1,   -1,   -1,  273,
  274,   -1,  276,   -1,   -1,   -1,   -1,   -1,  282,   -1,
   -1,   -1,   -1,  287,  288,   -1,  290,   -1,   -1,   -1,
  294,  295,  296,   -1,   -1,  299,   -1,  301,   -1,  303,
   -1,  305,   -1,  307,   -1,  309,   -1,  311,   -1,  313,
  314,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  327,   -1,  329,  330,   -1,  332,  333,
  334,   -1,  336,   -1,   -1,   -1,   -1,   -1,  342,   -1,
  344,   -1,  346,  257,   -1,   -1,   -1,   -1,  262,  263,
   -1,  265,   -1,  267,  358,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,  277,  278,  279,  280,  281,   -1,  283,
  284,  285,  286,   -1,   -1,   -1,   -1,  291,   -1,  293,
   -1,   -1,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,   -1,  318,  319,  320,  321,  322,  323,
  324,  325,  326,   -1,  328,  329,  330,  331,  332,   -1,
  334,  335,  336,  337,  338,  339,  340,  341,   -1,  343,
  344,  345,  346,  347,   -1,   -1,   -1,   -1,   -1,  353,
  354,  257,  356,  357,   -1,   -1,  262,  263,   -1,  265,
   -1,  267,   -1,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,  277,  278,  279,  280,  281,   -1,  283,  284,  285,
  286,   -1,   -1,   -1,   -1,  291,   -1,  293,   -1,   -1,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,   -1,  318,  319,  320,  321,  322,  323,  324,  325,
  326,   -1,  328,  329,  330,  331,  332,   -1,  334,  335,
  336,  337,  338,  339,  340,  341,   -1,  343,  344,  345,
  346,  347,   -1,   -1,   -1,   -1,   -1,  353,  354,  257,
  356,  357,   -1,   -1,  262,  263,   -1,  265,   -1,  267,
   -1,   -1,  270,  271,  272,   -1,   -1,  275,   -1,  277,
  278,  279,  280,  281,   -1,  283,  284,  285,  286,   -1,
   -1,   -1,   -1,  291,   -1,  293,   -1,   -1,  296,  297,
  298,   -1,  300,  301,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,  316,   -1,
  318,  319,  320,  321,  322,  323,  324,  325,  326,   -1,
  328,  329,  330,  331,  332,   -1,  334,  335,  336,  337,
  338,  339,  340,  341,   -1,  343,  344,  345,  346,  347,
   -1,   -1,   -1,   -1,   -1,  353,  354,  257,  356,  357,
   -1,   -1,  262,  263,   -1,  265,   -1,  267,   -1,   -1,
  270,  271,  272,   -1,   -1,  275,   -1,  277,  278,  279,
  280,  281,   -1,  283,  284,  285,  286,   -1,   -1,   -1,
   -1,  291,   -1,  293,   -1,   -1,  296,  297,  298,   -1,
  300,  301,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,  316,   -1,  318,  319,
  320,  321,  322,  323,  324,  325,  326,   -1,  328,  329,
  330,  331,  332,   -1,  334,  335,  336,  337,  338,  339,
  340,  341,   -1,  343,  344,  345,  346,  347,   -1,   -1,
   -1,   -1,   -1,  353,  354,  257,  356,  357,   -1,   -1,
  262,  263,   -1,  265,   -1,  267,   -1,   -1,  270,  271,
  272,   -1,   -1,  275,   -1,  277,  278,  279,  280,  281,
   -1,  283,  284,  285,  286,   -1,   -1,   -1,   -1,  291,
   -1,  293,   -1,   -1,  296,  297,  298,   -1,  300,  301,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,   -1,  318,  319,  320,  321,
  322,  323,  324,  325,  326,   -1,  328,  329,  330,  331,
  332,   -1,  334,  335,  336,  337,  338,  339,  340,  341,
   -1,  343,  344,  345,  346,  347,   -1,   -1,   -1,   -1,
   -1,  353,  354,  257,  356,  357,   -1,   -1,  262,  263,
   -1,  265,   -1,  267,   -1,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,  277,  278,  279,  280,  281,   -1,  283,
  284,  285,  286,   -1,   -1,   -1,   -1,  291,   -1,  293,
   -1,   -1,  296,  297,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,   -1,  318,  319,  320,  321,  322,  323,
  324,  325,  326,   -1,  328,  329,  330,  331,  332,   -1,
  334,  335,  336,  337,  338,  339,  340,  341,   -1,   -1,
  344,  345,  346,  347,   -1,   -1,   -1,   -1,   -1,  353,
  354,  257,  356,  357,   -1,   -1,  262,  263,   -1,   -1,
   -1,  267,   -1,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,  277,  278,  279,  280,  281,   -1,  283,  284,  285,
  286,   -1,   -1,   -1,   -1,  291,   -1,  293,   -1,   -1,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,   -1,  318,  319,  320,  321,  322,  323,  324,  325,
  326,   -1,  328,  329,  330,  331,  332,   -1,  334,  335,
  336,  337,  338,  339,  340,  341,   -1,  343,  344,  345,
  346,  347,   -1,   -1,   -1,   -1,   -1,  353,  354,  257,
  356,  357,   -1,   -1,  262,  263,   -1,  265,   -1,  267,
   -1,   -1,  270,  271,  272,   -1,   -1,  275,   -1,  277,
  278,  279,  280,  281,   -1,  283,  284,  285,  286,   -1,
   -1,   -1,   -1,  291,   -1,  293,   -1,   -1,  296,  297,
  298,   -1,  300,  301,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,  316,   -1,
  318,  319,  320,  321,  322,  323,  324,  325,  326,   -1,
  328,  329,  330,  331,  332,   -1,  334,  335,  336,  337,
  338,  339,  340,  341,   -1,  343,  344,  345,  346,  347,
   -1,   -1,   -1,   -1,   -1,  353,  354,  257,  356,  357,
   -1,   -1,  262,  263,   -1,  265,   -1,  267,   -1,   -1,
  270,  271,  272,   -1,   -1,  275,   -1,  277,  278,  279,
  280,  281,   -1,  283,  284,  285,  286,   -1,   -1,   -1,
   -1,  291,   -1,  293,   -1,   -1,  296,  297,  298,   -1,
  300,  301,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,  316,   -1,  318,  319,
  320,  321,  322,  323,  324,  325,  326,   -1,  328,  329,
  330,  331,  332,   -1,  334,  335,  336,  337,  338,  339,
  340,  341,   -1,  343,  344,  345,  346,  347,   -1,   -1,
   -1,   -1,   -1,  353,  354,  257,  356,  357,   -1,   -1,
  262,  263,   -1,  265,   -1,  267,   -1,   -1,  270,  271,
  272,   -1,   -1,  275,   -1,  277,  278,  279,  280,  281,
   -1,  283,  284,  285,  286,   -1,   -1,   -1,   -1,  291,
   -1,  293,   -1,   -1,  296,  297,  298,   -1,  300,  301,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,   -1,  318,  319,  320,  321,
  322,  323,  324,  325,  326,   -1,  328,  329,  330,  331,
  332,   -1,  334,  335,  336,  337,  338,  339,  340,  341,
   -1,  343,  344,  345,  346,  347,   -1,   -1,   -1,   -1,
   -1,  353,  354,  257,  356,  357,   -1,   -1,  262,  263,
   -1,  265,   -1,  267,   -1,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,  277,  278,  279,  280,  281,   -1,  283,
  284,  285,  286,   -1,   -1,   -1,   -1,  291,   -1,  293,
   -1,   -1,  296,  297,  298,   -1,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,   -1,  318,  319,  320,  321,  322,  323,
  324,  325,  326,   -1,  328,  329,  330,  331,  332,   -1,
  334,  335,  336,  337,  338,  339,  340,  341,   -1,  343,
  344,  345,  346,  347,   -1,   -1,   -1,   -1,   -1,  353,
  354,  257,  356,  357,   -1,   -1,  262,  263,   -1,  265,
   -1,  267,   -1,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,  277,  278,  279,  280,  281,   -1,  283,  284,  285,
  286,   -1,   -1,   -1,   -1,  291,   -1,  293,   -1,   -1,
  296,  297,  298,   -1,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,   -1,  318,  319,  320,  321,  322,  323,  324,  325,
  326,   -1,  328,  329,  330,  331,  332,   -1,  334,  335,
  336,  337,  338,  339,  340,  341,   -1,  343,  344,  345,
  346,  347,   -1,   -1,   -1,   -1,   -1,  353,  354,  257,
  356,  357,   -1,   -1,  262,  263,   -1,  265,   -1,  267,
   -1,   -1,  270,  271,  272,   -1,   -1,  275,   -1,  277,
  278,  279,  280,  281,   -1,  283,  284,  285,  286,   -1,
   -1,   -1,   -1,  291,   -1,  293,   -1,   -1,  296,  297,
  298,   -1,  300,  301,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,  316,   -1,
  318,  319,  320,  321,  322,  323,  324,  325,  326,   -1,
  328,  329,  330,  331,  332,   -1,  334,  335,  336,  337,
  338,  339,  340,  341,   -1,  343,  344,  345,  346,  347,
   -1,   -1,   -1,   -1,   -1,  353,  354,  257,  356,  357,
   -1,   -1,  262,  263,   -1,  265,   -1,  267,   -1,   -1,
   -1,  271,  272,   -1,   -1,  275,   -1,  277,  278,  279,
  280,  281,   -1,  283,  284,  285,  286,   -1,   -1,   -1,
   -1,  291,   -1,  293,   -1,   -1,  296,  297,  298,   -1,
  300,  301,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,  316,   -1,  318,  319,
  320,  321,  322,  323,  324,  325,  326,   -1,  328,  329,
  330,  331,  332,   -1,  334,  335,  336,  337,  338,  339,
  340,  341,   -1,  343,  344,  345,  346,  347,   -1,   -1,
   -1,   -1,   -1,  353,  354,  257,  356,  357,   -1,   -1,
  262,  263,   -1,  265,   -1,  267,   -1,   -1,   -1,  271,
  272,   -1,   -1,  275,   -1,  277,  278,  279,  280,  281,
   -1,  283,  284,  285,  286,   -1,   -1,   -1,   -1,  291,
   -1,  293,   -1,   -1,  296,  297,  298,   -1,  300,  301,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,   -1,  318,  319,  320,  321,
  322,  323,  324,  325,  326,   -1,  328,  329,  330,  331,
  332,   -1,  334,  335,  336,  337,  338,  339,  340,  341,
   -1,  343,  344,  345,  346,  347,   -1,   -1,   -1,   -1,
   -1,  353,  354,  257,  356,  357,   -1,   -1,  262,  263,
   -1,  265,   -1,  267,   -1,   -1,   -1,  271,  272,   -1,
   -1,  275,   -1,  277,  278,  279,  280,  281,   -1,  283,
  284,  285,  286,   -1,   -1,   -1,   -1,  291,   -1,  293,
   -1,   -1,  296,  297,  298,   -1,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,   -1,  318,  319,  320,  321,  322,  323,
  324,  325,  326,   -1,  328,  329,  330,  331,  332,   -1,
  334,  335,  336,  337,  338,  339,  340,  341,   -1,  343,
  344,  345,  346,  347,   -1,   -1,   -1,   -1,   -1,  353,
  354,  257,  356,  357,   -1,   -1,  262,  263,   -1,  265,
   -1,  267,   -1,   -1,   -1,  271,  272,   -1,   -1,  275,
   -1,  277,  278,  279,  280,  281,   -1,  283,  284,  285,
  286,   -1,   -1,   -1,   -1,  291,   -1,  293,   -1,   -1,
  296,  297,  298,   -1,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,   -1,  318,  319,  320,  321,  322,  323,  324,  325,
  326,   -1,  328,  329,  330,  331,  332,   -1,  334,  335,
  336,  337,  338,  339,  340,  341,   -1,  343,  344,  345,
  346,  347,   -1,   -1,   -1,   -1,   -1,  353,  354,  257,
  356,  357,   -1,   -1,  262,  263,   -1,  265,   -1,  267,
   -1,   -1,  270,   -1,  272,   -1,   -1,  275,   -1,  277,
  278,  279,  280,  281,   -1,  283,  284,  285,  286,   -1,
   -1,   -1,   -1,  291,   -1,  293,   -1,   -1,  296,  297,
  298,   -1,  300,  301,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,  316,   -1,
  318,  319,  320,  321,  322,  323,  324,  325,  326,   -1,
  328,  329,  330,  331,  332,   -1,  334,  335,  336,  337,
  338,  339,  340,  341,   -1,  343,  344,  345,  346,  347,
   -1,   -1,   -1,   -1,   -1,  353,  354,  257,  356,  357,
   -1,   -1,  262,  263,   -1,  265,   -1,  267,   -1,   -1,
  270,  271,  272,   -1,   -1,  275,   -1,  277,  278,  279,
  280,  281,   -1,  283,  284,  285,  286,   -1,   -1,   -1,
   -1,  291,   -1,  293,   -1,   -1,   -1,  297,  298,  299,
  300,  301,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,  316,   -1,  318,  319,
  320,  321,  322,  323,  324,  325,  326,   -1,  328,   -1,
   -1,  331,  332,   -1,  334,  335,  336,  337,  338,  339,
  340,  341,   -1,  343,  344,  345,  346,  347,   -1,   -1,
   -1,   -1,   -1,  353,  354,  257,  356,  357,   -1,   -1,
  262,  263,   -1,  265,   -1,  267,   -1,   -1,  270,  271,
  272,   -1,   -1,  275,   -1,  277,  278,  279,  280,  281,
   -1,  283,  284,  285,  286,   -1,   -1,   -1,   -1,  291,
   -1,  293,   -1,   -1,  296,  297,  298,  299,  300,  301,
  302,  303,  304,   -1,  306,   -1,  308,   -1,  310,   -1,
  312,  313,  314,  315,  316,   -1,  318,  319,  320,  321,
  322,  323,  324,  325,  326,   -1,  328,  329,  330,  331,
  332,   -1,  334,  335,  336,  337,  338,  339,  340,  341,
   -1,  343,  344,  345,  346,  347,   -1,   -1,   -1,   -1,
   -1,  353,  354,  257,  356,  357,   -1,   -1,  262,  263,
   -1,  265,   -1,  267,   -1,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,  277,  278,  279,  280,  281,   -1,  283,
  284,  285,  286,   -1,   -1,   -1,   -1,  291,   -1,  293,
   -1,   -1,  296,   -1,  298,  299,  300,   -1,  302,   -1,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
   -1,  315,  316,   -1,  318,  319,  320,  321,  322,  323,
  324,  325,  326,   -1,  328,  329,  330,  331,  332,   -1,
  334,  335,  336,  337,  338,  339,  340,  341,   -1,  343,
  344,  345,  346,  347,   -1,   -1,   -1,   -1,   -1,  353,
  354,  257,  356,  357,   -1,   -1,  262,  263,   -1,  265,
   -1,  267,   -1,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,  277,  278,  279,  280,  281,   -1,  283,  284,  285,
  286,   -1,   -1,   -1,   -1,  291,   -1,  293,   -1,   -1,
  296,  297,  298,  299,  300,  301,  302,  303,  304,   -1,
  306,   -1,  308,   -1,  310,   -1,  312,  313,  314,  315,
  316,   -1,  318,  319,  320,  321,  322,  323,  324,  325,
  326,   -1,  328,  329,  330,  331,  332,   -1,  334,  335,
  336,  337,  338,  339,  340,  341,   -1,  343,  344,  345,
  346,  347,   -1,   -1,   -1,   -1,   -1,  353,  354,  257,
  356,  357,   -1,   -1,  262,  263,   -1,  265,   -1,  267,
   -1,   -1,  270,  271,  272,   -1,   -1,  275,   -1,  277,
  278,  279,  280,  281,   -1,  283,  284,  285,  286,   -1,
   -1,   -1,   -1,  291,   -1,  293,   -1,   -1,  296,  297,
  298,  299,  300,  301,  302,  303,  304,   -1,  306,   -1,
  308,   -1,  310,   -1,  312,  313,  314,  315,  316,   -1,
  318,  319,  320,  321,  322,  323,  324,  325,  326,   -1,
  328,  329,  330,  331,  332,   -1,  334,  335,  336,  337,
  338,  339,  340,  341,   -1,  343,  344,  345,  346,  347,
   -1,   -1,   -1,   -1,   -1,  353,  354,  257,  356,  357,
   -1,   -1,  262,  263,   -1,  265,   -1,  267,   -1,   -1,
  270,  271,  272,   -1,   -1,  275,   -1,  277,  278,  279,
  280,  281,   -1,  283,  284,  285,  286,   -1,   -1,   -1,
   -1,  291,   -1,  293,   -1,   -1,  296,  297,  298,  299,
  300,  301,  302,  303,  304,   -1,  306,   -1,  308,   -1,
  310,   -1,  312,  313,  314,  315,  316,   -1,  318,  319,
  320,  321,  322,  323,  324,  325,  326,   -1,  328,  329,
  330,  331,  332,   -1,  334,  335,  336,  337,  338,  339,
  340,  341,   -1,  343,  344,  345,  346,  347,   -1,   -1,
   -1,   -1,   -1,  353,  354,  257,  356,  357,   -1,   -1,
  262,  263,   -1,  265,   -1,  267,   -1,   -1,  270,  271,
  272,   -1,   -1,  275,   -1,  277,  278,  279,  280,  281,
   -1,  283,  284,  285,  286,   -1,   -1,   -1,   -1,  291,
   -1,  293,   -1,   -1,  296,  297,  298,  299,  300,  301,
  302,  303,  304,   -1,  306,   -1,  308,   -1,  310,   -1,
  312,  313,  314,  315,  316,   -1,  318,  319,  320,  321,
  322,  323,  324,  325,  326,   -1,  328,  329,  330,  331,
  332,   -1,  334,  335,  336,  337,  338,  339,  340,  341,
   -1,  343,  344,  345,  346,  347,   -1,   -1,   -1,   -1,
   -1,  353,  354,  257,  356,  357,   -1,   -1,  262,  263,
   -1,  265,   -1,  267,   -1,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,  277,  278,  279,  280,  281,   -1,  283,
  284,  285,  286,   -1,   -1,   -1,   -1,  291,   -1,  293,
   -1,   -1,  296,  297,  298,  299,  300,  301,  302,  303,
  304,   -1,  306,   -1,  308,   -1,  310,   -1,  312,  313,
  314,  315,  316,   -1,  318,  319,  320,  321,  322,  323,
  324,  325,  326,   -1,  328,  329,  330,  331,  332,   -1,
  334,  335,  336,  337,  338,  339,  340,  341,   -1,  343,
  344,  345,  346,  347,   -1,   -1,   -1,   -1,   -1,  353,
  354,  257,  356,  357,   -1,   -1,  262,  263,   -1,  265,
   -1,  267,   -1,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,  277,  278,  279,  280,  281,   -1,  283,  284,  285,
  286,   -1,   -1,   -1,   -1,  291,   -1,  293,   -1,   -1,
  296,  297,  298,  299,  300,  301,  302,  303,  304,   -1,
  306,   -1,  308,   -1,  310,   -1,  312,  313,  314,  315,
  316,   -1,  318,  319,  320,  321,  322,  323,  324,  325,
  326,   -1,  328,  329,  330,  331,  332,   -1,  334,  335,
  336,  337,  338,  339,  340,  341,   -1,  343,  344,  345,
  346,  347,   -1,   -1,   -1,   -1,   -1,  353,  354,  257,
  356,  357,   -1,   -1,  262,  263,   -1,  265,   -1,  267,
   -1,   -1,  270,  271,  272,   -1,   -1,  275,   -1,  277,
  278,  279,  280,  281,   -1,  283,  284,  285,  286,   -1,
   -1,   -1,   -1,  291,   -1,  293,   -1,   -1,  296,   -1,
  298,  299,  300,   -1,  302,   -1,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,   -1,  315,  316,   -1,
  318,  319,  320,  321,  322,  323,  324,  325,  326,   -1,
  328,  329,  330,  331,  332,   -1,  334,  335,  336,  337,
  338,  339,  340,  341,   -1,  343,  344,  345,  346,  347,
   -1,   -1,   -1,   -1,   -1,  353,  354,  257,  356,  357,
   -1,   -1,  262,  263,   -1,  265,   -1,  267,   -1,   -1,
  270,  271,  272,   -1,   -1,  275,   -1,  277,  278,  279,
  280,  281,   -1,  283,  284,  285,  286,   -1,   -1,   -1,
   -1,  291,   -1,  293,   -1,   -1,  296,   -1,  298,  299,
  300,   -1,  302,   -1,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,   -1,  315,  316,   -1,  318,  319,
  320,  321,  322,  323,  324,  325,  326,   -1,  328,  329,
  330,  331,  332,   -1,  334,  335,  336,  337,  338,  339,
  340,  341,   -1,  343,  344,  345,  346,  347,   -1,   -1,
   -1,   -1,   -1,  353,  354,  257,  356,  357,   -1,   -1,
  262,  263,   -1,  265,   -1,  267,   -1,   -1,  270,  271,
  272,   -1,   -1,  275,   -1,  277,  278,  279,  280,  281,
   -1,  283,  284,  285,  286,   -1,   -1,   -1,   -1,  291,
   -1,  293,   -1,   -1,  296,   -1,  298,  299,  300,   -1,
  302,   -1,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,   -1,  315,  316,   -1,  318,  319,  320,  321,
  322,  323,  324,  325,  326,   -1,  328,  329,  330,  331,
  332,   -1,  334,  335,  336,  337,  338,  339,  340,  341,
   -1,  343,  344,  345,  346,  347,   -1,   -1,   -1,   -1,
   -1,  353,  354,  257,  356,  357,   -1,   -1,  262,  263,
   -1,  265,   -1,  267,   -1,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,  277,  278,  279,  280,  281,   -1,  283,
  284,  285,  286,   -1,   -1,   -1,   -1,  291,   -1,  293,
   -1,   -1,  296,   -1,  298,  299,  300,   -1,  302,   -1,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
   -1,  315,  316,   -1,  318,  319,  320,  321,  322,  323,
  324,  325,  326,   -1,  328,  329,  330,  331,  332,   -1,
  334,  335,  336,  337,  338,  339,  340,  341,   -1,  343,
  344,  345,  346,  347,   -1,   -1,   -1,   -1,   -1,  353,
  354,  257,  356,  357,   -1,   -1,  262,  263,   -1,  265,
   -1,  267,   -1,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,  277,  278,  279,  280,  281,   -1,  283,  284,  285,
  286,   -1,   -1,   -1,   -1,  291,   -1,  293,   -1,   -1,
  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,   -1,  314,  315,
  316,   -1,  318,  319,  320,  321,  322,  323,  324,  325,
  326,   -1,  328,  329,  330,  331,  332,   -1,  334,  335,
   -1,  337,  338,  339,  340,   -1,   -1,  343,   -1,  345,
   -1,  347,   -1,   -1,   -1,   -1,   -1,  353,  354,  257,
  356,  357,   -1,   -1,  262,  263,   -1,  265,   -1,  267,
   -1,   -1,  270,  271,  272,   -1,   -1,  275,   -1,  277,
  278,  279,  280,  281,   -1,  283,  284,  285,  286,   -1,
   -1,   -1,   -1,  291,   -1,  293,   -1,   -1,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,  316,   -1,
   -1,  319,   -1,  321,   -1,   -1,  324,   -1,  326,   -1,
  328,  329,  330,  331,   -1,   -1,   -1,  335,  336,  337,
  338,  339,  340,  341,   -1,  343,  344,  345,  346,  347,
   -1,   -1,   -1,   -1,   -1,  353,  354,  257,  356,  357,
   -1,   -1,  262,  263,   -1,  265,   -1,  267,   -1,   -1,
  270,  271,  272,   -1,   -1,  275,   -1,  277,  278,  279,
  280,  281,   -1,  283,  284,  285,  286,   -1,  257,   -1,
   -1,  291,   -1,  262,   -1,   -1,  296,  297,  267,  299,
   -1,  301,   -1,  303,   -1,  305,  275,  307,  277,  309,
  279,  311,   -1,  313,  314,   -1,   -1,  286,  318,   -1,
  320,   -1,  322,  323,   -1,  325,   -1,   -1,   -1,  329,
  330,   -1,  332,   -1,  334,   -1,  336,  337,  338,  339,
  340,  341,   -1,  343,  344,  345,  346,  347,   -1,   -1,
   -1,   -1,   -1,  353,  354,   -1,   -1,  357,  262,  263,
   -1,  265,   -1,  267,   -1,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,  277,  278,  279,  280,  281,   -1,  283,
  284,  285,  286,   -1,  353,  354,   -1,  291,  357,  293,
   -1,   -1,   -1,  297,  298,   -1,  300,   -1,  302,   -1,
  304,   -1,  306,   -1,  308,   -1,  310,   -1,  312,   -1,
   -1,  315,  316,   -1,  318,  319,  320,  321,  322,  323,
  324,  325,  326,   -1,  328,   -1,   -1,  331,   -1,   -1,
   -1,  335,   -1,  337,  338,  339,  340,  341,   -1,  343,
   -1,  345,   -1,  347,   -1,   -1,   -1,   -1,   -1,  353,
  354,  293,  356,  357,   -1,   -1,  298,   -1,  300,   -1,
  302,   -1,  304,   -1,  306,   -1,  308,   -1,  310,   -1,
  312,   -1,   -1,  315,  316,   -1,   -1,  319,   -1,  321,
   -1,   -1,  324,   -1,  326,   -1,  328,   -1,   -1,  331,
  171,   -1,   -1,  335,  175,  176,  177,  178,  179,  180,
  181,  182,  183,  184,  185,  186,  187,  188,  189,  190,
  191,  192,   -1,   -1,  356,
  ]
$define YYFINAL 2
$define YYMAXTOKEN 359
  yyname := [
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"IDENT","INTLIT","REALLIT",
"STRINGLIT","CSETLIT","EOFX","ABSTRACT","BREAK","BY","CASE","CLASS","CRITICAL",
"DEFAULT","DO","ELSE","END","EVERY","FAIL","GLOBAL","IF","IMPORT","CONSTRUCTOR",
"LINK","PRIVATE","METHOD","NEXT","OF","PUBLIC","READ","RECORD","REPEAT",
"RETURN","STATIC","SUSPEND","THEN","THREAD","TO","UNTIL","WHILE","BANG","MOD",
"AUGMOD","AND","AUGAND","STAR","AUGSTAR","INTER","AUGINTER","PLUS","AUGPLUS",
"UNION","AUGUNION","MINUS","AUGMINUS","DIFF","AUGDIFF","DOT","SLASH","AUGSLASH",
"ASSIGN","INVASSIGN","LTH","AUGLTH","LTHE","AUGLTHE","EQ","GTH","AUGGTH","GTHE",
"AUGGTHE","QMARK","AUGQMARK","BACKSLASH","CARET","AUGCARET","BAR","TILDE","NE",
"AUGNE","LPAREN","RPAREN","PCOLON","COMMA","MCOLON","COLON","COLONCOLON",
"SEMICOL","LBRACK","RBRACK","LBRACE","RBRACE","DOLLAR","SND","SNDBK","RCV",
"RCVBK","CONST","TOPIC","FUNK","CONASSIGN","STORE","AT","CREATE",
  ]
  yyrule := [
"$accept : program",
"program : decls EOFX",
"decls :",
"decls : decls decl semiOptional",
"decl : record",
"decl : global",
"decl : link",
"decl : import",
"decl : classdef",
"decl : invocDef",
"decl : fact",
"constructor :",
"constructor : CONSTRUCTOR locals methbody",
"constructor : CONSTRUCTOR LPAREN arglist RPAREN locals methbody",
"classdef : classhead locals methods constructor END",
"classhead : storeFlag CLASS IDENT supers LPAREN arglist RPAREN",
"classhead : storeFlag CLASS IDENT supers",
"supers :",
"supers : COLON IDENT supers",
"supers : COLON packageref supers",
"packageref : IDENT COLONCOLON IDENT",
"packageref : COLONCOLON expr",
"methods :",
"methods : meth methods",
"methods : locals SEMICOL methods",
"methods : record methods",
"methods : invocDef methods",
"methods : fact methods",
"semiOptional :",
"semiOptional : SEMICOL",
"import : IMPORT lnklist",
"link : LINK lnklist",
"lnklist : lnkfile",
"lnklist : lnklist COMMA lnkfile",
"lnkfile : IDENT",
"lnkfile : STRINGLIT",
"global : GLOBAL idlist",
"global : CONST constlist",
"global : TOPIC idlist",
"constlist : constdef",
"constlist : constlist COMMA constdef",
"constdef : IDENT ASSIGN literal",
"record : storeFlag RECORD IDENT LPAREN fldlist RPAREN",
"storeFlag :",
"storeFlag : STORE",
"$$1 :",
"invocDef : IDENT INVASSIGN query $$1 IDENT INVASSIGN fact",
"invocDef : IDENT function",
"invocDef : IDENT INVASSIGN LBRACE exprlist RBRACE",
"fact : IDENT LPAREN exprlist RPAREN semiOptional",
"query : LPAREN arglist RPAREN semiOptional LBRACE exprlist RBRACE",
"query : LPAREN arglist RPAREN semiOptional IDENT LPAREN exprlist RPAREN",
"function : FUNK LPAREN fldlist RPAREN INVASSIGN expr",
"fldlist :",
"fldlist : idlist",
"meth : ABSTRACT methhead",
"meth : methhead locals methbody END",
"methhead : METHOD IDENT LPAREN arglist RPAREN",
"arglist :",
"arglist : parmlist",
"arglist : parmlist LBRACK RBRACK",
"idlist : IDENT",
"idlist : idlist COMMA IDENT",
"parmlist : arg",
"parmlist : parmlist COMMA arg",
"arg : IDENT",
"arg : IDENT COLON IDENT",
"arg : IDENT COLON literal",
"arg : IDENT COLON IDENT COLON literal",
"locals :",
"locals : locals retentions idlist semiOptional",
"retentions : PRIVATE staticOption",
"retentions : PUBLIC staticOption",
"retentions : READ staticOption",
"staticOption :",
"staticOption : STATIC",
"methbody :",
"methbody : nexpr SEMICOL methbody",
"nexpr :",
"nexpr : expr",
"expr : expr1",
"expr : expr AND expr1",
"expr1 : expr2",
"expr1 : expr2 ASSIGN expr1",
"expr1 : invocDef",
"expr1 : expr2 CONASSIGN expr1",
"expr1 : expr2 AUGDIFF expr1",
"expr1 : expr2 AUGUNION expr1",
"expr1 : expr2 AUGPLUS expr1",
"expr1 : expr2 AUGMINUS expr1",
"expr1 : expr2 AUGSTAR expr1",
"expr1 : expr2 AUGINTER expr1",
"expr1 : expr2 AUGSLASH expr1",
"expr1 : expr2 AUGMOD expr1",
"expr1 : expr2 AUGCARET expr1",
"expr1 : expr2 AUGGTHE expr1",
"expr1 : expr2 AUGGTH expr1",
"expr1 : expr2 AUGLTHE expr1",
"expr1 : expr2 AUGLTH expr1",
"expr1 : expr2 AUGNE expr1",
"expr1 : expr2 AUGQMARK expr1",
"expr1 : expr2 AUGAND expr1",
"expr2 : expr3",
"expr2 : expr2 TO expr3",
"expr2 : expr2 TO expr3 BY expr3",
"expr3 : expr4",
"expr3 : expr4 BAR expr3",
"expr4 : expr5",
"expr4 : expr4 EQ expr5",
"expr4 : expr4 GTHE expr5",
"expr4 : expr4 GTH expr5",
"expr4 : expr4 LTHE expr5",
"expr4 : expr4 LTH expr5",
"expr4 : expr4 NE expr5",
"expr5 : expr7",
"expr5 : expr5 PLUS expr7",
"expr5 : expr5 DIFF expr7",
"expr5 : expr5 UNION expr7",
"expr5 : expr5 MINUS expr7",
"expr7 : expr8",
"expr7 : expr7 STAR expr8",
"expr7 : expr7 INTER expr8",
"expr7 : expr7 SLASH expr8",
"expr7 : expr7 MOD expr8",
"expr8 : expr9",
"expr8 : expr9 CARET expr8",
"expr9 : expr10",
"expr9 : expr9 BACKSLASH expr10",
"expr9 : expr9 BANG expr10",
"expr10 : expr11",
"expr10 : AT expr10",
"expr10 : BAR expr10",
"expr10 : DOT expr10",
"expr10 : BANG expr10",
"expr10 : DIFF expr10",
"expr10 : PLUS expr10",
"expr10 : STAR expr10",
"expr10 : SLASH expr10",
"expr10 : CARET expr10",
"expr10 : INTER expr10",
"expr10 : TILDE expr10",
"expr10 : MINUS expr10",
"expr10 : NE expr10",
"expr10 : UNION expr10",
"expr10 : QMARK expr10",
"expr10 : BACKSLASH expr10",
"expr11 : literal",
"expr11 : section",
"expr11 : return",
"expr11 : if",
"expr11 : case",
"expr11 : while",
"expr11 : until",
"expr11 : every",
"expr11 : repeat",
"expr11 : IDENT",
"expr11 : NEXT",
"expr11 : BREAK nexpr",
"expr11 : LPAREN exprlist RPAREN",
"expr11 : LBRACE compound RBRACE",
"expr11 : LBRACK exprlist RBRACK",
"expr11 : expr11 LBRACK exprlist RBRACK",
"expr11 : expr11 LBRACE RBRACE",
"expr11 : expr11 LBRACE pdcolist RBRACE",
"expr11 : expr11 LPAREN exprlist RPAREN",
"expr11 : expr11 COLON LPAREN exprlist RPAREN",
"expr11 : expr11 DOT IDENT",
"expr11 : expr11 DOT packageref",
"expr11 : packageref",
"expr11 : expr11 DOT CONSTRUCTOR",
"expr11 : AND FAIL",
"expr11 : AND IDENT",
"while : WHILE expr",
"while : WHILE expr DO expr",
"until : UNTIL expr",
"until : UNTIL expr DO expr",
"every : EVERY expr",
"every : EVERY expr DO expr",
"repeat : REPEAT expr",
"return : FAIL",
"return : RETURN nexpr",
"return : SUSPEND nexpr",
"return : SUSPEND expr DO expr",
"if : IF expr THEN expr",
"if : IF expr THEN expr ELSE expr",
"case : CASE expr OF LBRACE caselist RBRACE",
"caselist : cclause",
"caselist : caselist SEMICOL cclause",
"cclause : DEFAULT COLON expr",
"cclause : expr COLON expr",
"exprlist : nexpr",
"exprlist : exprlist COMMA nexpr",
"pdcolist : nexpr",
"pdcolist : pdcolist COMMA nexpr",
"literal : INTLIT",
"literal : REALLIT",
"literal : STRINGLIT",
"literal : CSETLIT",
"section : expr11 LBRACK expr sectop expr RBRACK",
"sectop : COLON",
"sectop : PCOLON",
"sectop : MCOLON",
"compound : nexpr",
"compound : nexpr SEMICOL compound",
"program : error decls EOFX",
"expr : error",
  ]

end

#####################################################################
#####################################################################
invocable all    # need to look up semantic actions by name

global yytext    # user variable to return contextual strings
global yyval     # used to return semantic vals from action routines
global yylval    # the 'lval' (result) I got from yylex()
global yydebug   # (boolean) do I want debug output?
global yynerrs   # (integer) number of errors so far
global yyerrflag # (integer) was there an error?
global yychar    # (integer) the current working character
global action    # maps an integer to a semantic action procedure

global yylhs
global yylen
global yydefred
global yydgoto
global yysindex
global yyrindex
global yygindex
global yytable
global yycheck
global yyname
global yyrule

global statestk         # state stack
global valstk           # value stack
################################################################
# procedure: init_stacks : allocate and prepare stacks
################################################################
procedure init_stacks()
  local i
  statestk := []
  valstk := []
  yyval  := 0 
  yylval := 0 
  action := list(1000, action_null)  # remove hard coded 1000 later
  every i := 1 to 1000 do action[i] := proc("action_" || i)
end

#line 1182 "scoelgram.y"

global tokens

#
# This procedure parenthesizes the right-hand side of an expression,
# apparently to simplify or correct any precedence or semantic issues
# when passing the code on to iconc.
#
procedure parenthesize_assign(nd)
	local rhs

	if /iconc then return nd
	if not (*nd.children = 3) then return nd
	rhs := nd.children[3]
	if (not(type(rhs) == "treenode")) then return nd
	if (not(rhs.label == "invoke")) then return nd
	rhs := node("Paren", "(", rhs, ")")
	nd.children[3] := rhs
	return nd
end

#procedure FieldRef(lhs, dot, rhs)
#	if /iconc | (type(lhs) ~== "treenode") then return Field(lhs, dot, rhs)

#	if (lhs.label == "invoke") then {
#		tmpcount +:= 1;
#		return node("Paren", "(",
#				node("assign", "__" || tmpcount, " := ", lhs, ")", "& "),
#				node("invoke", Field("__" || tmpcount, ".", rhs))
#			);
#	}
#	return Field(lhs, dot, rhs)
#end

procedure InvocationNode(args[])
	tmpcount +:= 1
	if type(args[1]) == "token" & (args[1].tok = IDENT) then {
		n1 := args[1]
		lparen := copy(args[1])
		lparen.tok := LPAREN
		lparen.s := "("
	} else {
		n1 := node("Paren","(",node("assign","__"||tmpcount,":=",args[1]),")")
		if lparen := Clone1stToken(args[1]) then {
			lparen.tok := LPAREN
			lparen.s := "("
		} else lparen := "("
	}
	if *args = 6 then {
		return node("Paren",lparen,node("invoke",
				# iconc uses no __m business
				(if /iconc then Field(Field(n1, ".", "__m"), "." , args[3]) 
						else Field(n1, ".", args[3])),

				args[4], node("exprlist",
				if n1 === args[1] then args[1] else "__"||tmpcount,
				if args[5] === EmptyNode then EmptyNode else ",",args[5]),args[6])
				,")")
	} else {
		if /iconc then
			return  node("Paren",lparen,node("invoke",Field(Field(
					Field(n1,".", "__m"),
					"." , args[3]),".",args[5]),
					args[6], node("exprlist",
					if n1 === args[1] then args[1] else "__"||tmpcount,
					if args[7] === EmptyNode then EmptyNode else ",",args[7]),args[8])
					,")")
		else return SuperMethodInvok ! args
	}
end

procedure SimpleInvocation(expr11, lparen, args, rparen)
	if /iconc then return node("invoke", expr11, lparen, args, rparen)
	
	if ((type(expr11) == "token") & (expr11.tok = IDENT)) then {
		return node("invoke", expr11, lparen, args, rparen)
	}

	if (type(expr11) == "treenode") then {
		case expr11.label of {
			"field": {
				#
				# need to examine lhs of field-ref to determine
				# whether we need to decompose the expr11 further...
				#
				if (type(expr11.children[1]) == "treenode") then {
					tmpcount +:= 1;
					n1 := node("Paren", "(", node("assign", "__"||tmpcount, ":=",
							expr11.children[1]), ")")
					return node("exprlist", "(", n1, "&",
							node("invoke", Field("__"||tmpcount, ".", expr11.children[3]),
							lparen, args, rparen), ")")
				} else {
					return node("invoke", expr11, lparen, args, rparen)
				}
			}
			default: {
				return node("invoke", expr11, lparen, args, rparen)
			}
		}
	}
   return node("invoke", expr11, lparen, args, rparen)
end

procedure SuperMethodInvok(args[])
	tmpcount +:= 1
	if (type(args[1]) == "token") & (args[1].tok = IDENT) then {
		n1 := args[1]
		lparen := copy(args[1])
		lparen.tok := LPAREN
		lparen.s := "("
	} else {
		n1 := node("Paren","(",node("assign","__"||tmpcount,":=",args[1]),")")
		if lparen := Clone1stToken(args[1]) then {
			lparen.tok := LPAREN
			lparen.s := "("
		} else lparen := "("
	}

	args[3].s := mangle_class_sym(args[3].s)
	args[3].s ||:= "__oprec"
	return node("exprlist", "(", n1, ")", " & ",
			node("Paren", lparen, node("invoke",
			Field(args[3], ".", args[5]),
			args[6], node("exprlist",
			if n1 === args[1] then args[1] else "__" || tmpcount,
			if args[7] === EmptyNode then EmptyNode else ",", args[7]), args[8]),
			")", ))
end

procedure isloco(node, s)
	case type(node) of {
		"treenode": {
			if *node.children > 0 then return isloco(!node.children, s)
		}
		"token" : {
			if (node.tok = IDENT) & (node.s == s) then return
		}
	}
end

procedure buildtab_from_cclause(n, args)
	if type(n) ~== "treenode" then stop("bad table literal")
	comma := copy(n.children[2])
	comma.tok := COMMA
	comma.s := ","
	case n.label of {
		"cclause0": {
			if *args.children > 0 then push(args.children, comma)
			push(args.children, n.children[3])
		}
		"cclause1": {
			if *args.children > 0 then push(args.children, comma)
			push(args.children, n.children[3])
			push(args.children, comma)
			push(args.children, n.children[1])
		}
	}
end

# build a tree equivalent to
# {__tmp :=[]; every put(__tmp, expr); if __tmp>0 then __tmp}
# The enclosing procedure/method also needs to declare this temp var;
# see AppendListCompTemps
#
procedure ListComp(expr)
	local tmp
	tmpcount +:= 1
	tmp := "__" || tmpcount
	return node("ListComp",
			"{", string(tmp), " :=[]; every put(" || tmp || ", ",
			expr,
			"); if *" || tmp || ">0 then " || tmp || "}")
end

#
# AppendListCompTemps(localdecls, methbody) - at the procedure/method
# outermost level, we may need to add some declarations based on whats
# in the methbody. If there are changes to the declared lcls section,
# returns changed locals.
#
procedure AppendListCompTemps(lcls, body)
	# if there is, in the methbody, a list of varnames to declare
	if *\(ltmps := ListCompTemps(body)) > 0 then {
		# make a varlist containing ltmps
		if *ltmps > 1 then {
			vl := token(IDENT, ltmps[1], 0, 0, "lambda.icn")
			every i := 2 to *ltmps do vl := node("varlist3", vl, ",",
					token(IDENT, ltmps[i], 0, 0, "lambda.icn"))
		} else {
			# the varlist will just be an IDENT
			vl := token(IDENT, ltmps[1], 0, 0, "lambda.icn")
		}
		if (lcls === EmptyNode) |
				(type(lcls)==="treenode" & lcls.label==("locals2"|"locals3")) then {
			return node("locals2", lcls, "local", vl, ";")
		} else
			write(&errout, "don't know what to do with ", image(lcls))
	}
end

#
# ListCompTemps(n) - lower level temp. var extraction from proc body.
# returns list of strings containing temp. variables from list comprehension
# L
procedure ListCompTemps(n)
	local LCT
	if type(n) == "treenode" then {
		if n.label=="ListComp" then {
			LCT := [n.children[2]]
			LCT |||:= ListCompTemps(n.children[4])
			return LCT
		} else if LCT := ListCompTemps(n.children[k := 1 to *(n.children)]) then {
			every kk := k+1 to *(n.children) do {
				LCT |||:= ListCompTemps(n.children[kk])
			}
			return LCT
		}
	}
end

procedure tablelit(lb, cl, rb)
local tabid, lp, rp, args
	args := node("elst1")
	write("I am a tablelit, cl is ", image(cl.label))
	while type(cl)=="treenode" & cl.label == "Caselist" do {
		buildtab_from_cclause(cl.children[3], args)
		cl := cl.children[1]
	}
	buildtab_from_cclause(cl, args)
	tabid := copy(lb); tabid.tok := IDENT; tabid.s := "table"
	lp := copy(lb); lp.tok := LPAREN; lp.s := "("
	rp := copy(rb); rp.tok := RPAREN; rp.s := ")"
	return node("invoke", tabid, lp, args, rp)
end
#line 1879 "scoelgram.icn"
$define YYACCEPT return 0
$define YYABORT return 1
################################################################
# procedure: yyparse : parse input and execute indicated items
################################################################
procedure yyparse()
  local yyn        # next next thing to do
  local yym        #
  local yystate    # current parsing state from state table
  local yys        # current token string
  local doaction   # set to 1 if there need to execute action
  local token      # current token

  if /yytable then init() 
  init_stacks() 
  yynerrs   := 0 
  yyerrflag := 0 
  yychar    := -1           # impossible char forces a read
  yystate   := 0            # initial state
  push(statestk, yystate)   # save it

  repeat { # until parsing is done, either correctly, or w/error
    doaction := 1 

    ##### NEXT ACTION (from reduction table)
	yyn := yydefred[yystate+1]

    while yyn = 0 do {

      if yychar < 0 then {   # we want a char?
        yychar := yylex()    # get next token
        ##### ERROR CHECK ####
        if yychar < 0 then { # it it didn't work/error
          yychar := 0        # change it to default string (no -1!)
          if \yydebug = 1 then yylexdebug(yystate, yychar) 
          }
        } # yychar < 0
	  
      yyn := yysindex[yystate+1]  # get amount to shift by (shift index)

      if (yyn ~= 0)           & ((yyn +:= yychar) >= 0) & 
         (yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yychar) then {
		
        ##### NEXT STATE ####
        yystate := yytable[yyn+1] # we are in a new state
        push(statestk, yystate)   # save it
        push(valstk, yylval)      # push our lval as the input for next rule
        yychar := -1              # since we have 'eaten' a token, say we need another
        if yyerrflag > 0 then     # have we recovered an error?
           yyerrflag -:= 1        # give ourselves credit
        doaction := 0             # but don't process yet
        break                     # quit the yyn=0 loop
        }

    yyn := yyrindex[yystate+1]    # reduce

    if (yyn ~= 0)           & ((yyn +:= yychar) >= 0) &
       (yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yychar) then {
      # e reduced!
      yyn      := yytable[yyn+1] 
      doaction := 1  # get ready to execute
      break          # drop down to actions
      }
    else { #ERROR RECOVERY
      if yyerrflag == 0 then {
        (\yyerror | write)("syntax error") 
        yynerrs +:= 1 
      }
      if yyerrflag < 3 then {     # low error count?
        yyerrflag := 3 
        repeat { #do until break
          if *statestk < 1 then {  # check for under & overflow here
            (\yyerror | write)("stack underflow. aborting...")   # note lower case 's'
            return 1 
          }
          yyn := yysindex[statestk[1]] 
          if ((yyn ~= 0) & (yyn +:= YYERRCODE) >= 0 &
                    yyn <= YYTABLESIZE & yycheck[yyn+1] == YYERRCODE) then {
            yystate := yytable[yyn+1] 
            push(statestk, yystate) 
            push(valstk, yylval) 
            doaction := 0 
            break 
          }
          else {
            if *statestk = 0 then { # check for under & overflow here
              write("Stack underflow. aborting...") # capital 'S'
              return 1 
            }
            pop(statestk) 
            pop(valstk) 
            }
          }
        }
      else  # discard this token
        {
        if yychar = 0 then return 1  # yyabort
        if \yydebug = 1 then {
          yys := &null 
          if yychar <= YYMAXTOKEN then yys := yyname[yychar+1] 
          if integer(yys) & yys = 0 then yys := "illegal-symbol" 
          write("state ",  yystate, ", error recovery discards token ",
                yychar, " (", yys, ")") 
          }
        yychar := -1       # read another
        }
      } # end error recovery
      yyn := yydefred[yystate+1] 
    }# yyn = 0 loop

    if doaction = 0 then   # any reason not to proceed?
      next                 # skip action

    yym := yylen[yyn+1]    # get count of terminals on rhs
    yyval := valstk[yym]   # get current semantic value
    if arv := action[yyn]() then return arv # execute the semantic action

    ##### Now let's reduce... ####
    every 1 to yym do pop(statestk)# we just reduced yylen states
    yystate := statestk[1]        # get new state

    every 1 to yym do pop(valstk) # corresponding value drop
    yym := yylhs[yyn+1]           # select next TERMINAL(on lhs)
    if yystate = 0 & yym = 0 then {
                                  # done? 'rest' state and at first TERMINAL
      yystate := YYFINAL          # explicitly say we're done
      push(statestk, YYFINAL)     # and save it
      push(valstk, yyval)         # also save the semantic value of parsing
      if yychar < 0 then {        # we want another character?
        yychar := yylex()         # get next character
        if yychar < 0 then yychar := 0   #clean, if necessary
      }
      if yychar = 0 then break    # Good exit (if lex returns 0  -)
                                  # quit the loop--all DONE
    } # if yystate
    else {                        #else not done yet
      # get next state and push, for next yydefred[]
      yyn := yygindex[yym+1]        # find out where to go
      if (yyn ~= 0)           & ((yyn +:= yystate) >= 0) &
         (yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yystate) then {
        yystate := yytable[yyn+1]   # get new state
        }
      else {
        yystate := yydgoto[yym+1]   # else go to new defred
	     }
      push(statestk, yystate)       # going again, so push state & val...
      push(valstk, yyval)           # for next action
      }
    } # main loop

  return 0 # yyaccept!!
end

### end of procedure parse() ######################################

### start semantic actions ########################################

procedure action_null()
  #write("null action")
end

procedure action_1()
#line 283 "scoelgram.y"
	
		children := [valstk[2]]
		yyval := program_node(children)
	
end

procedure action_2()
#line 289 "scoelgram.y"
 
		yyval := EmptyNode 
	
end

procedure action_3()
#line 292 "scoelgram.y"

	   #if yynerrs = 0 then iwrites(&errout,".");
	   children := [valstk[3], valstk[2]]
	   yyval := decls_node(children)
	
end

procedure action_4()
#line 299 "scoelgram.y"
	
		children := [valstk[1]]
		yyval := decl_node(children)
	
end

procedure action_5()
#line 303 "scoelgram.y"
	
		children := [valstk[1]]
		yyval := decl_node(children)
	
end

procedure action_6()
#line 307 "scoelgram.y"
	
		children := [valstk[1]]
		yyval := decl_node(children)
	
end

procedure action_7()
#line 311 "scoelgram.y"
	
		children := [valstk[1]]
		yyval := decl_node(children)
	
end

procedure action_8()
#line 315 "scoelgram.y"
	
		children := [valstk[1]]
		yyval := decl_node(children)
	
end

procedure action_9()
#line 319 "scoelgram.y"
 
		children := [valstk[1]]
		yyval := methods_node(children) 
	
end

procedure action_10()
#line 323 "scoelgram.y"
 
		children := [valstk[1]]
		yyval := methods_node(children) 
	
end

procedure action_11()
#line 329 "scoelgram.y"
 
		yyval := EmptyNode 
	
end

procedure action_12()
#line 332 "scoelgram.y"

		children := [valstk[3], valstk[2], valstk[1]]
		yyval := constructor_node(2, children)
	
end

procedure action_13()
#line 336 "scoelgram.y"

		children := [valstk[6], valstk[5], valstk[4], valstk[3], valstk[2], valstk[1]]
		yyval := constructor_node(4, children)
	
end

procedure action_14()
#line 342 "scoelgram.y"

		children := [valstk[5], valstk[4], valstk[3], valstk[2], valstk[1]]
		yyval := class_node(children)
	
end

procedure action_15()
#line 348 "scoelgram.y"

		children := [valstk[7],valstk[6],valstk[5], valstk[4], "(",valstk[2],")"]
		yyval := classhead_node(children)
	
end

procedure action_16()
#line 352 "scoelgram.y"

		children := [valstk[4],valstk[3],valstk[2], valstk[1]]
		yyval := classhead_node(children)
	
end

procedure action_17()
#line 358 "scoelgram.y"
 
		yyval := EmptyNode 
	
end

procedure action_18()
#line 361 "scoelgram.y"
 
		children := [":", valstk[2], valstk[1]]
		yyval := supers_node(children) 
	
end

procedure action_19()
#line 365 "scoelgram.y"
 
		children := [":", valstk[2], valstk[1]]
		yyval := supers_node(children) 
	
end

procedure action_20()
#line 371 "scoelgram.y"
 
		children := [valstk[3],"::",valstk[1]]
		yyval := packageref_node(children) 
	
end

procedure action_21()
#line 375 "scoelgram.y"
 
		children := ["::",valstk[1]]
		yyval := packageref_node(children) 
	
end

procedure action_22()
#line 381 "scoelgram.y"
 
		yyval := EmptyNode 
	
end

procedure action_23()
#line 384 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := methods_node(children) 
	
end

procedure action_24()
#line 388 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := methods_node(children) 
	
end

procedure action_25()
#line 392 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := methods_node(children) 
	
end

procedure action_26()
#line 396 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := methods_node(children) 
	
end

procedure action_27()
#line 400 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := methods_node(children) 
	
end

procedure action_28()
#line 406 "scoelgram.y"

		yyval := semiOptional_node()
	
end

procedure action_29()
#line 409 "scoelgram.y"

		yyval := semiOptional_node()
	
end

procedure action_30()
#line 414 "scoelgram.y"

		children := [valstk[2],valstk[1]]
		yyval := import_node(children)
	
end

procedure action_31()
#line 420 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := link_node(children)
	
end

procedure action_32()
#line 426 "scoelgram.y"

		children := [valstk[1]]
		yyval := linklist_node(children)
	
end

procedure action_33()
#line 430 "scoelgram.y"
 
		children := [valstk[3],",",valstk[1]]
		yyval := linklist_node(children)
	
end

procedure action_34()
#line 436 "scoelgram.y"

		children := [valstk[1]]
		yyval := lnkfile_node(children)
	
end

procedure action_35()
#line 440 "scoelgram.y"

		children := [valstk[1]]
		yyval := lnkfile_node(children)
	
end

procedure action_36()
#line 446 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := global_node(children) 
	
end

procedure action_37()
#line 450 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := const_node(children) 
	
end

procedure action_38()
#line 454 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := topic_node(children) 
	
end

procedure action_39()
#line 460 "scoelgram.y"

		children := [valstk[1]]
		yyval := constlist_node(children)
	
end

procedure action_40()
#line 464 "scoelgram.y"

		children := [valstk[3], ",", valstk[1]]
		yyval := constlist_node(children)
	
end

procedure action_41()
#line 470 "scoelgram.y"

		children := [valstk[3], valstk[2], valstk[1]]
		yyval := constdef_node(children)
	
end

procedure action_42()
#line 476 "scoelgram.y"

		children := [valstk[6],valstk[5],valstk[4],valstk[3],valstk[2]]
		yyval := record_node(children)
	
end

procedure action_43()
#line 482 "scoelgram.y"
 
		yyval := EmptyNode 
	
end

procedure action_44()
#line 485 "scoelgram.y"

		children := [valstk[1]]
		yyval := store_node(children)
	
end

procedure action_45()
#line 491 "scoelgram.y"

		children := [valstk[3],":-",valstk[1]]
		yyval := ruleDef_node(children)
	
end

procedure action_46()
#line 495 "scoelgram.y"

		children := [valstk[7],":-",valstk[5]]
		yyval := ruleDef_node(children)
	
end

procedure action_47()
#line 499 "scoelgram.y"

		children := [valstk[2], valstk[1]]
		yyval := functionDef_node(children)
	
end

procedure action_48()
#line 503 "scoelgram.y"

		children := [valstk[5], ":-", "{", valstk[2], "}"]
		yyval := patternDef_node(children)
	
end

procedure action_49()
#line 509 "scoelgram.y"

		children := [valstk[5],valstk[4],valstk[3],valstk[2]]
		yyval := fact_node(children)
	
end

procedure action_50()
#line 515 "scoelgram.y"

		children := ["(", valstk[6], ")", ";", "{", valstk[2], "}"]
		yyval := query_node(children)
	
end

procedure action_51()
#line 519 "scoelgram.y"

		children := ["(", valstk[7], ")", ";", valstk[4], "(", valstk[2], ")"]
		yyval := query_node(children)
	
end

procedure action_52()
#line 525 "scoelgram.y"

		children := ["f", "(", valstk[4], ")", ":-", valstk[1]]
		yyval := function_node(children)
	
end

procedure action_53()
#line 530 "scoelgram.y"
 
		yyval := EmptyNode 
	
end

procedure action_54()
#line 533 "scoelgram.y"

		children := [valstk[1]]
		yyval := fldlist_node(children)
	
end

procedure action_55()
#line 539 "scoelgram.y"

		children := [valstk[2],valstk[1]]
		yyval := method_node(children)
	
end

procedure action_56()
#line 543 "scoelgram.y"

		children := [valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := method_node(children)
	
end

procedure action_57()
#line 549 "scoelgram.y"

		children := [valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := methhead_node(children)
	
end

procedure action_58()
#line 555 "scoelgram.y"
 
		yyval := EmptyNode 
	
end

procedure action_59()
#line 558 "scoelgram.y"
 
		children := [valstk[1]]
		yyval := arglist_node(children) 
	
end

procedure action_60()
#line 562 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := arglist_node(children) 
	
end

procedure action_61()
#line 568 "scoelgram.y"

		children := [valstk[1]]
		yyval := idlist_node(children)
	
end

procedure action_62()
#line 572 "scoelgram.y"
 
		children := [valstk[3],",",valstk[1]]
		yyval := idlist_node(children) 
	
end

procedure action_63()
#line 578 "scoelgram.y"

		children := [valstk[1]]
		yyval := parmlist_node(children) 
	
end

procedure action_64()
#line 582 "scoelgram.y"
 
		children := [valstk[3],",",valstk[1]]
		yyval := parmlist_node(children) 
	
end

procedure action_65()
#line 588 "scoelgram.y"

		children := [valstk[1]]
		yyval := arg_node(1, children)
	
end

procedure action_66()
#line 592 "scoelgram.y"
 
		children := [valstk[3], ":", valstk[1]]
		yyval := arg_node(2, children) 
	
end

procedure action_67()
#line 596 "scoelgram.y"
 
		children := [valstk[3], ":", valstk[1]]
		yyval := arg_node(3, children) 
	
end

procedure action_68()
#line 600 "scoelgram.y"
 
		children := [valstk[5], ":", valstk[3], ":", valstk[1]]
		yyval := arg_node(4, children) 
	
end

procedure action_69()
#line 606 "scoelgram.y"
 
		yyval := EmptyNode
	
end

procedure action_70()
#line 609 "scoelgram.y"
 
		children := [valstk[4],valstk[3],valstk[2],";"]
		yyval := locals_node(2, children)
	
end

procedure action_71()
#line 615 "scoelgram.y"
 
		children := [valstk[2], valstk[1]]
		yyval := local_node(children[1].string, children)
	
end

procedure action_72()
#line 619 "scoelgram.y"
 
		children := [valstk[2], valstk[1]]
		yyval := local_node(children[1].string, children)
	
end

procedure action_73()
#line 624 "scoelgram.y"
 
		children := [valstk[2], valstk[1]]
		yyval := local_node(children[1].string, children)
	
end

procedure action_74()
#line 630 "scoelgram.y"

	yyval := EmptyNode
	
end

procedure action_75()
#line 633 "scoelgram.y"
 
		children := [valstk[1]]
		yyval := static_node(children[1].string, children)
	
end

procedure action_76()
#line 638 "scoelgram.y"
 
		yyval := EmptyNode 
	
end

procedure action_77()
#line 641 "scoelgram.y"
 
		children := [valstk[3],";",valstk[1]]
		yyval := methbody_node(children)
	
end

procedure action_78()
#line 647 "scoelgram.y"
 
		yyval := EmptyNode 
	
end

procedure action_79()
#line 650 "scoelgram.y"

		children := [valstk[1]]
		yyval := expr_node(children)
	
end

procedure action_81()
#line 657 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := and_node(children) 
	
end

procedure action_83()
#line 664 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := assign_node(children)
	
end

procedure action_84()
#line 668 "scoelgram.y"

		children := [valstk[1]]
		yyval := invocAssign_node(children)
	
end

procedure action_85()
#line 672 "scoelgram.y"

		children := [valstk[3],valstk[2],valstk[1]]
		yyval := condAssign_node(children)
	
end

procedure action_86()
#line 676 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bdiffa_node(children)
	
end

procedure action_87()
#line 680 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Buniona_node(children)
	
end

procedure action_88()
#line 684 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bplusa_node(children)
	
end

procedure action_89()
#line 688 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bminusa_node(children)
	
end

procedure action_90()
#line 692 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bstara_node(children)
	
end

procedure action_91()
#line 696 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bintera_node(children)
	
end

procedure action_92()
#line 700 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bslasha_node(children)
	
end

procedure action_93()
#line 704 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bmoda_node(children)
	
end

procedure action_94()
#line 708 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bcareta_node(children)
	
end

procedure action_95()
#line 712 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Baugge_node(children)
	
end

procedure action_96()
#line 716 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bauggt_node(children)
	
end

procedure action_97()
#line 720 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Baugle_node(children)
	
end

procedure action_98()
#line 724 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bauglt_node(children)
	
end

procedure action_99()
#line 728 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Baugne_node(children)
	
end

procedure action_100()
#line 732 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Baugques_node(children)
	
end

procedure action_101()
#line 736 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Baugamper_node(children)
	
end

procedure action_103()
#line 743 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := to_node("to", children)
	
end

procedure action_104()
#line 747 "scoelgram.y"
 
		children := [valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := toby_node(children)
	
end

procedure action_106()
#line 754 "scoelgram.y"

		children := [valstk[3],valstk[2],valstk[1]]
		yyval := bar_node(children)
	
end

procedure action_108()
#line 761 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Beq_node(children)
	
end

procedure action_109()
#line 765 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bge_node(children)
	
end

procedure action_110()
#line 769 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bgt_node(children)
	
end

procedure action_111()
#line 773 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Ble_node(children)
	
end

procedure action_112()
#line 777 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Blt_node(children)
	
end

procedure action_113()
#line 781 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bne_node(children)
	
end

procedure action_115()
#line 788 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bplus_node(children)
	
end

procedure action_116()
#line 792 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bdiff_node(children)
	
end

procedure action_117()
#line 796 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bunion_node(children)
	
end

procedure action_118()
#line 800 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bminus_node(children)
	
end

procedure action_120()
#line 807 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bstar_node(children)
	
end

procedure action_121()
#line 811 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Binter_node(children)
	
end

procedure action_122()
#line 815 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bslash_node(children)
	
end

procedure action_123()
#line 819 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bmod_node(children)
	
end

procedure action_125()
#line 826 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bcaret_node(children)
	
end

procedure action_127()
#line 833 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := limit_node(children)
	
end

procedure action_128()
#line 837 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := apply_node(children)
	
end

procedure action_130()
#line 844 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := uat_node(children)
	
end

procedure action_131()
#line 848 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := ubar_node(children)
	
end

procedure action_132()
#line 852 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := udot_node(children)
	
end

procedure action_133()
#line 856 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := ubang_node(children)
	
end

procedure action_134()
#line 860 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := udiff_node(children)
	
end

procedure action_135()
#line 864 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := uplus_node(children)
	
end

procedure action_136()
#line 868 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := ustar_node(children)
	
end

procedure action_137()
#line 872 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := uslash_node(children)
	
end

procedure action_138()
#line 876 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := ucaret_node(children)
	
end

procedure action_139()
#line 880 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := uinter_node(children)
	
end

procedure action_140()
#line 884 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := utilde_node(children)
	
end

procedure action_141()
#line 888 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := uminus_node(children)
	
end

procedure action_142()
#line 892 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := unumne_node(children)
	
end

procedure action_143()
#line 896 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := uunion_node(children)
	
end

procedure action_144()
#line 900 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := uqmark_node(children)
	
end

procedure action_145()
#line 904 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := ubackslash_node(children)
	
end

procedure action_147()
#line 911 "scoelgram.y"

		children := [valstk[1]]
		yyval := section_node(children)
	
end

procedure action_148()
#line 915 "scoelgram.y"

		children := [valstk[1]]
		yyval := return_node(children)
	
end

procedure action_149()
#line 919 "scoelgram.y"

		children := [valstk[1]]
		yyval := if_node(children)
	
end

procedure action_150()
#line 923 "scoelgram.y"

		children := [valstk[1]]
		yyval := case_node(children)
	
end

procedure action_151()
#line 927 "scoelgram.y"

		children := [valstk[1]]
		yyval := while_node(children)
	
end

procedure action_152()
#line 931 "scoelgram.y"

		children := [valstk[1]]
		yyval := until_node(children)
	
end

procedure action_153()
#line 935 "scoelgram.y"

		children := [valstk[1]]
		yyval := every_node(children)
	
end

procedure action_154()
#line 939 "scoelgram.y"

		children := [valstk[1]]
		yyval := repeat_node(children)
	
end

procedure action_155()
#line 943 "scoelgram.y"

		children := [valstk[1]]
		yyval := ident_node(children)
	
end

procedure action_156()
#line 947 "scoelgram.y"
 
		children := [valstk[1]]
		yyval := next_node(children)
	
end

procedure action_157()
#line 951 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := Break_node(children)
	
end

procedure action_158()
#line 955 "scoelgram.y"
 
		children := [valstk[3], valstk[2], valstk[1]]
		yyval := Paren_node(children)
	
end

procedure action_159()
#line 959 "scoelgram.y"
 
		children := [valstk[3], valstk[2], valstk[1]]
		yyval := Brace_node(children)
	
end

procedure action_160()
#line 963 "scoelgram.y"
 
		children := [valstk[3], valstk[2], valstk[1]]
		yyval := Brack_node(children)
	
end

procedure action_161()
#line 967 "scoelgram.y"
 
		children := [valstk[4], valstk[3], valstk[2], valstk[1]]
		yyval := Subscript_node(children)
	
end

procedure action_162()
#line 971 "scoelgram.y"
 
		children := [valstk[3], valstk[2], valstk[1]]
		yyval := Pdco_node(0, children)
	
end

procedure action_163()
#line 975 "scoelgram.y"
 
		children := [valstk[4], valstk[3], valstk[2], valstk[1]]
		yyval := Pdco_node(1, children)
	
end

procedure action_164()
#line 979 "scoelgram.y"
 
		children := [valstk[4], "(", valstk[2], ")"]
		yyval := invoke_node(children)
	
end

procedure action_165()
#line 983 "scoelgram.y"

		children := [valstk[5],":", "(", valstk[2], ")"]
		yyval := invocationnode(children)
	
end

procedure action_166()
#line 987 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := field_node(children)
	
end

procedure action_167()
#line 992 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := field_node(children)
	
end

procedure action_168()
#line 997 "scoelgram.y"

		children := [valstk[1]]
		yyval := packageref_node(children)
	
end

procedure action_169()
#line 1001 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := field_node(children)
	
end

procedure action_170()
#line 1008 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := keyword_node(children)
	
end

procedure action_171()
#line 1012 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := keyword_node(children)
	
end

procedure action_172()
#line 1018 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := While_node(0, children)
	
end

procedure action_173()
#line 1022 "scoelgram.y"
 
		children := [valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := While_node(1, children)
	
end

procedure action_174()
#line 1028 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := Until_node(0, children)
	
end

procedure action_175()
#line 1032 "scoelgram.y"
 
		children := [valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := Until_node(1, children)
	
end

procedure action_176()
#line 1038 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := Every_node(0, children)
	
end

procedure action_177()
#line 1042 "scoelgram.y"
 
		children := [valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := Every_node(1, children)
	
end

procedure action_178()
#line 1048 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := Repeat_node(0, children)
	
end

procedure action_180()
#line 1055 "scoelgram.y"
 
		children := [valstk[2], valstk[1]]
		yyval := Return_node(0, children)
	
end

procedure action_181()
#line 1059 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := Suspend_node(0, children)
	
end

procedure action_182()
#line 1063 "scoelgram.y"
 
		children := [valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := Suspend_node(1, children)
	
end

procedure action_183()
#line 1069 "scoelgram.y"
 
		children := [valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := If_node(0, children)
	
end

procedure action_184()
#line 1073 "scoelgram.y"
 
		children := [valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := If_node(1, children)
	
end

procedure action_185()
#line 1079 "scoelgram.y"
 
		children := [valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := Case_node(0, children)
	
end

procedure action_187()
#line 1086 "scoelgram.y"
 
		children := [valstk[3],";",valstk[1]]
		yyval := caselist_node(children)
	
end

procedure action_188()
#line 1092 "scoelgram.y"
 
		children := [valstk[3],":",valstk[1]]
		yyval := cclause_node(0, children)
	
end

procedure action_189()
#line 1096 "scoelgram.y"
 
		children := [valstk[3],":",valstk[1]]
		yyval := cclause_node(0, children)
	
end

procedure action_190()
#line 1102 "scoelgram.y"

		children := [valstk[1]]
		yyval := exprlist_node(children)
	
end

procedure action_191()
#line 1106 "scoelgram.y"

		children := [valstk[3],",",valstk[1]]
		yyval := exprlist_node(children)
	
end

procedure action_192()
#line 1112 "scoelgram.y"
 
		children := [valstk[1]]
		yyval := pdcolist_node(0, children) 
	
end

procedure action_193()
#line 1116 "scoelgram.y"
 
		children := [valstk[3],",",valstk[1]]
		yyval := pdcolist_node(1, children)
	
end

procedure action_194()
#line 1122 "scoelgram.y"

		children := [valstk[1]]
		yyval := intlit_node(children)
	
end

procedure action_195()
#line 1126 "scoelgram.y"

		children := [valstk[1]]
		yyval := reallit_node(children)
	
end

procedure action_196()
#line 1130 "scoelgram.y"

		children := [valstk[1]]
		yyval := stringlit_node(children)
	
end

procedure action_197()
#line 1134 "scoelgram.y"

		children := [valstk[1]]
		yyval := csetlit_node(children)
	
end

procedure action_198()
#line 1140 "scoelgram.y"
 
		children := [valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := section_node(children)
	
end

procedure action_199()
#line 1146 "scoelgram.y"

		children := [valstk[1]]
		yyval := colon_node(children)
	
end

procedure action_200()
#line 1150 "scoelgram.y"

		children := [valstk[1]]
		yyval := pcolon_node(children)
	
end

procedure action_201()
#line 1154 "scoelgram.y"

		children := [valstk[1]]
		yyval := mcolon_node(children)
	
end

procedure action_202()
#line 1160 "scoelgram.y"

		children := [valstk[1]]
		yyval := compound_node(children)
	
end

procedure action_203()
#line 1164 "scoelgram.y"
 
		children := [valstk[3],";",valstk[1]]
		yyval := compound_node(children)
	
end

procedure action_204()
#line 1170 "scoelgram.y"

		children := [valstk[3]]
		yyval := program_node(children)
	
end

procedure action_205()
#line 1176 "scoelgram.y"
 
		yyval := error_node(); 
	
end

#line 3564 "scoelgram.icn"
