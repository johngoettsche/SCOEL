################################################################
# procedure: yyparse : parse input and execute indicated items
################################################################
procedure yyparse()
	local yyn        # next next thing to do
	local yym        #
	local yystate    # current parsing state from state table
	local yys        # current token string
	local doaction   # set to 1 if there need to execute action
#	local token      # current token

	if /yytable then init() 
	init_stacks() 
	yynerrs   := 0 
	yyerrflag := 0 
	yychar    := -1           # impossible char forces a read
	yystate   := 0            # initial state
	push(statestk, yystate)   # save it

	repeat { # until parsing is done, either correctly, or w/error
		doaction := 1 

		##### NEXT ACTION (from reduction table)
		yyn := yydefred[yystate+1]

		while yyn = 0 do {

			if yychar < 0 then {   # we want a char?
				yychar := yylex()    # get next token
				##### ERROR CHECK ####
				if yychar < 0 then { # it it didn't work/error
					yychar := 0        # change it to default string (no -1!)
					if \yydebug = 1 then yylexdebug(yystate, yychar) 
				}
			} # yychar < 0
	  
			yyn := yysindex[yystate+1]  # get amount to shift by (shift index)

			if (yyn ~= 0) & ((yyn +:= yychar) >= 0) & 
					(yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yychar) then {
		
				##### NEXT STATE ####
				yystate := yytable[yyn+1] # we are in a new state
				push(statestk, yystate)   # save it
				push(valstk, yylval)      # push our lval as the input for next rule
				yychar := -1              # since we have 'eaten' a token, say we need another
				if yyerrflag > 0 then     # have we recovered an error?
					yyerrflag -:= 1        # give ourselves credit
				doaction := 0             # but don't process yet
				break                     # quit the yyn=0 loop
			}

			yyn := yyrindex[yystate+1]    # reduce

			if (yyn ~= 0) & ((yyn +:= yychar) >= 0) &
					(yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yychar) then {
				# e reduced!
				yyn      := yytable[yyn+1] 
				doaction := 1  # get ready to execute
				break          # drop down to actions
			} else { #ERROR RECOVERY
				if yyerrflag == 0 then {
					yyerror("syntax error", yys) 
					yynerrs +:= 1 
				}
				if yyerrflag < 3 then {     # low error count?
					yyerrflag := 3 
					repeat { #do until break
						if *statestk < 1 then {  # check for under & overflow here
							compiler_error(1100, "compile time error")   # note lower case 's'
							return 1 
						}
						yyn := yysindex[statestk[1]] 
						if ((yyn ~= 0) & (yyn +:= YYERRCODE) >= 0 &
								yyn <= YYTABLESIZE & yycheck[yyn+1] == YYERRCODE) then {
							yystate := yytable[yyn+1] 
							push(statestk, yystate) 
							push(valstk, yylval) 
							doaction := 0 
							break 
						} else {
							if *statestk = 0 then { # check for under & overflow here
								write("Stack underflow. aborting...") # capital 'S'
								return 1 
							}
							pop(statestk) 
							pop(valstk) 
						}
					}
				} else {# discard this token
					if yychar = 0 then return 1  # yyabort
					if \yydebug = 1 then {
						yys := &null 
						if yychar <= YYMAXTOKEN then yys := yyname[yychar+1] 
						if integer(yys) & yys = 0 then yys := "illegal-symbol" 
						write("state ",  yystate, ", error recovery discards token ",
								yychar, " (", yys, ")") 
					}
					yychar := -1       # read another
				}
			} # end error recovery
			yyn := yydefred[yystate+1] 
		}# yyn = 0 loop

		if doaction = 0 then   # any reason not to proceed?
			next                 # skip action

		yym := yylen[yyn+1]    # get count of terminals on rhs
		yyval := valstk[yym]   # get current semantic value
		if arv := action[yyn]() then return arv # execute the semantic action

		##### Now let's reduce... ####
		every 1 to yym do pop(statestk)# we just reduced yylen states
		yystate := statestk[1]        # get new state

		every 1 to yym do pop(valstk) # corresponding value drop
		yym := yylhs[yyn+1]           # select next TERMINAL(on lhs)
		if yystate = 0 & yym = 0 then {
                                  # done? 'rest' state and at first TERMINAL
			yystate := YYFINAL          # explicitly say we're done
			push(statestk, YYFINAL)     # and save it
			push(valstk, yyval)         # also save the semantic value of parsing
			if yychar < 0 then {        # we want another character?
				yychar := yylex()         # get next character
				if yychar < 0 then yychar := 0   #clean, if necessary
			}
			if yychar = 0 then break    # Good exit (if lex returns 0  -)
                                  # quit the loop--all DONE
		} else { 	# if yystate
                #else not done yet
			
			
			# get next state and push, for next yydefred[]
			yyn := yygindex[yym+1]        # find out where to go
			if (yyn ~= 0)           & ((yyn +:= yystate) >= 0) &
					(yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yystate) then {
				yystate := yytable[yyn+1]   # get new state
			} else {
				yystate := yydgoto[yym+1]   # else go to new defred
			}
			push(statestk, yystate)       # going again, so push state & val...
			push(valstk, yyval)           # for next action
		}
	} # main loop

	return 0 # yyaccept!!
end