### This file created by IYACC 1.0
### Please send bug reports to raypereda@hotmail.com
#define YYPREFIX "yy"
#line 124 "scoelgram.y"

procedure Keyword(x1,x2)
	static 
		keywords
	
	local
		children
		
	initial {
		keywords := set(["allocated","clock","collections","column","current",
				"date","now","dateline","digits","e","error",
				"errornumber","errortext","errorvalue","errout","fail",
				"eventcode","eventsource","eventvalue","features",
				"file","host","input","lcase","letters","level",
				"line","main","null","output","phi","pi","pick","pos",
				"progname","random","regions","source","storage",
				"subject","time","trace","dump","ucase","version",
				"errno","window","col","row","x","y","interval",
				"control","shift","meta","lpress","mpress","rpress",
				"lrelease","mrelease","rrelease","ldrag","mdrag",
				"rdrag","resize","ascii","cset"])
	}

	# verify that x2 is a valid keyword
	if not member(keywords, x2.s) then
		yyerror("&" || x2.s ||" is not a valid keyword!")

	children := [x1, x2]
	return node("keyword", children)
end

global set_of_all_fields, dummyrecno
procedure Field(x1,x2,x3)
#	initial { set_of_all_fields := set(); dummyrecno := 1 }

#	if \iconc then {
#		if type(x3) == "token" then {
#			nsert(set_of_all_fields, x3.s)
#			write(&errout, "field ", image(x3.s))
#		}
#	}
#	children := [x1, x2, x3]
#	return node("field", children)
end

procedure Clone1stToken(n)
	case type(n) of {
		"token": return copy(n)
		"treenode": {
				return Clone1stToken(!n.children)
			}
	}
end

global outline, outcol, outfilename,package_level_syms,package_level_class_syms

procedure Progend(x1)
	# pe  istop set_package_level_syms
	local 
		pe
   
	if *\parsingErrors > 0 then {
		every pe := !parsingErrors do {
			write(&errout, pe.errorMessage)
		}
		istop(*\parsingErrors || " error" ||
				(if *\parsingErrors > 1 then "s" else ""))
	}

	if /x1 then istop("error: empty file")

	package_level_syms := set()
	package_level_class_syms := set()
	set_package_level_syms(x1)
	scopecheck_superclass_decs(x1)

	outline := 1
	outcol := 1
   #
   # export specifications for each class
   #
	native := set()
	every cl := classes.foreach_t() do {
		cl.WriteSpec()
		insert(native, cl)
	}
   #
   # import class specifications, transitively
   #
	repeat {
		added := 0
		every super := ((classes.foreach_t()).foreachsuper() | !imports) do {
			if /classes.lookup(super) then {
				added := 1
				readspec(super)
				cl := classes.lookup(super)
				if /cl then halt("can't inherit class '",super,"'")
				iwrite("  inherits ", super, " from ", cl.linkfile)
				writelink(cl.dir, cl.linkfile)
			}
		}
		if added = 0 then break
	}
  #
  # Compute the transitive closure of the superclass graph. Then
  # resolve inheritance for each class, and use it to apply scoping rules.
  #
	every (classes.foreach_t()).transitive_closure()
	every (classes.foreach_t()).resolve()

	scopecheck_bodies(x1)

	if \thePackage then {
		every thePackage.insertsym(!package_level_syms)
	}

	if \iconc then  {
		iconc_prep_parse_tree(&null, x1)
	}

  #
  # generate output
  #
#  iwrite("Generating code:")
	yyprint(x1)
	write(yyout)

   # generate invocable declarations for identifiers in unevaluated exprs
	if (*\list_of_invocables)>0 then {
		writes(yyout, "invocable ")
		every temp := list_of_invocables[i := 1 to *list_of_invocables] do {
			writes(yyout, image(temp))
			if i < *list_of_invocables then writes(yyout, ",")
		}
		write(yyout)
	}

	if \iconc & (type(set_of_all_fields) == "set") &
			(*set_of_all_fields > 0) then {
		arandomfield := !set_of_all_fields
		writes(yyout, "record __dummyrecord",dummyrecno,"(",arandomfield)
		delete(set_of_all_fields, arandomfield)
		every writes(yyout, ",", !set_of_all_fields)
		write(yyout, ")")
		dummyrecno +:= 1
		set_of_all_fields := set()
	}
end
# idlist
#line 154 "scoelgram.icn"
$define IDENT 257
$define INTLIT 258
$define REALLIT 259
$define STRINGLIT 260
$define CSETLIT 261
$define EOFX 262
$define ABSTRACT 263
$define BREAK 264
$define BY 265
$define CASE 266
$define CLASS 267
$define CRITICAL 268
$define DEFAULT 269
$define DO 270
$define ELSE 271
$define END 272
$define EVERY 273
$define FAIL 274
$define GLOBAL 275
$define IF 276
$define IMPORT 277
$define CONSTRUCTOR 278
$define LINK 279
$define PRIVATE 280
$define METHOD 281
$define NEXT 282
$define OF 283
$define PUBLIC 284
$define READ 285
$define RECORD 286
$define REPEAT 287
$define RETURN 288
$define STATIC 289
$define SUSPEND 290
$define THEN 291
$define THREAD 292
$define TO 293
$define UNTIL 294
$define WHILE 295
$define BANG 296
$define MOD 297
$define AUGMOD 298
$define AND 299
$define AUGAND 300
$define STAR 301
$define AUGSTAR 302
$define INTER 303
$define AUGINTER 304
$define PLUS 305
$define AUGPLUS 306
$define UNION 307
$define AUGUNION 308
$define MINUS 309
$define AUGMINUS 310
$define DIFF 311
$define AUGDIFF 312
$define DOT 313
$define SLASH 314
$define AUGSLASH 315
$define ASSIGN 316
$define INVASSIGN 317
$define LTH 318
$define AUGLTH 319
$define LTHE 320
$define AUGLTHE 321
$define EQ 322
$define GTH 323
$define AUGGTH 324
$define GTHE 325
$define AUGGTHE 326
$define QMARK 327
$define AUGQMARK 328
$define BACKSLASH 329
$define CARET 330
$define AUGCARET 331
$define BAR 332
$define TILDE 333
$define NE 334
$define AUGNE 335
$define LPAREN 336
$define RPAREN 337
$define PCOLON 338
$define COMMA 339
$define MCOLON 340
$define COLON 341
$define COLONCOLON 342
$define SEMICOL 343
$define LBRACK 344
$define RBRACK 345
$define LBRACE 346
$define RBRACE 347
$define DOLLAR 348
$define SND 349
$define SNDBK 350
$define RCV 351
$define RCVBK 352
$define CONST 353
$define TOPIC 354
$define FUNK 355
$define CONASSIGN 356
$define STORE 357
$define AT 358
$define CREATE 359
$define fact 360
$define YYERRCODE 256
procedure init() 
  yylhs := [                                        -1,
    0,    1,    1,    2,    2,    2,    2,    2,    2,   10,
   10,   10,    8,   14,   14,   17,   17,   17,   18,   18,
   15,   15,   15,   15,   15,   15,    3,    3,    7,    6,
   21,   21,   22,   22,    5,    5,    5,   25,   25,   26,
    4,   16,   16,    9,    9,    9,    9,   29,   29,   31,
   31,   19,   28,   28,   20,   20,   32,   13,   13,   13,
   24,   24,   33,   33,   34,   34,   34,   34,   11,   11,
   35,   35,   35,   23,   23,   12,   12,   36,   36,   19,
   19,   37,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   38,   38,   38,   39,   39,   40,   40,   40,   40,
   40,   40,   40,   41,   41,   41,   41,   41,   42,   42,
   42,   42,   42,   43,   43,   44,   44,   44,   45,   45,
   45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
   45,   45,   45,   45,   45,   46,   46,   46,   46,   46,
   46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
   46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
   46,   51,   51,   52,   52,   53,   53,   54,   48,   48,
   48,   48,   49,   49,   50,   57,   57,   58,   58,   30,
   30,   56,   56,   27,   27,   27,   27,   47,   59,   59,
   59,   55,   55,    0,   19,
  ]
  yylen := [                            2,
    2,    0,    3,    1,    1,    1,    1,    1,    1,    0,
    3,    6,    5,    7,    4,    0,    3,    3,    3,    2,
    0,    2,    3,    2,    2,    2,    0,    1,    2,    2,
    1,    3,    1,    1,    3,    2,    3,    1,    3,    3,
    6,    0,    1,    3,    6,    5,    4,    6,    7,    0,
    1,    0,    0,    1,    2,    4,    5,    0,    1,    3,
    1,    3,    1,    3,    1,    3,    3,    5,    0,    4,
    2,    2,    2,    0,    1,    0,    3,    0,    1,    1,
    3,    1,    3,    1,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    1,    3,    5,    1,    3,    1,    3,    3,    3,
    3,    3,    3,    1,    3,    3,    3,    3,    1,    3,
    3,    3,    3,    1,    3,    1,    3,    3,    1,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    2,    3,    3,    3,
    4,    3,    4,    4,    5,    3,    3,    1,    3,    2,
    2,    2,    4,    2,    4,    2,    4,    2,    1,    2,
    2,    4,    4,    6,    6,    1,    3,    3,    3,    1,
    3,    1,    3,    1,    1,    1,    1,    6,    1,    1,
    1,    1,    3,    3,    1,
  ]
  yydefred := [                         0,
    2,    0,    0,    0,    0,    1,    0,    0,    0,    0,
    0,   43,    0,    4,    5,    6,    7,    8,    9,   69,
    0,  204,    0,   75,    0,   33,   34,    0,   31,    0,
    0,    0,    0,   38,   28,    3,    0,    0,    0,    0,
    0,    0,   44,    0,   61,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   69,    0,    0,    0,    0,    0,    0,    0,
   63,  205,    0,  194,  195,  196,  197,    0,    0,    0,
  179,    0,  156,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   84,
  168,    0,  146,   80,    0,  102,    0,    0,    0,  119,
    0,  126,    0,  147,  148,  149,  150,  151,  152,  153,
  154,   47,    0,   32,   40,   39,   55,   71,    0,   72,
   73,   26,   24,   25,    0,    0,    0,   22,    0,    0,
    0,    0,    0,    0,    0,  190,    0,    0,    0,    0,
    0,  157,    0,    0,    0,    0,  180,    0,  181,    0,
    0,    0,  133,  171,  170,  136,  139,  135,  143,  141,
  134,  132,  137,  144,  145,  138,  131,  140,  142,    0,
    0,    0,    0,    0,  130,    0,   46,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   62,
    0,   23,    0,    0,   13,    0,    0,   70,    0,    0,
    0,    0,    0,   45,    0,    0,   67,    0,    0,   64,
   60,   19,    0,    0,    0,    0,    0,    0,  158,  160,
    0,  159,   81,    0,   93,  101,   90,   91,   88,   87,
   89,   86,   92,   83,   98,   97,   96,   95,  100,   94,
   99,   85,    0,    0,    0,    0,    0,  106,    0,    0,
    0,    0,    0,  123,  120,  121,  122,  128,  127,  125,
    0,  169,  167,    0,    0,    0,    0,  162,  192,    0,
    0,    0,   11,   56,    0,   17,   18,    0,   41,  191,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  203,
    0,  164,    0,  200,  201,  199,    0,  161,    0,  163,
   57,   69,   77,   14,   68,    0,   48,    0,    0,    0,
  186,    0,  104,  165,    0,  193,    0,   49,    0,    0,
    0,  185,    0,  198,   12,    0,    0,  187,
  ]
  yydgoto := [                          2,
    3,   13,   36,   57,   15,   16,   17,   18,  110,  147,
   59,  246,   69,   20,   60,   61,  152,  111,  154,   62,
   28,   29,   25,   46,   33,   34,  113,  253,   43,  155,
   44,   63,   70,   71,   64,  156,  114,  115,  116,  117,
  118,  119,  120,  121,  122,  123,  124,  125,  126,  127,
  128,  129,  130,  131,  194,  320,  360,  361,  347,
  ]
  yysindex := [                      -188,
    0,    0, -221,   40, -282,    0, -214, -116, -116, -214,
 -175,    0, -209,    0,    0,    0,    0,    0,    0,    0,
 -110,    0, -205,    0, -105,    0,    0, -184,    0, -184,
 -105, -151, -156,    0,    0,    0, -187,  -53,  -19, -140,
  -14, 3703,    0, -209,    0,  -81, -116,  -81,  171, -175,
   15, -214,    3, -214, -214, -186, -186, -186, -171,   11,
  -12, -186,    0, -105,  -15,   -8, 3703,   -2,    7, -124,
    0,    0, -253,    0,    0,    0,    0, 3703, 3703, 3703,
    0, 3703,    0, 3703, 3703, 3703, 3703, 3703, 3793,  -66,
 3793, 3793, 3793, 3793, 3793, 3793, 3793, 3793, 3793, 3793,
 3793, 3793, 3793, 3793, 3703, 3703, 3703, 3703, 3793,    0,
    0, -246,    0,    0, 3968,    0,   -9,   78, -108,    0,
 -145,    0, -123,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   95,    0,    0,    0,    0,    0,   43,    0,
    0,    0,    0,    0, -186,   72,  123,    0, 3428, -103,
 -223,   76, -105,  119,    8,    0,  167, -224,  -14,  104,
  165,    0, -143, -232, -179,  119,    0, -225,    0, -197,
 -174,   94,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   29,
  119,  -63,  107,  105,    0, 3883,    0, 3793, 3883, 3883,
 3883, 3883, 3883, 3883, 3883, 3883, 3883, 3883, 3883, 3883,
 3883, 3883, 3883, 3883, 3883, 3883, 3793, 3793, 3793, 3793,
 3793, 3793, 3793, 3793, 3793, 3793, 3793, 3793, 3793, 3793,
 3793, 3793, 3793, 3793, -195, 3703,  122, 3703, 3519,    0,
  -14,    0,  -14, 3428,    0,  196,  127,    0,  -36,  -15,
  -14,  -81,  134,    0, 3703,  152,    0,  157, 3703,    0,
    0,    0,  163, 3703, 3703, 3703, 3703, 3703,    0,    0,
 3703,    0,    0,  253,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   78,   78,   78,   78,   78,    0,   78, -108,
 -108, -108, -108,    0,    0,    0,    0,    0,    0,    0,
   94,    0,    0,   55, 3703, -139,  -21,    0,    0, -128,
  187,  188,    0,    0, 3703,    0,    0,  189,    0,    0,
  171, 3703,  -90, 3612,  119, -166,  119,  119,  119,    0,
 3793,    0,   59,    0,    0,    0, 3703,    0, 3703,    0,
    0,    0,    0,    0,    0,  -86,    0,  178, -234, -114,
    0, 3703,    0,    0, -242,    0, 3428,    0, 3703, 3703,
 3612,    0,  119,    0,    0,  119,  119,    0,
  ]
  yyrindex := [                       -11,
    0,    0, -106, -106,    0,    0,  270,    0,    0,  270,
    0,    0,   24,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 4069,    0,    0,    0,    0,  -98,    0,  -70,
    0,    0,  -45,    0,    0,    0, -168,    0,    0,    0,
  191,  185,    0,  176,    0, 3969,    0, 3985,    0,    0,
    0,  270,    0,  270,  270, 1315, 1315, 1315,    0,  262,
    0, 1315,    0,    0, -194,    0,  103,  -74,    0,  198,
    0,    0,  274,    0,    0,    0,    0, 4165,  255, 4165,
    0,  249,    0, 4165, 4165, 4165, 4165, 4165,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  103, 4165,  -18,  -76,    0,    0,
    0,    0,    0,    0, 3245,    0, 3149, 1901, 1997,    0,
 1805,    0, 3053,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1315, 3337,    0,    0, -235,   77,
    0, -157,  204,  466,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1325,    0,  562,    0, 1421,    0, 1517,
 1613,  274,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  658,    0,  200,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  103,    0,  -61,  203,    0,
  191,    0,  191, -235,    0,    0,    0,    0, -194, -194,
  191,  206,    0,    0,  -95,  -44,    0,    0,  -85,    0,
    0,    0,    0, 4165, 4165, 4165, 4165, 4165,    0,    0,
  -76,    0,    0,  749,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2093, 2189, 2285, 2381, 2477,    0, 2573, 2669,
 2765, 2861, 2957,    0,    0,    0,    0,    0,    0,    0,
  370,    0,    0,    0,  103,    9,    0,    0,    0,    0,
    0,    0,    0,    0, -235,    0,    0,    0,    0,    0,
    0,  -85,    0,  207,  845, 1709,  941, 1037, 1133,    0,
    0,    0,    0,    0,    0,    0,  185,    0,  -85,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 4165,    0,    0,    0,    0, -235,    0,  -76,  -76,
  207,    0, 1229,    0,    0,  -55,   13,    0,
  ]
  yygindex := [                         0,
  548,    0,  -33,  366,    0,    0,    0,    0,   23,    0,
  -20, -237,   -4,    0,   -7,  371,  195, -119,  -40,    0,
  541,  504,   91,   -3,    0,  503,  -46,    0,    0, -101,
    0,  505,    0,  402,    0,  -77, 4327,    0, -193,    0,
  182,  239,  186,    0,  -79,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  291,    0,    0,  192,    0,
  ]
$define YYTABLESIZE 4543
  yytable := [                         37,
  162,  112,  135,  190,  274,  192,  323,  167,  169,  173,
  132,  176,  177,  178,  179,  180,  181,  182,  183,  184,
  185,  186,  187,  188,  189,   19,   19,   48,  298,  195,
  193,  250,  258,  249,   23,    5,   76,  264,  163,  164,
    6,  165,  149,  166,  266,  168,  170,  171,  142,  143,
  144,   40,  196,    7,  148,    8,  196,    9,   10,   58,
  150,  311,   16,   23,  196,  191,  196,    1,   16,    5,
    5,  247,  267,  196,   24,   51,   51,   16,   58,   58,
   58,   32,  312,   16,   58,   16,   16,  353,  161,   16,
   16,   16,   52,   53,   53,  268,   54,   55,  197,   15,
   31,  196,  374,   21,  362,   15,  370,   52,   52,   21,
  257,  265,   54,   55,   15,  313,  248,   42,  106,  196,
   15,  259,   15,   15,  196,  244,   15,   15,   15,  375,
   41,   11,  196,   35,  314,   12,  317,  242,   42,  263,
   26,   16,  138,   27,  140,  141,  106,  363,   16,  252,
  232,   45,  308,  309,   47,  196,   38,  333,   29,  196,
   42,  319,   16,   29,   49,   16,  247,   58,   29,   12,
   12,  145,   56,   56,   69,   39,   29,  330,   29,   42,
   29,   29,   50,  233,  234,   15,   30,   29,  228,  235,
  174,   30,  229,  193,  230,   67,   30,  316,  344,   15,
  345,  346,   15,   65,   30,  231,   30,  175,   30,   30,
  349,   36,  236,  343,  159,   30,   36,  237,  350,  160,
  238,   36,  239,  335,  336,  337,  338,  339,  371,   36,
  356,   36,  372,   36,   36,  133,  321,   66,  322,   35,
   36,   52,   68,   52,   29,    2,  328,  247,  255,   52,
    2,   52,  255,   52,   29,    2,  357,  133,   29,  139,
  368,   52,   65,    2,   65,    2,   52,    2,    2,   65,
   52,  366,   30,   39,    2,  255,   52,   52,   52,   52,
   27,  270,   30,   52,  355,   27,   30,  188,  146,  247,
   27,  188,   66,  359,   66,   53,    5,   36,   27,   66,
   27,   22,   27,   27,  151,  161,  365,   36,  217,   27,
  218,   36,  219,  220,    7,  221,    8,  255,    9,   10,
   52,  373,  222,  348,  223,  151,   52,  153,  376,  377,
  359,  367,   27,   27,   27,   27,   27,   27,  157,   27,
   27,    2,   27,  158,  254,    2,  255,   79,   27,   27,
   27,  240,   27,   79,   27,  189,   27,   27,   27,  189,
   27,   27,   27,   27,   27,  269,   27,  255,   14,   14,
   27,   27,   27,   21,   21,   27,   27,   27,  241,   27,
   27,   27,  224,   27,  225,   27,  226,   27,  227,   27,
   27,  342,   11,  255,  245,  364,   12,  255,  293,  294,
  295,  296,  297,   27,  299,   27,   27,  243,   27,   27,
   27,  251,   27,  304,  305,  306,  307,  196,   27,  310,
   27,  262,   27,  256,   74,   75,   76,   77,   74,   75,
   76,   77,   27,   27,   27,  161,   27,   27,   27,   52,
   27,   52,   27,  326,  327,   27,   27,   27,  261,  271,
   27,  272,   27,   27,   27,   27,   27,  315,   27,   27,
   27,   27,  300,  301,  302,  303,   27,  324,   27,  325,
  329,   27,   27,   27,   27,   27,   27,   27,   27,   27,
   27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
   27,   27,  331,   27,   27,   27,   27,   27,   27,   27,
   27,   27,  332,   27,   27,   27,   27,   27,  334,   27,
   27,   27,   27,   27,   27,   27,   27,  341,  369,   27,
   27,   27,   27,  351,  352,  354,   74,   58,   27,   52,
  155,   27,   27,   10,   59,   27,  155,   52,  155,   52,
   53,   52,   54,  155,  155,  155,  202,   52,    4,   30,
  134,  155,  136,  155,  155,  137,  155,  155,  155,  155,
  260,  340,  378,    0,  155,    0,  155,    0,    0,  155,
  155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
  155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
    0,  155,  155,  155,  155,  155,  155,  155,  155,  155,
    0,  155,  155,  155,  155,  155,    0,  155,  155,  155,
  155,  155,  155,  155,  155,    0,  155,  155,  155,  155,
  155,    0,    0,    0,    0,    0,  166,    0,    0,  155,
  155,    0,  166,  155,  166,    0,    0,    0,    0,  166,
  166,  166,    0,    0,    0,    0,    0,  166,    0,  166,
  166,    0,  166,  166,  166,  166,    0,    0,    0,    0,
  166,    0,  166,    0,    0,  166,  166,  166,  166,  166,
  166,  166,  166,  166,  166,  166,  166,  166,  166,  166,
  166,  166,  166,  166,  166,  166,    0,  166,  166,  166,
  166,  166,  166,  166,  166,  166,    0,  166,  166,  166,
  166,  166,    0,  166,  166,  166,  166,  166,  166,  166,
  166,    0,  166,  166,  166,  166,  166,    0,    0,    0,
    0,    0,   79,    0,    0,  166,  166,    0,   79,  166,
   79,    0,    0,    0,    0,   79,   79,   79,    0,    0,
    0,    0,    0,   79,    0,   79,   79,    0,   79,   79,
   79,   79,    0,    0,    0,    0,   79,    0,   79,    0,
    0,   79,   79,   79,    0,   79,   79,   79,   79,   79,
   79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
   79,   79,    0,   79,   79,   79,   79,   79,   79,   79,
   79,   79,    0,   79,   79,   79,   79,   79,    0,   79,
   79,   79,   79,   79,   79,   79,   79,    0,   79,   79,
   79,   79,   79,    0,    0,    0,    0,    0,  178,    0,
    0,   79,   79,    0,  178,   79,  178,    0,    0,    0,
    0,  178,  178,  178,    0,    0,    0,    0,    0,  178,
    0,  178,  178,    0,  178,  178,  178,  178,    0,    0,
    0,    0,  178,    0,  178,    0,    0,  178,  178,  178,
    0,  178,  178,  178,  178,  178,  178,  178,  178,  178,
  178,  178,  178,  178,  178,  178,  178,  178,    0,  178,
  178,  178,  178,  178,  178,  178,  178,  178,    0,  178,
  178,  178,  178,  178,    0,  178,  178,  178,  178,  178,
  178,  178,  178,    0,  178,  178,  178,  178,  178,    0,
    0,    0,    0,    0,   20,    0,    0,  178,  178,    0,
   20,  178,   20,    0,    0,    0,    0,   20,   20,   20,
    0,    0,    0,    0,    0,   20,    0,   20,   20,    0,
   20,   20,   20,   20,    0,    0,    0,    0,   20,    0,
   20,    0,    0,   20,   20,   20,    0,   20,   20,   20,
   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
   20,   20,   20,   20,    0,   20,   20,   20,   20,   20,
   20,   20,   20,   20,    0,   20,   20,   20,   20,   20,
    0,   20,   20,   20,   20,   20,   20,   20,   20,    0,
   20,   20,   20,   20,   20,  103,    0,    0,    0,    0,
    0,  103,    0,   20,   20,    0,    0,   20,  103,  103,
  103,    0,    0,    0,    0,    0,  103,    0,  103,  103,
    0,  103,  103,  103,  103,    0,    0,    0,    0,  103,
    0,  103,    0,    0,  103,  103,  103,  103,  103,  103,
  103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
  103,  103,  103,  103,  103,    0,  103,  103,  103,  103,
  103,  103,  103,  103,  103,    0,  103,  103,  103,  103,
  103,    0,  103,  103,  103,  103,  103,  103,  103,  103,
    0,  103,  103,  103,  103,  103,    0,    0,    0,    0,
    0,  177,    0,    0,  103,  103,    0,  177,  103,  177,
    0,    0,    0,    0,  177,  177,  177,    0,    0,    0,
    0,    0,  177,    0,  177,  177,    0,  177,  177,  177,
  177,    0,    0,    0,    0,  177,    0,  177,    0,    0,
  177,  177,  177,    0,  177,  177,  177,  177,  177,  177,
  177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
  177,    0,  177,  177,  177,  177,  177,  177,  177,  177,
  177,    0,  177,  177,  177,  177,  177,    0,  177,  177,
  177,  177,  177,  177,  177,  177,    0,  177,  177,  177,
  177,  177,    0,    0,    0,    0,    0,  182,    0,    0,
  177,  177,    0,  182,  177,  182,    0,    0,    0,    0,
  182,  182,  182,    0,    0,    0,    0,    0,  182,    0,
  182,  182,    0,  182,  182,  182,  182,    0,    0,    0,
    0,  182,    0,  182,    0,    0,  182,  182,  182,    0,
  182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
  182,  182,  182,  182,  182,  182,  182,    0,  182,  182,
  182,  182,  182,  182,  182,  182,  182,    0,  182,  182,
  182,  182,  182,    0,  182,  182,  182,  182,  182,  182,
  182,  182,    0,  182,  182,  182,  182,  182,    0,    0,
    0,    0,    0,  175,    0,    0,  182,  182,    0,  175,
  182,  175,    0,    0,    0,    0,  175,  175,  175,    0,
    0,    0,    0,    0,  175,    0,  175,  175,    0,  175,
  175,  175,  175,    0,    0,    0,    0,  175,    0,  175,
    0,    0,  175,  175,  175,    0,  175,  175,  175,  175,
  175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
  175,  175,  175,    0,  175,  175,  175,  175,  175,  175,
  175,  175,  175,    0,  175,  175,  175,  175,  175,    0,
  175,  175,  175,  175,  175,  175,  175,  175,    0,  175,
  175,  175,  175,  175,    0,    0,    0,    0,    0,  173,
    0,    0,  175,  175,    0,  173,  175,  173,    0,    0,
    0,    0,  173,  173,  173,    0,    0,    0,    0,    0,
  173,    0,  173,  173,    0,  173,  173,  173,  173,    0,
    0,    0,    0,  173,    0,  173,    0,    0,  173,  173,
  173,    0,  173,  173,  173,  173,  173,  173,  173,  173,
  173,  173,  173,  173,  173,  173,  173,  173,  173,    0,
  173,  173,  173,  173,  173,  173,  173,  173,  173,    0,
  173,  173,  173,  173,  173,    0,  173,  173,  173,  173,
  173,  173,  173,  173,    0,  173,  173,  173,  173,  173,
    0,    0,    0,    0,    0,  184,    0,    0,  173,  173,
    0,  184,  173,  184,    0,    0,    0,    0,  184,  184,
  184,    0,    0,    0,    0,    0,  184,    0,  184,  184,
    0,  184,  184,  184,  184,    0,    0,    0,    0,  184,
    0,  184,    0,    0,  184,  184,  184,    0,  184,  184,
  184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
  184,  184,  184,  184,  184,    0,  184,  184,  184,  184,
  184,  184,  184,  184,  184,    0,  184,  184,  184,  184,
  184,    0,  184,  184,  184,  184,  184,  184,  184,  184,
    0,  184,  184,  184,  184,  184,    0,    0,    0,    0,
    0,  176,    0,    0,  184,  184,   21,  176,  184,  176,
    0,    0,   21,    0,   69,  176,  176,    0,   69,   69,
   42,    0,  176,    0,  176,  176,    0,  176,  176,  176,
  176,    0,    0,    0,    0,  176,    0,  176,    0,    0,
  176,  176,  176,    0,  176,  176,  176,  176,  176,  176,
  176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
  176,    0,  176,  176,  176,  176,  176,  176,  176,  176,
  176,    0,  176,  176,  176,  176,  176,   69,  176,  176,
  176,  176,  176,  176,  176,  176,    0,  176,  176,  176,
  176,  176,    0,    0,    0,    0,    0,   79,    0,    0,
  176,  176,    0,   79,  176,   79,    0,    0,    0,    0,
    0,   79,   79,    0,    0,    0,    0,    0,   79,    0,
   79,   79,    0,   79,   79,   79,   79,    0,    0,    0,
    0,   79,    0,   79,    0,    0,   79,   79,   79,    0,
   79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
   79,   79,   79,   79,   79,   79,   79,    0,   79,   79,
   79,   79,   79,   79,   79,   79,   79,    0,   79,   79,
   79,   79,   79,    0,   79,   79,   79,   79,   79,   79,
   79,   79,    0,   79,   79,   79,   79,   79,    0,    0,
    0,    0,    0,  174,    0,    0,   79,   79,    0,  174,
   79,  174,    0,    0,    0,    0,    0,  174,  174,    0,
    0,    0,    0,    0,  174,    0,  174,  174,    0,  174,
  174,  174,  174,    0,    0,    0,    0,  174,    0,  174,
    0,    0,  174,  174,  174,    0,  174,  174,  174,  174,
  174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
  174,  174,  174,    0,  174,  174,  174,  174,  174,  174,
  174,  174,  174,    0,  174,  174,  174,  174,  174,    0,
  174,  174,  174,  174,  174,  174,  174,  174,    0,  174,
  174,  174,  174,  174,    0,    0,    0,    0,    0,  172,
    0,    0,  174,  174,    0,  172,  174,  172,    0,    0,
    0,    0,    0,  172,  172,    0,    0,    0,    0,    0,
  172,    0,  172,  172,    0,  172,  172,  172,  172,    0,
    0,    0,    0,  172,    0,  172,    0,    0,  172,  172,
  172,    0,  172,  172,  172,  172,  172,  172,  172,  172,
  172,  172,  172,  172,  172,  172,  172,  172,  172,    0,
  172,  172,  172,  172,  172,  172,  172,  172,  172,    0,
  172,  172,  172,  172,  172,    0,  172,  172,  172,  172,
  172,  172,  172,  172,    0,  172,  172,  172,  172,  172,
    0,    0,    0,    0,    0,  183,    0,    0,  172,  172,
    0,  183,  172,  183,    0,    0,    0,    0,  183,    0,
  183,    0,    0,    0,    0,    0,  183,    0,  183,  183,
    0,  183,  183,  183,  183,    0,    0,    0,    0,  183,
    0,  183,    0,    0,  183,  183,  183,    0,  183,  183,
  183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
  183,  183,  183,  183,  183,    0,  183,  183,  183,  183,
  183,  183,  183,  183,  183,    0,  183,  183,  183,  183,
  183,    0,  183,  183,  183,  183,  183,  183,  183,  183,
    0,  183,  183,  183,  183,  183,    0,    0,    0,    0,
    0,  124,    0,    0,  183,  183,    0,  124,  183,  124,
    0,    0,    0,    0,  124,  124,  124,    0,    0,    0,
    0,    0,  124,    0,  124,  124,    0,  124,  124,  124,
  124,    0,    0,    0,    0,  124,    0,  124,    0,    0,
    0,  124,  124,  124,  124,  124,  124,  124,  124,  124,
  124,  124,  124,  124,  124,  124,  124,  124,  124,  124,
  124,    0,  124,  124,  124,  124,  124,  124,  124,  124,
  124,    0,  124,    0,    0,  124,  124,    0,  124,  124,
  124,  124,  124,  124,  124,  124,    0,  124,  124,  124,
  124,  124,    0,    0,    0,    0,    0,  107,    0,    0,
  124,  124,    0,  107,  124,  107,    0,    0,    0,    0,
  107,  107,  107,    0,    0,    0,    0,    0,  107,    0,
  107,  107,    0,  107,  107,  107,  107,    0,    0,    0,
    0,  107,    0,  107,    0,    0,  107,  107,  107,  107,
  107,  107,  107,  107,  107,    0,  107,    0,  107,    0,
  107,    0,  107,  107,  107,  107,  107,    0,  107,  107,
  107,  107,  107,  107,  107,  107,  107,    0,  107,  107,
  107,  107,  107,    0,  107,  107,  107,  107,  107,  107,
  107,  107,    0,  107,  107,  107,  107,  107,    0,    0,
    0,    0,    0,  114,    0,    0,  107,  107,    0,  114,
  107,  114,    0,    0,    0,    0,  114,  114,  114,    0,
    0,    0,    0,    0,  114,    0,  114,  114,    0,  114,
  114,  114,  114,    0,    0,    0,    0,  114,    0,  114,
    0,    0,  114,    0,  114,  114,  114,    0,  114,    0,
  114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
    0,  114,  114,    0,  114,  114,  114,  114,  114,  114,
  114,  114,  114,    0,  114,  114,  114,  114,  114,    0,
  114,  114,  114,  114,  114,  114,  114,  114,    0,  114,
  114,  114,  114,  114,    0,    0,    0,    0,    0,  112,
    0,    0,  114,  114,    0,  112,  114,  112,    0,    0,
    0,    0,  112,  112,  112,    0,    0,    0,    0,    0,
  112,    0,  112,  112,    0,  112,  112,  112,  112,    0,
    0,    0,    0,  112,    0,  112,    0,    0,  112,  112,
  112,  112,  112,  112,  112,  112,  112,    0,  112,    0,
  112,    0,  112,    0,  112,  112,  112,  112,  112,    0,
  112,  112,  112,  112,  112,  112,  112,  112,  112,    0,
  112,  112,  112,  112,  112,    0,  112,  112,  112,  112,
  112,  112,  112,  112,    0,  112,  112,  112,  112,  112,
    0,    0,    0,    0,    0,  111,    0,    0,  112,  112,
    0,  111,  112,  111,    0,    0,    0,    0,  111,  111,
  111,    0,    0,    0,    0,    0,  111,    0,  111,  111,
    0,  111,  111,  111,  111,    0,    0,    0,    0,  111,
    0,  111,    0,    0,  111,  111,  111,  111,  111,  111,
  111,  111,  111,    0,  111,    0,  111,    0,  111,    0,
  111,  111,  111,  111,  111,    0,  111,  111,  111,  111,
  111,  111,  111,  111,  111,    0,  111,  111,  111,  111,
  111,    0,  111,  111,  111,  111,  111,  111,  111,  111,
    0,  111,  111,  111,  111,  111,    0,    0,    0,    0,
    0,  108,    0,    0,  111,  111,    0,  108,  111,  108,
    0,    0,    0,    0,  108,  108,  108,    0,    0,    0,
    0,    0,  108,    0,  108,  108,    0,  108,  108,  108,
  108,    0,    0,    0,    0,  108,    0,  108,    0,    0,
  108,  108,  108,  108,  108,  108,  108,  108,  108,    0,
  108,    0,  108,    0,  108,    0,  108,  108,  108,  108,
  108,    0,  108,  108,  108,  108,  108,  108,  108,  108,
  108,    0,  108,  108,  108,  108,  108,    0,  108,  108,
  108,  108,  108,  108,  108,  108,    0,  108,  108,  108,
  108,  108,    0,    0,    0,    0,    0,  110,    0,    0,
  108,  108,    0,  110,  108,  110,    0,    0,    0,    0,
  110,  110,  110,    0,    0,    0,    0,    0,  110,    0,
  110,  110,    0,  110,  110,  110,  110,    0,    0,    0,
    0,  110,    0,  110,    0,    0,  110,  110,  110,  110,
  110,  110,  110,  110,  110,    0,  110,    0,  110,    0,
  110,    0,  110,  110,  110,  110,  110,    0,  110,  110,
  110,  110,  110,  110,  110,  110,  110,    0,  110,  110,
  110,  110,  110,    0,  110,  110,  110,  110,  110,  110,
  110,  110,    0,  110,  110,  110,  110,  110,    0,    0,
    0,    0,    0,  109,    0,    0,  110,  110,    0,  109,
  110,  109,    0,    0,    0,    0,  109,  109,  109,    0,
    0,    0,    0,    0,  109,    0,  109,  109,    0,  109,
  109,  109,  109,    0,    0,    0,    0,  109,    0,  109,
    0,    0,  109,  109,  109,  109,  109,  109,  109,  109,
  109,    0,  109,    0,  109,    0,  109,    0,  109,  109,
  109,  109,  109,    0,  109,  109,  109,  109,  109,  109,
  109,  109,  109,    0,  109,  109,  109,  109,  109,    0,
  109,  109,  109,  109,  109,  109,  109,  109,    0,  109,
  109,  109,  109,  109,    0,    0,    0,    0,    0,  113,
    0,    0,  109,  109,    0,  113,  109,  113,    0,    0,
    0,    0,  113,  113,  113,    0,    0,    0,    0,    0,
  113,    0,  113,  113,    0,  113,  113,  113,  113,    0,
    0,    0,    0,  113,    0,  113,    0,    0,  113,  113,
  113,  113,  113,  113,  113,  113,  113,    0,  113,    0,
  113,    0,  113,    0,  113,  113,  113,  113,  113,    0,
  113,  113,  113,  113,  113,  113,  113,  113,  113,    0,
  113,  113,  113,  113,  113,    0,  113,  113,  113,  113,
  113,  113,  113,  113,    0,  113,  113,  113,  113,  113,
    0,    0,    0,    0,    0,  115,    0,    0,  113,  113,
    0,  115,  113,  115,    0,    0,    0,    0,  115,  115,
  115,    0,    0,    0,    0,    0,  115,    0,  115,  115,
    0,  115,  115,  115,  115,    0,    0,    0,    0,  115,
    0,  115,    0,    0,  115,    0,  115,  115,  115,    0,
  115,    0,  115,  115,  115,  115,  115,  115,  115,  115,
  115,  115,    0,  115,  115,    0,  115,  115,  115,  115,
  115,  115,  115,  115,  115,    0,  115,  115,  115,  115,
  115,    0,  115,  115,  115,  115,  115,  115,  115,  115,
    0,  115,  115,  115,  115,  115,    0,    0,    0,    0,
    0,  117,    0,    0,  115,  115,    0,  117,  115,  117,
    0,    0,    0,    0,  117,  117,  117,    0,    0,    0,
    0,    0,  117,    0,  117,  117,    0,  117,  117,  117,
  117,    0,    0,    0,    0,  117,    0,  117,    0,    0,
  117,    0,  117,  117,  117,    0,  117,    0,  117,  117,
  117,  117,  117,  117,  117,  117,  117,  117,    0,  117,
  117,    0,  117,  117,  117,  117,  117,  117,  117,  117,
  117,    0,  117,  117,  117,  117,  117,    0,  117,  117,
  117,  117,  117,  117,  117,  117,    0,  117,  117,  117,
  117,  117,    0,    0,    0,    0,    0,  118,    0,    0,
  117,  117,    0,  118,  117,  118,    0,    0,    0,    0,
  118,  118,  118,    0,    0,    0,    0,    0,  118,    0,
  118,  118,    0,  118,  118,  118,  118,    0,    0,    0,
    0,  118,    0,  118,    0,    0,  118,    0,  118,  118,
  118,    0,  118,    0,  118,  118,  118,  118,  118,  118,
  118,  118,  118,  118,    0,  118,  118,    0,  118,  118,
  118,  118,  118,  118,  118,  118,  118,    0,  118,  118,
  118,  118,  118,    0,  118,  118,  118,  118,  118,  118,
  118,  118,    0,  118,  118,  118,  118,  118,    0,    0,
    0,    0,    0,  116,    0,    0,  118,  118,    0,  116,
  118,  116,    0,    0,    0,    0,  116,  116,  116,    0,
    0,    0,    0,    0,  116,    0,  116,  116,    0,  116,
  116,  116,  116,    0,    0,    0,    0,  116,    0,  116,
    0,    0,  116,    0,  116,  116,  116,    0,  116,    0,
  116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
    0,  116,  116,    0,  116,  116,  116,  116,  116,  116,
  116,  116,  116,    0,  116,  116,  116,  116,  116,    0,
  116,  116,  116,  116,  116,  116,  116,  116,    0,  116,
  116,  116,  116,  116,    0,    0,    0,    0,    0,  129,
    0,    0,  116,  116,    0,  129,  116,  129,    0,    0,
    0,    0,  129,  129,  129,    0,    0,    0,    0,    0,
  129,    0,  129,  129,    0,  129,  129,  129,  129,    0,
    0,    0,    0,  129,    0,  129,    0,    0,  129,  129,
  129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
  129,  129,  129,  129,  129,    0,  129,  129,  129,    0,
  129,  129,  129,  129,  129,  129,  129,  129,  129,    0,
  129,  129,  129,  129,  129,    0,  129,  129,    0,  129,
  129,  129,  129,    0,    0,  129,    0,  129,    0,  129,
    0,    0,    0,    0,    0,  105,    0,    0,  129,  129,
    0,  105,  129,  105,    0,    0,    0,    0,  105,  105,
  105,    0,    0,    0,    0,    0,  105,    0,  105,  105,
    0,  105,  105,  105,  105,    0,    0,    0,    0,  105,
    0,  105,    0,    0,  105,  105,  105,  105,  105,  105,
  105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
  105,  105,  105,  105,  105,    0,    0,  105,    0,  105,
    0,    0,  105,    0,  105,    0,  105,  105,  105,  105,
    0,    0,    0,  105,  105,  105,  105,  105,  105,  105,
    0,  105,  105,  105,  105,  105,    0,    0,    0,    0,
    0,   82,    0,    0,  105,  105,    0,   82,  105,   82,
    0,    0,    0,    0,   82,   82,   82,    0,    0,    0,
    0,    0,   82,    0,   82,   82,    0,   82,   82,   82,
   82,    0,    0,    0,    0,   82,    0,    0,    0,    0,
   82,   82,    0,   82,    0,   82,    0,   82,    0,   82,
    0,   82,    0,   82,    0,   82,    0,   82,   82,    0,
    0,    0,   82,    0,   82,    0,   82,   82,    0,   82,
    0,    0,    0,   82,   82,    0,   82,    0,   82,    0,
   82,   82,   82,   82,   82,   82,    0,   82,   82,   82,
   82,   82,   69,   69,   69,   69,   69,   69,    0,    0,
   69,   82,   69,    0,   82,    0,    0,    0,   69,   69,
   69,    0,   69,    0,    0,    0,   69,    0,   69,    0,
   69,   69,    0,   69,   69,    0,   69,    0,    0,    0,
   69,   69,   69,    0,    0,   69,    0,   69,    0,   69,
    0,   69,    0,   69,    0,   69,    0,   69,    0,   69,
   69,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   69,    0,   69,   69,    0,   69,   69,
   69,    0,    0,    0,    0,    0,    0,    0,   69,   69,
   69,    0,   69,   72,   73,   74,   75,   76,   77,    0,
    0,   78,    0,   79,   69,    0,    0,    0,    0,    0,
   80,   81,    0,   82,    0,    0,    0,   52,    0,   83,
    0,   54,   55,    0,   84,   85,    0,   86,    0,    0,
    0,   87,   88,   89,    0,    0,   90,    0,   91,    0,
   92,    0,   93,    0,   94,    0,   95,    0,   96,    0,
   97,   98,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   99,    0,  100,  101,    0,  102,
  103,  104,    0,  105,    0,    0,    0,    0,    0,  106,
    0,  107,    0,  108,   72,   73,   74,   75,   76,   77,
    0,    0,   78,    0,   79,  109,    0,    0,    0,    0,
    0,   80,   81,    0,   82,    0,    0,    0,    0,    0,
   83,    0,    0,    0,    0,   84,   85,    0,   86,    0,
    0,    0,   87,   88,   89,    0,    0,   90,    0,   91,
    0,   92,    0,   93,    0,   94,    0,   95,    0,   96,
    0,   97,   98,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   99,    0,  100,  101,    0,
  102,  103,  104,    0,  105,    0,    0,    0,    0,    0,
  106,    0,  107,    0,  108,  318,    0,   72,   73,   74,
   75,   76,   77,    0,    0,   78,  109,   79,    0,    0,
  358,    0,    0,    0,   80,   81,    0,   82,    0,    0,
    0,    0,    0,   83,    0,    0,    0,    0,   84,   85,
    0,   86,    0,    0,    0,   87,   88,   89,    0,    0,
   90,    0,   91,    0,   92,    0,   93,    0,   94,    0,
   95,    0,   96,    0,   97,   98,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   99,    0,
  100,  101,    0,  102,  103,  104,    0,  105,    0,    0,
    0,    0,    0,  106,    0,  107,    0,  108,   72,   73,
   74,   75,   76,   77,    0,    0,   78,    0,   79,  109,
    0,    0,    0,    0,    0,   80,   81,    0,   82,    0,
    0,    0,    0,    0,   83,    0,    0,    0,    0,   84,
   85,    0,   86,    0,    0,    0,   87,   88,   89,    0,
    0,   90,    0,   91,    0,   92,    0,   93,    0,   94,
    0,   95,    0,   96,    0,   97,   98,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   99,
    0,  100,  101,    0,  102,  103,  104,    0,  105,    0,
    0,    0,    0,    0,  106,    0,  107,    0,  108,  172,
   74,   75,   76,   77,    0,    0,   78,    0,   79,    0,
  109,    0,    0,    0,    0,   80,   81,    0,   82,    0,
    0,    0,    0,    0,   83,    0,    0,    0,    0,   84,
   85,    0,   86,    0,    0,    0,   87,   88,   89,    0,
    0,   90,    0,   91,    0,   92,    0,   93,    0,   94,
    0,   95,    0,   96,    0,   97,   98,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   99,
    0,  100,  101,    0,  102,  103,  104,    0,  105,    0,
    0,    0,    0,    0,  106,    0,  107,    0,  108,   73,
   74,   75,   76,   77,    0,    0,   78,    0,   79,    0,
  109,    0,    0,    0,    0,   80,   81,    0,   82,    0,
    0,    0,    0,    0,   83,    0,    0,    0,    0,   84,
   85,    0,   86,    0,    0,    0,   87,   88,   89,    0,
    0,   90,    0,   91,    0,   92,    0,   93,    0,   94,
    0,   95,    0,   96,    0,   97,   98,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   99,
    0,  100,  101,    0,  102,  103,  104,    0,  105,    0,
    0,    0,    0,    0,  106,   35,  107,    0,  108,    0,
   35,    0,    0,    0,    0,   35,    0,    0,    0,    0,
  109,   37,    0,   35,    0,   35,   37,   35,   35,    0,
    0,   37,    0,    0,   35,    0,    0,    0,    0,   37,
  198,   37,    0,   37,   37,  199,    0,  200,    0,  201,
   37,  202,    0,  203,    0,  204,    0,  205,    0,  206,
    0,    0,  207,  208,    0,    0,  209,    0,  210,    0,
    0,  211,    0,  212,    0,  213,    0,    0,  214,    0,
    0,    0,  215,    0,    0,    0,    0,    0,    0,    0,
    0,   35,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   35,    0,  216,    0,   35,    0,   37,    0,    0,
   50,   50,    0,   50,    0,   50,    0,   37,   50,   50,
   50,   37,    0,   50,    0,   50,   50,   50,   50,   50,
    0,   50,   50,   50,   50,    0,    0,    0,    0,   50,
    0,   50,    0,    0,   50,   50,   50,   50,   50,   50,
   50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
   50,   50,   50,   50,   50,    0,   50,   50,   50,   50,
   50,   50,   50,   50,   50,    0,   50,   50,   50,   50,
   50,    0,   50,   50,    0,   50,   50,   50,   50,   50,
    0,   50,    0,   50,   50,   50,    0,    0,    0,    0,
    0,   50,    0,    0,   50,   50,    0,   52,   50,   52,
    0,    0,    0,    0,   52,   52,   52,    0,    0,    0,
    0,    0,   52,    0,   52,   52,    0,   52,   52,   52,
   52,    0,    0,    0,    0,   52,    0,   52,    0,    0,
    0,   52,   52,    0,   52,    0,   52,    0,   52,    0,
   52,    0,   52,    0,   52,    0,   52,    0,    0,   52,
   52,    0,   52,   52,   52,   52,   52,   52,   52,   52,
   52,    0,   52,    0,    0,   52,    0,    0,    0,   52,
    0,   52,   52,   52,   52,   52,    0,   52,    0,   52,
    0,   52,    0,    0,    0,    0,    0,    0,    0,    0,
   52,   52,  273,    0,   52,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,  285,  286,  287,  288,  289,
  290,  291,  292,
  ]
  yycheck := [                         20,
   78,   42,   49,  105,  198,  107,  244,   85,   86,   89,
   44,   91,   92,   93,   94,   95,   96,   97,   98,   99,
  100,  101,  102,  103,  104,    3,    4,   31,  222,  109,
  108,  151,  257,  257,  317,  257,  272,  270,   79,   80,
  262,   82,   63,   84,  270,   86,   87,   88,   56,   57,
   58,  257,  299,  275,   62,  277,  299,  279,  280,   37,
   64,  257,  257,  317,  299,  106,  299,  256,  263,  257,
  257,  149,  270,  299,  289,  263,  263,  272,   56,   57,
   58,  257,  278,  278,   62,  280,  281,  325,  342,  284,
  285,  286,  280,  281,  281,  270,  284,  285,  345,  257,
   10,  299,  345,  272,  271,  263,  341,  343,  280,  278,
  157,  291,  284,  285,  272,  235,  150,  286,  342,  299,
  278,  346,  280,  281,  299,  146,  284,  285,  286,  367,
  336,  353,  299,  343,  236,  357,  238,  145,  344,  283,
  257,  336,   52,  260,   54,   55,  342,  341,  343,  153,
  296,  257,  232,  233,  339,  299,  267,  259,  257,  299,
  267,  239,  357,  262,  316,  360,  244,  145,  267,  357,
  357,  343,  360,  360,  343,  286,  275,  255,  277,  286,
  279,  280,  339,  329,  330,  343,  257,  286,  297,  313,
  257,  262,  301,  271,  303,  336,  267,  238,  338,  357,
  340,  341,  360,  257,  275,  314,  277,  274,  279,  280,
  339,  257,  336,  315,  339,  286,  262,  341,  347,  344,
  344,  267,  346,  264,  265,  266,  267,  268,  343,  275,
  332,  277,  347,  279,  280,  339,  241,  257,  243,  343,
  286,  337,  257,  339,  343,  257,  251,  325,  339,  345,
  262,  347,  339,  339,  353,  267,  347,  339,  357,  257,
  347,  347,  337,  275,  339,  277,  343,  279,  280,  344,
  347,  349,  343,  286,  286,  339,  338,  339,  340,  341,
  257,  345,  353,  345,  331,  262,  357,  343,  278,  367,
  267,  347,  337,  334,  339,  281,  257,  343,  275,  344,
  277,  262,  279,  280,  341,  342,  347,  353,  318,  286,
  320,  357,  322,  323,  275,  325,  277,  339,  279,  280,
  339,  362,  332,  345,  334,  341,  345,  336,  369,  370,
  371,  352,  256,  257,  258,  259,  260,  261,  341,  263,
  264,  353,  266,  337,  337,  357,  339,  339,  272,  273,
  274,  257,  276,  345,  278,  343,  280,  281,  282,  347,
  284,  285,  286,  287,  288,  337,  290,  339,    3,    4,
  294,  295,  296,    3,    4,  299,  353,  301,  336,  303,
  357,  305,  305,  307,  307,  309,  309,  311,  311,  313,
  314,  337,  353,  339,  272,  337,  357,  339,  217,  218,
  219,  220,  221,  327,  223,  329,  330,  336,  332,  333,
  334,  336,  336,  228,  229,  230,  231,  299,  342,  234,
  344,  257,  346,  257,  258,  259,  260,  261,  258,  259,
  260,  261,  257,  357,  358,  342,  360,  262,  263,  337,
  265,  339,  267,  249,  250,  270,  271,  272,  345,  343,
  275,  347,  277,  278,  279,  280,  281,  336,  283,  284,
  285,  286,  224,  225,  226,  227,  291,  272,  293,  343,
  337,  296,  297,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
  315,  316,  341,  318,  319,  320,  321,  322,  323,  324,
  325,  326,  346,  328,  329,  330,  331,  332,  346,  334,
  335,  336,  337,  338,  339,  340,  341,  265,  341,  344,
  345,  346,  347,  337,  337,  337,  257,  337,  353,  345,
  257,  356,  357,  272,  337,  360,  263,  283,  265,  291,
  337,  339,  337,  270,  271,  272,  347,  341,    1,    9,
   47,  278,   50,  280,  281,   51,  283,  284,  285,  286,
  159,  271,  371,   -1,  291,   -1,  293,   -1,   -1,  296,
  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
   -1,  318,  319,  320,  321,  322,  323,  324,  325,  326,
   -1,  328,  329,  330,  331,  332,   -1,  334,  335,  336,
  337,  338,  339,  340,  341,   -1,  343,  344,  345,  346,
  347,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,  356,
  357,   -1,  263,  360,  265,   -1,   -1,   -1,   -1,  270,
  271,  272,   -1,   -1,   -1,   -1,   -1,  278,   -1,  280,
  281,   -1,  283,  284,  285,  286,   -1,   -1,   -1,   -1,
  291,   -1,  293,   -1,   -1,  296,  297,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,   -1,  318,  319,  320,
  321,  322,  323,  324,  325,  326,   -1,  328,  329,  330,
  331,  332,   -1,  334,  335,  336,  337,  338,  339,  340,
  341,   -1,  343,  344,  345,  346,  347,   -1,   -1,   -1,
   -1,   -1,  257,   -1,   -1,  356,  357,   -1,  263,  360,
  265,   -1,   -1,   -1,   -1,  270,  271,  272,   -1,   -1,
   -1,   -1,   -1,  278,   -1,  280,  281,   -1,  283,  284,
  285,  286,   -1,   -1,   -1,   -1,  291,   -1,  293,   -1,
   -1,  296,  297,  298,   -1,  300,  301,  302,  303,  304,
  305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
  315,  316,   -1,  318,  319,  320,  321,  322,  323,  324,
  325,  326,   -1,  328,  329,  330,  331,  332,   -1,  334,
  335,  336,  337,  338,  339,  340,  341,   -1,  343,  344,
  345,  346,  347,   -1,   -1,   -1,   -1,   -1,  257,   -1,
   -1,  356,  357,   -1,  263,  360,  265,   -1,   -1,   -1,
   -1,  270,  271,  272,   -1,   -1,   -1,   -1,   -1,  278,
   -1,  280,  281,   -1,  283,  284,  285,  286,   -1,   -1,
   -1,   -1,  291,   -1,  293,   -1,   -1,  296,  297,  298,
   -1,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,   -1,  318,
  319,  320,  321,  322,  323,  324,  325,  326,   -1,  328,
  329,  330,  331,  332,   -1,  334,  335,  336,  337,  338,
  339,  340,  341,   -1,  343,  344,  345,  346,  347,   -1,
   -1,   -1,   -1,   -1,  257,   -1,   -1,  356,  357,   -1,
  263,  360,  265,   -1,   -1,   -1,   -1,  270,  271,  272,
   -1,   -1,   -1,   -1,   -1,  278,   -1,  280,  281,   -1,
  283,  284,  285,  286,   -1,   -1,   -1,   -1,  291,   -1,
  293,   -1,   -1,  296,  297,  298,   -1,  300,  301,  302,
  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
  313,  314,  315,  316,   -1,  318,  319,  320,  321,  322,
  323,  324,  325,  326,   -1,  328,  329,  330,  331,  332,
   -1,  334,  335,  336,  337,  338,  339,  340,  341,   -1,
  343,  344,  345,  346,  347,  257,   -1,   -1,   -1,   -1,
   -1,  263,   -1,  356,  357,   -1,   -1,  360,  270,  271,
  272,   -1,   -1,   -1,   -1,   -1,  278,   -1,  280,  281,
   -1,  283,  284,  285,  286,   -1,   -1,   -1,   -1,  291,
   -1,  293,   -1,   -1,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,   -1,  318,  319,  320,  321,
  322,  323,  324,  325,  326,   -1,  328,  329,  330,  331,
  332,   -1,  334,  335,  336,  337,  338,  339,  340,  341,
   -1,  343,  344,  345,  346,  347,   -1,   -1,   -1,   -1,
   -1,  257,   -1,   -1,  356,  357,   -1,  263,  360,  265,
   -1,   -1,   -1,   -1,  270,  271,  272,   -1,   -1,   -1,
   -1,   -1,  278,   -1,  280,  281,   -1,  283,  284,  285,
  286,   -1,   -1,   -1,   -1,  291,   -1,  293,   -1,   -1,
  296,  297,  298,   -1,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,   -1,  318,  319,  320,  321,  322,  323,  324,  325,
  326,   -1,  328,  329,  330,  331,  332,   -1,  334,  335,
  336,  337,  338,  339,  340,  341,   -1,  343,  344,  345,
  346,  347,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,
  356,  357,   -1,  263,  360,  265,   -1,   -1,   -1,   -1,
  270,  271,  272,   -1,   -1,   -1,   -1,   -1,  278,   -1,
  280,  281,   -1,  283,  284,  285,  286,   -1,   -1,   -1,
   -1,  291,   -1,  293,   -1,   -1,  296,  297,  298,   -1,
  300,  301,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,  316,   -1,  318,  319,
  320,  321,  322,  323,  324,  325,  326,   -1,  328,  329,
  330,  331,  332,   -1,  334,  335,  336,  337,  338,  339,
  340,  341,   -1,  343,  344,  345,  346,  347,   -1,   -1,
   -1,   -1,   -1,  257,   -1,   -1,  356,  357,   -1,  263,
  360,  265,   -1,   -1,   -1,   -1,  270,  271,  272,   -1,
   -1,   -1,   -1,   -1,  278,   -1,  280,  281,   -1,  283,
  284,  285,  286,   -1,   -1,   -1,   -1,  291,   -1,  293,
   -1,   -1,  296,  297,  298,   -1,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,   -1,  318,  319,  320,  321,  322,  323,
  324,  325,  326,   -1,  328,  329,  330,  331,  332,   -1,
  334,  335,  336,  337,  338,  339,  340,  341,   -1,  343,
  344,  345,  346,  347,   -1,   -1,   -1,   -1,   -1,  257,
   -1,   -1,  356,  357,   -1,  263,  360,  265,   -1,   -1,
   -1,   -1,  270,  271,  272,   -1,   -1,   -1,   -1,   -1,
  278,   -1,  280,  281,   -1,  283,  284,  285,  286,   -1,
   -1,   -1,   -1,  291,   -1,  293,   -1,   -1,  296,  297,
  298,   -1,  300,  301,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,  316,   -1,
  318,  319,  320,  321,  322,  323,  324,  325,  326,   -1,
  328,  329,  330,  331,  332,   -1,  334,  335,  336,  337,
  338,  339,  340,  341,   -1,  343,  344,  345,  346,  347,
   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,  356,  357,
   -1,  263,  360,  265,   -1,   -1,   -1,   -1,  270,  271,
  272,   -1,   -1,   -1,   -1,   -1,  278,   -1,  280,  281,
   -1,  283,  284,  285,  286,   -1,   -1,   -1,   -1,  291,
   -1,  293,   -1,   -1,  296,  297,  298,   -1,  300,  301,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,   -1,  318,  319,  320,  321,
  322,  323,  324,  325,  326,   -1,  328,  329,  330,  331,
  332,   -1,  334,  335,  336,  337,  338,  339,  340,  341,
   -1,  343,  344,  345,  346,  347,   -1,   -1,   -1,   -1,
   -1,  257,   -1,   -1,  356,  357,  272,  263,  360,  265,
   -1,   -1,  278,   -1,  280,  271,  272,   -1,  284,  285,
  286,   -1,  278,   -1,  280,  281,   -1,  283,  284,  285,
  286,   -1,   -1,   -1,   -1,  291,   -1,  293,   -1,   -1,
  296,  297,  298,   -1,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,   -1,  318,  319,  320,  321,  322,  323,  324,  325,
  326,   -1,  328,  329,  330,  331,  332,  343,  334,  335,
  336,  337,  338,  339,  340,  341,   -1,  343,  344,  345,
  346,  347,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,
  356,  357,   -1,  263,  360,  265,   -1,   -1,   -1,   -1,
   -1,  271,  272,   -1,   -1,   -1,   -1,   -1,  278,   -1,
  280,  281,   -1,  283,  284,  285,  286,   -1,   -1,   -1,
   -1,  291,   -1,  293,   -1,   -1,  296,  297,  298,   -1,
  300,  301,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,  316,   -1,  318,  319,
  320,  321,  322,  323,  324,  325,  326,   -1,  328,  329,
  330,  331,  332,   -1,  334,  335,  336,  337,  338,  339,
  340,  341,   -1,  343,  344,  345,  346,  347,   -1,   -1,
   -1,   -1,   -1,  257,   -1,   -1,  356,  357,   -1,  263,
  360,  265,   -1,   -1,   -1,   -1,   -1,  271,  272,   -1,
   -1,   -1,   -1,   -1,  278,   -1,  280,  281,   -1,  283,
  284,  285,  286,   -1,   -1,   -1,   -1,  291,   -1,  293,
   -1,   -1,  296,  297,  298,   -1,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,   -1,  318,  319,  320,  321,  322,  323,
  324,  325,  326,   -1,  328,  329,  330,  331,  332,   -1,
  334,  335,  336,  337,  338,  339,  340,  341,   -1,  343,
  344,  345,  346,  347,   -1,   -1,   -1,   -1,   -1,  257,
   -1,   -1,  356,  357,   -1,  263,  360,  265,   -1,   -1,
   -1,   -1,   -1,  271,  272,   -1,   -1,   -1,   -1,   -1,
  278,   -1,  280,  281,   -1,  283,  284,  285,  286,   -1,
   -1,   -1,   -1,  291,   -1,  293,   -1,   -1,  296,  297,
  298,   -1,  300,  301,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,  316,   -1,
  318,  319,  320,  321,  322,  323,  324,  325,  326,   -1,
  328,  329,  330,  331,  332,   -1,  334,  335,  336,  337,
  338,  339,  340,  341,   -1,  343,  344,  345,  346,  347,
   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,  356,  357,
   -1,  263,  360,  265,   -1,   -1,   -1,   -1,  270,   -1,
  272,   -1,   -1,   -1,   -1,   -1,  278,   -1,  280,  281,
   -1,  283,  284,  285,  286,   -1,   -1,   -1,   -1,  291,
   -1,  293,   -1,   -1,  296,  297,  298,   -1,  300,  301,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,   -1,  318,  319,  320,  321,
  322,  323,  324,  325,  326,   -1,  328,  329,  330,  331,
  332,   -1,  334,  335,  336,  337,  338,  339,  340,  341,
   -1,  343,  344,  345,  346,  347,   -1,   -1,   -1,   -1,
   -1,  257,   -1,   -1,  356,  357,   -1,  263,  360,  265,
   -1,   -1,   -1,   -1,  270,  271,  272,   -1,   -1,   -1,
   -1,   -1,  278,   -1,  280,  281,   -1,  283,  284,  285,
  286,   -1,   -1,   -1,   -1,  291,   -1,  293,   -1,   -1,
   -1,  297,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,   -1,  318,  319,  320,  321,  322,  323,  324,  325,
  326,   -1,  328,   -1,   -1,  331,  332,   -1,  334,  335,
  336,  337,  338,  339,  340,  341,   -1,  343,  344,  345,
  346,  347,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,
  356,  357,   -1,  263,  360,  265,   -1,   -1,   -1,   -1,
  270,  271,  272,   -1,   -1,   -1,   -1,   -1,  278,   -1,
  280,  281,   -1,  283,  284,  285,  286,   -1,   -1,   -1,
   -1,  291,   -1,  293,   -1,   -1,  296,  297,  298,  299,
  300,  301,  302,  303,  304,   -1,  306,   -1,  308,   -1,
  310,   -1,  312,  313,  314,  315,  316,   -1,  318,  319,
  320,  321,  322,  323,  324,  325,  326,   -1,  328,  329,
  330,  331,  332,   -1,  334,  335,  336,  337,  338,  339,
  340,  341,   -1,  343,  344,  345,  346,  347,   -1,   -1,
   -1,   -1,   -1,  257,   -1,   -1,  356,  357,   -1,  263,
  360,  265,   -1,   -1,   -1,   -1,  270,  271,  272,   -1,
   -1,   -1,   -1,   -1,  278,   -1,  280,  281,   -1,  283,
  284,  285,  286,   -1,   -1,   -1,   -1,  291,   -1,  293,
   -1,   -1,  296,   -1,  298,  299,  300,   -1,  302,   -1,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
   -1,  315,  316,   -1,  318,  319,  320,  321,  322,  323,
  324,  325,  326,   -1,  328,  329,  330,  331,  332,   -1,
  334,  335,  336,  337,  338,  339,  340,  341,   -1,  343,
  344,  345,  346,  347,   -1,   -1,   -1,   -1,   -1,  257,
   -1,   -1,  356,  357,   -1,  263,  360,  265,   -1,   -1,
   -1,   -1,  270,  271,  272,   -1,   -1,   -1,   -1,   -1,
  278,   -1,  280,  281,   -1,  283,  284,  285,  286,   -1,
   -1,   -1,   -1,  291,   -1,  293,   -1,   -1,  296,  297,
  298,  299,  300,  301,  302,  303,  304,   -1,  306,   -1,
  308,   -1,  310,   -1,  312,  313,  314,  315,  316,   -1,
  318,  319,  320,  321,  322,  323,  324,  325,  326,   -1,
  328,  329,  330,  331,  332,   -1,  334,  335,  336,  337,
  338,  339,  340,  341,   -1,  343,  344,  345,  346,  347,
   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,  356,  357,
   -1,  263,  360,  265,   -1,   -1,   -1,   -1,  270,  271,
  272,   -1,   -1,   -1,   -1,   -1,  278,   -1,  280,  281,
   -1,  283,  284,  285,  286,   -1,   -1,   -1,   -1,  291,
   -1,  293,   -1,   -1,  296,  297,  298,  299,  300,  301,
  302,  303,  304,   -1,  306,   -1,  308,   -1,  310,   -1,
  312,  313,  314,  315,  316,   -1,  318,  319,  320,  321,
  322,  323,  324,  325,  326,   -1,  328,  329,  330,  331,
  332,   -1,  334,  335,  336,  337,  338,  339,  340,  341,
   -1,  343,  344,  345,  346,  347,   -1,   -1,   -1,   -1,
   -1,  257,   -1,   -1,  356,  357,   -1,  263,  360,  265,
   -1,   -1,   -1,   -1,  270,  271,  272,   -1,   -1,   -1,
   -1,   -1,  278,   -1,  280,  281,   -1,  283,  284,  285,
  286,   -1,   -1,   -1,   -1,  291,   -1,  293,   -1,   -1,
  296,  297,  298,  299,  300,  301,  302,  303,  304,   -1,
  306,   -1,  308,   -1,  310,   -1,  312,  313,  314,  315,
  316,   -1,  318,  319,  320,  321,  322,  323,  324,  325,
  326,   -1,  328,  329,  330,  331,  332,   -1,  334,  335,
  336,  337,  338,  339,  340,  341,   -1,  343,  344,  345,
  346,  347,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,
  356,  357,   -1,  263,  360,  265,   -1,   -1,   -1,   -1,
  270,  271,  272,   -1,   -1,   -1,   -1,   -1,  278,   -1,
  280,  281,   -1,  283,  284,  285,  286,   -1,   -1,   -1,
   -1,  291,   -1,  293,   -1,   -1,  296,  297,  298,  299,
  300,  301,  302,  303,  304,   -1,  306,   -1,  308,   -1,
  310,   -1,  312,  313,  314,  315,  316,   -1,  318,  319,
  320,  321,  322,  323,  324,  325,  326,   -1,  328,  329,
  330,  331,  332,   -1,  334,  335,  336,  337,  338,  339,
  340,  341,   -1,  343,  344,  345,  346,  347,   -1,   -1,
   -1,   -1,   -1,  257,   -1,   -1,  356,  357,   -1,  263,
  360,  265,   -1,   -1,   -1,   -1,  270,  271,  272,   -1,
   -1,   -1,   -1,   -1,  278,   -1,  280,  281,   -1,  283,
  284,  285,  286,   -1,   -1,   -1,   -1,  291,   -1,  293,
   -1,   -1,  296,  297,  298,  299,  300,  301,  302,  303,
  304,   -1,  306,   -1,  308,   -1,  310,   -1,  312,  313,
  314,  315,  316,   -1,  318,  319,  320,  321,  322,  323,
  324,  325,  326,   -1,  328,  329,  330,  331,  332,   -1,
  334,  335,  336,  337,  338,  339,  340,  341,   -1,  343,
  344,  345,  346,  347,   -1,   -1,   -1,   -1,   -1,  257,
   -1,   -1,  356,  357,   -1,  263,  360,  265,   -1,   -1,
   -1,   -1,  270,  271,  272,   -1,   -1,   -1,   -1,   -1,
  278,   -1,  280,  281,   -1,  283,  284,  285,  286,   -1,
   -1,   -1,   -1,  291,   -1,  293,   -1,   -1,  296,  297,
  298,  299,  300,  301,  302,  303,  304,   -1,  306,   -1,
  308,   -1,  310,   -1,  312,  313,  314,  315,  316,   -1,
  318,  319,  320,  321,  322,  323,  324,  325,  326,   -1,
  328,  329,  330,  331,  332,   -1,  334,  335,  336,  337,
  338,  339,  340,  341,   -1,  343,  344,  345,  346,  347,
   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,  356,  357,
   -1,  263,  360,  265,   -1,   -1,   -1,   -1,  270,  271,
  272,   -1,   -1,   -1,   -1,   -1,  278,   -1,  280,  281,
   -1,  283,  284,  285,  286,   -1,   -1,   -1,   -1,  291,
   -1,  293,   -1,   -1,  296,   -1,  298,  299,  300,   -1,
  302,   -1,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,   -1,  315,  316,   -1,  318,  319,  320,  321,
  322,  323,  324,  325,  326,   -1,  328,  329,  330,  331,
  332,   -1,  334,  335,  336,  337,  338,  339,  340,  341,
   -1,  343,  344,  345,  346,  347,   -1,   -1,   -1,   -1,
   -1,  257,   -1,   -1,  356,  357,   -1,  263,  360,  265,
   -1,   -1,   -1,   -1,  270,  271,  272,   -1,   -1,   -1,
   -1,   -1,  278,   -1,  280,  281,   -1,  283,  284,  285,
  286,   -1,   -1,   -1,   -1,  291,   -1,  293,   -1,   -1,
  296,   -1,  298,  299,  300,   -1,  302,   -1,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,   -1,  315,
  316,   -1,  318,  319,  320,  321,  322,  323,  324,  325,
  326,   -1,  328,  329,  330,  331,  332,   -1,  334,  335,
  336,  337,  338,  339,  340,  341,   -1,  343,  344,  345,
  346,  347,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,
  356,  357,   -1,  263,  360,  265,   -1,   -1,   -1,   -1,
  270,  271,  272,   -1,   -1,   -1,   -1,   -1,  278,   -1,
  280,  281,   -1,  283,  284,  285,  286,   -1,   -1,   -1,
   -1,  291,   -1,  293,   -1,   -1,  296,   -1,  298,  299,
  300,   -1,  302,   -1,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,   -1,  315,  316,   -1,  318,  319,
  320,  321,  322,  323,  324,  325,  326,   -1,  328,  329,
  330,  331,  332,   -1,  334,  335,  336,  337,  338,  339,
  340,  341,   -1,  343,  344,  345,  346,  347,   -1,   -1,
   -1,   -1,   -1,  257,   -1,   -1,  356,  357,   -1,  263,
  360,  265,   -1,   -1,   -1,   -1,  270,  271,  272,   -1,
   -1,   -1,   -1,   -1,  278,   -1,  280,  281,   -1,  283,
  284,  285,  286,   -1,   -1,   -1,   -1,  291,   -1,  293,
   -1,   -1,  296,   -1,  298,  299,  300,   -1,  302,   -1,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
   -1,  315,  316,   -1,  318,  319,  320,  321,  322,  323,
  324,  325,  326,   -1,  328,  329,  330,  331,  332,   -1,
  334,  335,  336,  337,  338,  339,  340,  341,   -1,  343,
  344,  345,  346,  347,   -1,   -1,   -1,   -1,   -1,  257,
   -1,   -1,  356,  357,   -1,  263,  360,  265,   -1,   -1,
   -1,   -1,  270,  271,  272,   -1,   -1,   -1,   -1,   -1,
  278,   -1,  280,  281,   -1,  283,  284,  285,  286,   -1,
   -1,   -1,   -1,  291,   -1,  293,   -1,   -1,  296,  297,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,   -1,  314,  315,  316,   -1,
  318,  319,  320,  321,  322,  323,  324,  325,  326,   -1,
  328,  329,  330,  331,  332,   -1,  334,  335,   -1,  337,
  338,  339,  340,   -1,   -1,  343,   -1,  345,   -1,  347,
   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,  356,  357,
   -1,  263,  360,  265,   -1,   -1,   -1,   -1,  270,  271,
  272,   -1,   -1,   -1,   -1,   -1,  278,   -1,  280,  281,
   -1,  283,  284,  285,  286,   -1,   -1,   -1,   -1,  291,
   -1,  293,   -1,   -1,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,   -1,   -1,  319,   -1,  321,
   -1,   -1,  324,   -1,  326,   -1,  328,  329,  330,  331,
   -1,   -1,   -1,  335,  336,  337,  338,  339,  340,  341,
   -1,  343,  344,  345,  346,  347,   -1,   -1,   -1,   -1,
   -1,  257,   -1,   -1,  356,  357,   -1,  263,  360,  265,
   -1,   -1,   -1,   -1,  270,  271,  272,   -1,   -1,   -1,
   -1,   -1,  278,   -1,  280,  281,   -1,  283,  284,  285,
  286,   -1,   -1,   -1,   -1,  291,   -1,   -1,   -1,   -1,
  296,  297,   -1,  299,   -1,  301,   -1,  303,   -1,  305,
   -1,  307,   -1,  309,   -1,  311,   -1,  313,  314,   -1,
   -1,   -1,  318,   -1,  320,   -1,  322,  323,   -1,  325,
   -1,   -1,   -1,  329,  330,   -1,  332,   -1,  334,   -1,
  336,  337,  338,  339,  340,  341,   -1,  343,  344,  345,
  346,  347,  256,  257,  258,  259,  260,  261,   -1,   -1,
  264,  357,  266,   -1,  360,   -1,   -1,   -1,  272,  273,
  274,   -1,  276,   -1,   -1,   -1,  280,   -1,  282,   -1,
  284,  285,   -1,  287,  288,   -1,  290,   -1,   -1,   -1,
  294,  295,  296,   -1,   -1,  299,   -1,  301,   -1,  303,
   -1,  305,   -1,  307,   -1,  309,   -1,  311,   -1,  313,
  314,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  327,   -1,  329,  330,   -1,  332,  333,
  334,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  342,  343,
  344,   -1,  346,  256,  257,  258,  259,  260,  261,   -1,
   -1,  264,   -1,  266,  358,   -1,   -1,   -1,   -1,   -1,
  273,  274,   -1,  276,   -1,   -1,   -1,  280,   -1,  282,
   -1,  284,  285,   -1,  287,  288,   -1,  290,   -1,   -1,
   -1,  294,  295,  296,   -1,   -1,  299,   -1,  301,   -1,
  303,   -1,  305,   -1,  307,   -1,  309,   -1,  311,   -1,
  313,  314,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  327,   -1,  329,  330,   -1,  332,
  333,  334,   -1,  336,   -1,   -1,   -1,   -1,   -1,  342,
   -1,  344,   -1,  346,  256,  257,  258,  259,  260,  261,
   -1,   -1,  264,   -1,  266,  358,   -1,   -1,   -1,   -1,
   -1,  273,  274,   -1,  276,   -1,   -1,   -1,   -1,   -1,
  282,   -1,   -1,   -1,   -1,  287,  288,   -1,  290,   -1,
   -1,   -1,  294,  295,  296,   -1,   -1,  299,   -1,  301,
   -1,  303,   -1,  305,   -1,  307,   -1,  309,   -1,  311,
   -1,  313,  314,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  327,   -1,  329,  330,   -1,
  332,  333,  334,   -1,  336,   -1,   -1,   -1,   -1,   -1,
  342,   -1,  344,   -1,  346,  347,   -1,  256,  257,  258,
  259,  260,  261,   -1,   -1,  264,  358,  266,   -1,   -1,
  269,   -1,   -1,   -1,  273,  274,   -1,  276,   -1,   -1,
   -1,   -1,   -1,  282,   -1,   -1,   -1,   -1,  287,  288,
   -1,  290,   -1,   -1,   -1,  294,  295,  296,   -1,   -1,
  299,   -1,  301,   -1,  303,   -1,  305,   -1,  307,   -1,
  309,   -1,  311,   -1,  313,  314,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  327,   -1,
  329,  330,   -1,  332,  333,  334,   -1,  336,   -1,   -1,
   -1,   -1,   -1,  342,   -1,  344,   -1,  346,  256,  257,
  258,  259,  260,  261,   -1,   -1,  264,   -1,  266,  358,
   -1,   -1,   -1,   -1,   -1,  273,  274,   -1,  276,   -1,
   -1,   -1,   -1,   -1,  282,   -1,   -1,   -1,   -1,  287,
  288,   -1,  290,   -1,   -1,   -1,  294,  295,  296,   -1,
   -1,  299,   -1,  301,   -1,  303,   -1,  305,   -1,  307,
   -1,  309,   -1,  311,   -1,  313,  314,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  327,
   -1,  329,  330,   -1,  332,  333,  334,   -1,  336,   -1,
   -1,   -1,   -1,   -1,  342,   -1,  344,   -1,  346,  257,
  258,  259,  260,  261,   -1,   -1,  264,   -1,  266,   -1,
  358,   -1,   -1,   -1,   -1,  273,  274,   -1,  276,   -1,
   -1,   -1,   -1,   -1,  282,   -1,   -1,   -1,   -1,  287,
  288,   -1,  290,   -1,   -1,   -1,  294,  295,  296,   -1,
   -1,  299,   -1,  301,   -1,  303,   -1,  305,   -1,  307,
   -1,  309,   -1,  311,   -1,  313,  314,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  327,
   -1,  329,  330,   -1,  332,  333,  334,   -1,  336,   -1,
   -1,   -1,   -1,   -1,  342,   -1,  344,   -1,  346,  257,
  258,  259,  260,  261,   -1,   -1,  264,   -1,  266,   -1,
  358,   -1,   -1,   -1,   -1,  273,  274,   -1,  276,   -1,
   -1,   -1,   -1,   -1,  282,   -1,   -1,   -1,   -1,  287,
  288,   -1,  290,   -1,   -1,   -1,  294,  295,  296,   -1,
   -1,  299,   -1,  301,   -1,  303,   -1,  305,   -1,  307,
   -1,  309,   -1,  311,   -1,  313,  314,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  327,
   -1,  329,  330,   -1,  332,  333,  334,   -1,  336,   -1,
   -1,   -1,   -1,   -1,  342,  257,  344,   -1,  346,   -1,
  262,   -1,   -1,   -1,   -1,  267,   -1,   -1,   -1,   -1,
  358,  257,   -1,  275,   -1,  277,  262,  279,  280,   -1,
   -1,  267,   -1,   -1,  286,   -1,   -1,   -1,   -1,  275,
  293,  277,   -1,  279,  280,  298,   -1,  300,   -1,  302,
  286,  304,   -1,  306,   -1,  308,   -1,  310,   -1,  312,
   -1,   -1,  315,  316,   -1,   -1,  319,   -1,  321,   -1,
   -1,  324,   -1,  326,   -1,  328,   -1,   -1,  331,   -1,
   -1,   -1,  335,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  343,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  353,   -1,  356,   -1,  357,   -1,  343,   -1,   -1,
  262,  263,   -1,  265,   -1,  267,   -1,  353,  270,  271,
  272,  357,   -1,  275,   -1,  277,  278,  279,  280,  281,
   -1,  283,  284,  285,  286,   -1,   -1,   -1,   -1,  291,
   -1,  293,   -1,   -1,  296,  297,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,   -1,  318,  319,  320,  321,
  322,  323,  324,  325,  326,   -1,  328,  329,  330,  331,
  332,   -1,  334,  335,   -1,  337,  338,  339,  340,  341,
   -1,  343,   -1,  345,  346,  347,   -1,   -1,   -1,   -1,
   -1,  353,   -1,   -1,  356,  357,   -1,  263,  360,  265,
   -1,   -1,   -1,   -1,  270,  271,  272,   -1,   -1,   -1,
   -1,   -1,  278,   -1,  280,  281,   -1,  283,  284,  285,
  286,   -1,   -1,   -1,   -1,  291,   -1,  293,   -1,   -1,
   -1,  297,  298,   -1,  300,   -1,  302,   -1,  304,   -1,
  306,   -1,  308,   -1,  310,   -1,  312,   -1,   -1,  315,
  316,   -1,  318,  319,  320,  321,  322,  323,  324,  325,
  326,   -1,  328,   -1,   -1,  331,   -1,   -1,   -1,  335,
   -1,  337,  338,  339,  340,  341,   -1,  343,   -1,  345,
   -1,  347,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  356,  357,  196,   -1,  360,  199,  200,  201,  202,  203,
  204,  205,  206,  207,  208,  209,  210,  211,  212,  213,
  214,  215,  216,
  ]
$define YYFINAL 2
$define YYMAXTOKEN 360
  yyname := [
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"IDENT","INTLIT","REALLIT",
"STRINGLIT","CSETLIT","EOFX","ABSTRACT","BREAK","BY","CASE","CLASS","CRITICAL",
"DEFAULT","DO","ELSE","END","EVERY","FAIL","GLOBAL","IF","IMPORT","CONSTRUCTOR",
"LINK","PRIVATE","METHOD","NEXT","OF","PUBLIC","READ","RECORD","REPEAT",
"RETURN","STATIC","SUSPEND","THEN","THREAD","TO","UNTIL","WHILE","BANG","MOD",
"AUGMOD","AND","AUGAND","STAR","AUGSTAR","INTER","AUGINTER","PLUS","AUGPLUS",
"UNION","AUGUNION","MINUS","AUGMINUS","DIFF","AUGDIFF","DOT","SLASH","AUGSLASH",
"ASSIGN","INVASSIGN","LTH","AUGLTH","LTHE","AUGLTHE","EQ","GTH","AUGGTH","GTHE",
"AUGGTHE","QMARK","AUGQMARK","BACKSLASH","CARET","AUGCARET","BAR","TILDE","NE",
"AUGNE","LPAREN","RPAREN","PCOLON","COMMA","MCOLON","COLON","COLONCOLON",
"SEMICOL","LBRACK","RBRACK","LBRACE","RBRACE","DOLLAR","SND","SNDBK","RCV",
"RCVBK","CONST","TOPIC","FUNK","CONASSIGN","STORE","AT","CREATE","fact",
  ]
  yyrule := [
"$accept : program",
"program : decls EOFX",
"decls :",
"decls : decls decl semiOptional",
"decl : record",
"decl : global",
"decl : link",
"decl : import",
"decl : classdef",
"decl : invocDef",
"constructor :",
"constructor : CONSTRUCTOR locals methbody",
"constructor : CONSTRUCTOR LPAREN arglist RPAREN locals methbody",
"classdef : classhead locals methods constructor END",
"classhead : storeFlag CLASS IDENT supers LPAREN arglist RPAREN",
"classhead : storeFlag CLASS IDENT supers",
"supers :",
"supers : COLON IDENT supers",
"supers : COLON packageref supers",
"packageref : IDENT COLONCOLON IDENT",
"packageref : COLONCOLON expr",
"methods :",
"methods : meth methods",
"methods : locals SEMICOL methods",
"methods : record methods",
"methods : invocDef methods",
"methods : fact methods",
"semiOptional :",
"semiOptional : SEMICOL",
"import : IMPORT lnklist",
"link : LINK lnklist",
"lnklist : lnkfile",
"lnklist : lnklist COMMA lnkfile",
"lnkfile : IDENT",
"lnkfile : STRINGLIT",
"global : GLOBAL staticOption idlist",
"global : CONST constlist",
"global : PRIVATE staticOption idlist",
"constlist : constdef",
"constlist : constlist COMMA constdef",
"constdef : IDENT ASSIGN literal",
"record : storeFlag RECORD IDENT LPAREN fldlist RPAREN",
"storeFlag :",
"storeFlag : STORE",
"invocDef : IDENT INVASSIGN query",
"invocDef : IDENT INVASSIGN IDENT LPAREN exprlist RPAREN",
"invocDef : IDENT INVASSIGN LBRACK expr RBRACK",
"invocDef : IDENT INVASSIGN patternList semiOptional",
"query : LPAREN arglist RPAREN LBRACE exprlist RBRACE",
"query : LPAREN arglist RPAREN IDENT LBRACE exprlist RBRACE",
"patternList :",
"patternList : patternList",
"expr :",
"fldlist :",
"fldlist : idlist",
"meth : ABSTRACT methhead",
"meth : methhead locals methbody END",
"methhead : METHOD IDENT LPAREN arglist RPAREN",
"arglist :",
"arglist : parmlist",
"arglist : parmlist LBRACK RBRACK",
"idlist : IDENT",
"idlist : idlist COMMA IDENT",
"parmlist : arg",
"parmlist : parmlist COMMA arg",
"arg : IDENT",
"arg : IDENT COLON IDENT",
"arg : IDENT COLON literal",
"arg : IDENT COLON IDENT COLON literal",
"locals :",
"locals : locals retentions idlist semiOptional",
"retentions : PRIVATE staticOption",
"retentions : PUBLIC staticOption",
"retentions : READ staticOption",
"staticOption :",
"staticOption : STATIC",
"methbody :",
"methbody : nexpr SEMICOL methbody",
"nexpr :",
"nexpr : expr",
"expr : expr1",
"expr : expr AND expr1",
"expr1 : expr2",
"expr1 : expr2 ASSIGN expr1",
"expr1 : invocDef",
"expr1 : expr2 CONASSIGN expr1",
"expr1 : expr2 AUGDIFF expr1",
"expr1 : expr2 AUGUNION expr1",
"expr1 : expr2 AUGPLUS expr1",
"expr1 : expr2 AUGMINUS expr1",
"expr1 : expr2 AUGSTAR expr1",
"expr1 : expr2 AUGINTER expr1",
"expr1 : expr2 AUGSLASH expr1",
"expr1 : expr2 AUGMOD expr1",
"expr1 : expr2 AUGCARET expr1",
"expr1 : expr2 AUGGTHE expr1",
"expr1 : expr2 AUGGTH expr1",
"expr1 : expr2 AUGLTHE expr1",
"expr1 : expr2 AUGLTH expr1",
"expr1 : expr2 AUGNE expr1",
"expr1 : expr2 AUGQMARK expr1",
"expr1 : expr2 AUGAND expr1",
"expr2 : expr3",
"expr2 : expr2 TO expr3",
"expr2 : expr2 TO expr3 BY expr3",
"expr3 : expr4",
"expr3 : expr4 BAR expr3",
"expr4 : expr5",
"expr4 : expr4 EQ expr5",
"expr4 : expr4 GTHE expr5",
"expr4 : expr4 GTH expr5",
"expr4 : expr4 LTHE expr5",
"expr4 : expr4 LTH expr5",
"expr4 : expr4 NE expr5",
"expr5 : expr7",
"expr5 : expr5 PLUS expr7",
"expr5 : expr5 DIFF expr7",
"expr5 : expr5 UNION expr7",
"expr5 : expr5 MINUS expr7",
"expr7 : expr8",
"expr7 : expr7 STAR expr8",
"expr7 : expr7 INTER expr8",
"expr7 : expr7 SLASH expr8",
"expr7 : expr7 MOD expr8",
"expr8 : expr9",
"expr8 : expr9 CARET expr8",
"expr9 : expr10",
"expr9 : expr9 BACKSLASH expr10",
"expr9 : expr9 BANG expr10",
"expr10 : expr11",
"expr10 : AT expr10",
"expr10 : BAR expr10",
"expr10 : DOT expr10",
"expr10 : BANG expr10",
"expr10 : DIFF expr10",
"expr10 : PLUS expr10",
"expr10 : STAR expr10",
"expr10 : SLASH expr10",
"expr10 : CARET expr10",
"expr10 : INTER expr10",
"expr10 : TILDE expr10",
"expr10 : MINUS expr10",
"expr10 : NE expr10",
"expr10 : UNION expr10",
"expr10 : QMARK expr10",
"expr10 : BACKSLASH expr10",
"expr11 : literal",
"expr11 : section",
"expr11 : return",
"expr11 : if",
"expr11 : case",
"expr11 : while",
"expr11 : until",
"expr11 : every",
"expr11 : repeat",
"expr11 : IDENT",
"expr11 : NEXT",
"expr11 : BREAK nexpr",
"expr11 : LPAREN exprlist RPAREN",
"expr11 : LBRACE compound RBRACE",
"expr11 : LBRACK exprlist RBRACK",
"expr11 : expr11 LBRACK exprlist RBRACK",
"expr11 : expr11 LBRACE RBRACE",
"expr11 : expr11 LBRACE pdcolist RBRACE",
"expr11 : expr11 LPAREN exprlist RPAREN",
"expr11 : expr11 COLON LPAREN exprlist RPAREN",
"expr11 : expr11 DOT IDENT",
"expr11 : expr11 DOT packageref",
"expr11 : packageref",
"expr11 : expr11 DOT CONSTRUCTOR",
"expr11 : AND FAIL",
"expr11 : AND IDENT",
"while : WHILE expr",
"while : WHILE expr DO expr",
"until : UNTIL expr",
"until : UNTIL expr DO expr",
"every : EVERY expr",
"every : EVERY expr DO expr",
"repeat : REPEAT expr",
"return : FAIL",
"return : RETURN nexpr",
"return : SUSPEND nexpr",
"return : SUSPEND expr DO expr",
"if : IF expr THEN expr",
"if : IF expr THEN expr ELSE expr",
"case : CASE expr OF LBRACE caselist RBRACE",
"caselist : cclause",
"caselist : caselist SEMICOL cclause",
"cclause : DEFAULT COLON expr",
"cclause : expr COLON expr",
"exprlist : nexpr",
"exprlist : exprlist COMMA nexpr",
"pdcolist : nexpr",
"pdcolist : pdcolist COMMA nexpr",
"literal : INTLIT",
"literal : REALLIT",
"literal : STRINGLIT",
"literal : CSETLIT",
"section : expr11 LBRACK expr sectop expr RBRACK",
"sectop : COLON",
"sectop : PCOLON",
"sectop : MCOLON",
"compound : nexpr",
"compound : nexpr SEMICOL compound",
"program : error decls EOFX",
"expr : error",
  ]

end

#####################################################################
#####################################################################
invocable all    # need to look up semantic actions by name

global yytext    # user variable to return contextual strings
global yyval     # used to return semantic vals from action routines
global yylval    # the 'lval' (result) I got from yylex()
global yydebug   # (boolean) do I want debug output?
global yynerrs   # (integer) number of errors so far
global yyerrflag # (integer) was there an error?
global yychar    # (integer) the current working character
global action    # maps an integer to a semantic action procedure

global yylhs
global yylen
global yydefred
global yydgoto
global yysindex
global yyrindex
global yygindex
global yytable
global yycheck
global yyname
global yyrule

global statestk         # state stack
global valstk           # value stack
################################################################
# procedure: init_stacks : allocate and prepare stacks
################################################################
procedure init_stacks()
  local i
  statestk := []
  valstk := []
  yyval  := 0 
  yylval := 0 
  action := list(1000, action_null)  # remove hard coded 1000 later
  every i := 1 to 1000 do action[i] := proc("action_" || i)
end

#line 1176 "scoelgram.y"

global tokens

#
# This procedure parenthesizes the right-hand side of an expression,
# apparently to simplify or correct any precedence or semantic issues
# when passing the code on to iconc.
#
procedure parenthesize_assign(nd)
	local rhs

	if /iconc then return nd
	if not (*nd.children = 3) then return nd
	rhs := nd.children[3]
	if (not(type(rhs) == "treenode")) then return nd
	if (not(rhs.label == "invoke")) then return nd
	rhs := node("Paren", "(", rhs, ")")
	nd.children[3] := rhs
	return nd
end

#procedure FieldRef(lhs, dot, rhs)
#	if /iconc | (type(lhs) ~== "treenode") then return Field(lhs, dot, rhs)

#	if (lhs.label == "invoke") then {
#		tmpcount +:= 1;
#		return node("Paren", "(",
#				node("assign", "__" || tmpcount, " := ", lhs, ")", "& "),
#				node("invoke", Field("__" || tmpcount, ".", rhs))
#			);
#	}
#	return Field(lhs, dot, rhs)
#end

procedure InvocationNode(args[])
	tmpcount +:= 1
	if type(args[1]) == "token" & (args[1].tok = IDENT) then {
		n1 := args[1]
		lparen := copy(args[1])
		lparen.tok := LPAREN
		lparen.s := "("
	} else {
		n1 := node("Paren","(",node("assign","__"||tmpcount,":=",args[1]),")")
		if lparen := Clone1stToken(args[1]) then {
			lparen.tok := LPAREN
			lparen.s := "("
		} else lparen := "("
	}
	if *args = 6 then {
		return node("Paren",lparen,node("invoke",
				# iconc uses no __m business
				(if /iconc then Field(Field(n1, ".", "__m"), "." , args[3]) 
						else Field(n1, ".", args[3])),

				args[4], node("exprlist",
				if n1 === args[1] then args[1] else "__"||tmpcount,
				if args[5] === EmptyNode then EmptyNode else ",",args[5]),args[6])
				,")")
	} else {
		if /iconc then
			return  node("Paren",lparen,node("invoke",Field(Field(
					Field(n1,".", "__m"),
					"." , args[3]),".",args[5]),
					args[6], node("exprlist",
					if n1 === args[1] then args[1] else "__"||tmpcount,
					if args[7] === EmptyNode then EmptyNode else ",",args[7]),args[8])
					,")")
		else return SuperMethodInvok ! args
	}
end

procedure SimpleInvocation(expr11, lparen, args, rparen)
	if /iconc then return node("invoke", expr11, lparen, args, rparen)
	
	if ((type(expr11) == "token") & (expr11.tok = IDENT)) then {
		return node("invoke", expr11, lparen, args, rparen)
	}

	if (type(expr11) == "treenode") then {
		case expr11.label of {
			"field": {
				#
				# need to examine lhs of field-ref to determine
				# whether we need to decompose the expr11 further...
				#
				if (type(expr11.children[1]) == "treenode") then {
					tmpcount +:= 1;
					n1 := node("Paren", "(", node("assign", "__"||tmpcount, ":=",
							expr11.children[1]), ")")
					return node("exprlist", "(", n1, "&",
							node("invoke", Field("__"||tmpcount, ".", expr11.children[3]),
							lparen, args, rparen), ")")
				} else {
					return node("invoke", expr11, lparen, args, rparen)
				}
			}
			default: {
				return node("invoke", expr11, lparen, args, rparen)
			}
		}
	}
   return node("invoke", expr11, lparen, args, rparen)
end

procedure SuperMethodInvok(args[])
	tmpcount +:= 1
	if (type(args[1]) == "token") & (args[1].tok = IDENT) then {
		n1 := args[1]
		lparen := copy(args[1])
		lparen.tok := LPAREN
		lparen.s := "("
	} else {
		n1 := node("Paren","(",node("assign","__"||tmpcount,":=",args[1]),")")
		if lparen := Clone1stToken(args[1]) then {
			lparen.tok := LPAREN
			lparen.s := "("
		} else lparen := "("
	}

	args[3].s := mangle_class_sym(args[3].s)
	args[3].s ||:= "__oprec"
	return node("exprlist", "(", n1, ")", " & ",
			node("Paren", lparen, node("invoke",
			Field(args[3], ".", args[5]),
			args[6], node("exprlist",
			if n1 === args[1] then args[1] else "__" || tmpcount,
			if args[7] === EmptyNode then EmptyNode else ",", args[7]), args[8]),
			")", ))
end

procedure isloco(node, s)
	case type(node) of {
		"treenode": {
			if *node.children > 0 then return isloco(!node.children, s)
		}
		"token" : {
			if (node.tok = IDENT) & (node.s == s) then return
		}
	}
end

procedure buildtab_from_cclause(n, args)
	if type(n) ~== "treenode" then stop("bad table literal")
	comma := copy(n.children[2])
	comma.tok := COMMA
	comma.s := ","
	case n.label of {
		"cclause0": {
			if *args.children > 0 then push(args.children, comma)
			push(args.children, n.children[3])
		}
		"cclause1": {
			if *args.children > 0 then push(args.children, comma)
			push(args.children, n.children[3])
			push(args.children, comma)
			push(args.children, n.children[1])
		}
	}
end

# build a tree equivalent to
# {__tmp :=[]; every put(__tmp, expr); if __tmp>0 then __tmp}
# The enclosing procedure/method also needs to declare this temp var;
# see AppendListCompTemps
#
procedure ListComp(expr)
	local tmp
	tmpcount +:= 1
	tmp := "__" || tmpcount
	return node("ListComp",
			"{", string(tmp), " :=[]; every put(" || tmp || ", ",
			expr,
			"); if *" || tmp || ">0 then " || tmp || "}")
end

#
# AppendListCompTemps(localdecls, methbody) - at the procedure/method
# outermost level, we may need to add some declarations based on whats
# in the methbody. If there are changes to the declared lcls section,
# returns changed locals.
#
procedure AppendListCompTemps(lcls, body)
	# if there is, in the methbody, a list of varnames to declare
	if *\(ltmps := ListCompTemps(body)) > 0 then {
		# make a varlist containing ltmps
		if *ltmps > 1 then {
			vl := token(IDENT, ltmps[1], 0, 0, "lambda.icn")
			every i := 2 to *ltmps do vl := node("varlist3", vl, ",",
					token(IDENT, ltmps[i], 0, 0, "lambda.icn"))
		} else {
			# the varlist will just be an IDENT
			vl := token(IDENT, ltmps[1], 0, 0, "lambda.icn")
		}
		if (lcls === EmptyNode) |
				(type(lcls)==="treenode" & lcls.label==("locals2"|"locals3")) then {
			return node("locals2", lcls, "local", vl, ";")
		} else
			write(&errout, "don't know what to do with ", image(lcls))
	}
end

#
# ListCompTemps(n) - lower level temp. var extraction from proc body.
# returns list of strings containing temp. variables from list comprehension
# L
procedure ListCompTemps(n)
	local LCT
	if type(n) == "treenode" then {
		if n.label=="ListComp" then {
			LCT := [n.children[2]]
			LCT |||:= ListCompTemps(n.children[4])
			return LCT
		} else if LCT := ListCompTemps(n.children[k := 1 to *(n.children)]) then {
			every kk := k+1 to *(n.children) do {
				LCT |||:= ListCompTemps(n.children[kk])
			}
			return LCT
		}
	}
end

procedure tablelit(lb, cl, rb)
local tabid, lp, rp, args
	args := node("elst1")
	write("I am a tablelit, cl is ", image(cl.label))
	while type(cl)=="treenode" & cl.label == "Caselist" do {
		buildtab_from_cclause(cl.children[3], args)
		cl := cl.children[1]
	}
	buildtab_from_cclause(cl, args)
	tabid := copy(lb); tabid.tok := IDENT; tabid.s := "table"
	lp := copy(lb); lp.tok := LPAREN; lp.s := "("
	rp := copy(rb); rp.tok := RPAREN; rp.s := ")"
	return node("invoke", tabid, lp, args, rp)
end
#line 1871 "scoelgram.icn"
$define YYACCEPT return 0
$define YYABORT return 1
################################################################
# procedure: yyparse : parse input and execute indicated items
################################################################
procedure yyparse()
  local yyn        # next next thing to do
  local yym        #
  local yystate    # current parsing state from state table
  local yys        # current token string
  local doaction   # set to 1 if there need to execute action
  local token      # current token

  if /yytable then init() 
  init_stacks() 
  yynerrs   := 0 
  yyerrflag := 0 
  yychar    := -1           # impossible char forces a read
  yystate   := 0            # initial state
  push(statestk, yystate)   # save it

  repeat { # until parsing is done, either correctly, or w/error
    doaction := 1 

    ##### NEXT ACTION (from reduction table)
	yyn := yydefred[yystate+1]

    while yyn = 0 do {

      if yychar < 0 then {   # we want a char?
        yychar := yylex()    # get next token
        ##### ERROR CHECK ####
        if yychar < 0 then { # it it didn't work/error
          yychar := 0        # change it to default string (no -1!)
          if \yydebug = 1 then yylexdebug(yystate, yychar) 
          }
        } # yychar < 0
	  
      yyn := yysindex[yystate+1]  # get amount to shift by (shift index)

      if (yyn ~= 0)           & ((yyn +:= yychar) >= 0) & 
         (yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yychar) then {
		
        ##### NEXT STATE ####
        yystate := yytable[yyn+1] # we are in a new state
        push(statestk, yystate)   # save it
        push(valstk, yylval)      # push our lval as the input for next rule
        yychar := -1              # since we have 'eaten' a token, say we need another
        if yyerrflag > 0 then     # have we recovered an error?
           yyerrflag -:= 1        # give ourselves credit
        doaction := 0             # but don't process yet
        break                     # quit the yyn=0 loop
        }

    yyn := yyrindex[yystate+1]    # reduce

    if (yyn ~= 0)           & ((yyn +:= yychar) >= 0) &
       (yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yychar) then {
      # e reduced!
      yyn      := yytable[yyn+1] 
      doaction := 1  # get ready to execute
      break          # drop down to actions
      }
    else { #ERROR RECOVERY
      if yyerrflag == 0 then {
        (\yyerror | write)("syntax error") 
        yynerrs +:= 1 
      }
      if yyerrflag < 3 then {     # low error count?
        yyerrflag := 3 
        repeat { #do until break
          if *statestk < 1 then {  # check for under & overflow here
            (\yyerror | write)("stack underflow. aborting...")   # note lower case 's'
            return 1 
          }
          yyn := yysindex[statestk[1]] 
          if ((yyn ~= 0) & (yyn +:= YYERRCODE) >= 0 &
                    yyn <= YYTABLESIZE & yycheck[yyn+1] == YYERRCODE) then {
            yystate := yytable[yyn+1] 
            push(statestk, yystate) 
            push(valstk, yylval) 
            doaction := 0 
            break 
          }
          else {
            if *statestk = 0 then { # check for under & overflow here
              write("Stack underflow. aborting...") # capital 'S'
              return 1 
            }
            pop(statestk) 
            pop(valstk) 
            }
          }
        }
      else  # discard this token
        {
        if yychar = 0 then return 1  # yyabort
        if \yydebug = 1 then {
          yys := &null 
          if yychar <= YYMAXTOKEN then yys := yyname[yychar+1] 
          if integer(yys) & yys = 0 then yys := "illegal-symbol" 
          write("state ",  yystate, ", error recovery discards token ",
                yychar, " (", yys, ")") 
          }
        yychar := -1       # read another
        }
      } # end error recovery
      yyn := yydefred[yystate+1] 
    }# yyn = 0 loop

    if doaction = 0 then   # any reason not to proceed?
      next                 # skip action

    yym := yylen[yyn+1]    # get count of terminals on rhs
    yyval := valstk[yym]   # get current semantic value
    if arv := action[yyn]() then return arv # execute the semantic action

    ##### Now let's reduce... ####
    every 1 to yym do pop(statestk)# we just reduced yylen states
    yystate := statestk[1]        # get new state

    every 1 to yym do pop(valstk) # corresponding value drop
    yym := yylhs[yyn+1]           # select next TERMINAL(on lhs)
    if yystate = 0 & yym = 0 then {
                                  # done? 'rest' state and at first TERMINAL
      yystate := YYFINAL          # explicitly say we're done
      push(statestk, YYFINAL)     # and save it
      push(valstk, yyval)         # also save the semantic value of parsing
      if yychar < 0 then {        # we want another character?
        yychar := yylex()         # get next character
        if yychar < 0 then yychar := 0   #clean, if necessary
      }
      if yychar = 0 then break    # Good exit (if lex returns 0  -)
                                  # quit the loop--all DONE
    } # if yystate
    else {                        #else not done yet
      # get next state and push, for next yydefred[]
      yyn := yygindex[yym+1]        # find out where to go
      if (yyn ~= 0)           & ((yyn +:= yystate) >= 0) &
         (yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yystate) then {
        yystate := yytable[yyn+1]   # get new state
        }
      else {
        yystate := yydgoto[yym+1]   # else go to new defred
	     }
      push(statestk, yystate)       # going again, so push state & val...
      push(valstk, yyval)           # for next action
      }
    } # main loop

  return 0 # yyaccept!!
end

### end of procedure parse() ######################################

### start semantic actions ########################################

procedure action_null()
  #write("null action")
end

procedure action_1()
#line 283 "scoelgram.y"
	
		children := [valstk[2]]
		yyval := program_node(children)
	
end

procedure action_2()
#line 289 "scoelgram.y"
 
		yyval := EmptyNode 
	
end

procedure action_3()
#line 292 "scoelgram.y"

	   #if yynerrs = 0 then iwrites(&errout,".");
	   children := [valstk[3], valstk[2]]
	   yyval := decls_node(children)
	
end

procedure action_4()
#line 299 "scoelgram.y"
	
		children := [valstk[1]]
		yyval := decl_node(children)
	
end

procedure action_5()
#line 303 "scoelgram.y"
	
		children := [valstk[1]]
		yyval := decl_node(children)
	
end

procedure action_6()
#line 307 "scoelgram.y"
	
		children := [valstk[1]]
		yyval := decl_node(children)
	
end

procedure action_7()
#line 311 "scoelgram.y"
	
		children := [valstk[1]]
		yyval := decl_node(children)
	
end

procedure action_8()
#line 315 "scoelgram.y"
	
		children := [valstk[1]]
		yyval := decl_node(children)
	
end

procedure action_9()
#line 319 "scoelgram.y"
 
		children := [valstk[1]]
		yyval := methods_node(children) 
	
end

procedure action_10()
#line 325 "scoelgram.y"
 
		yyval := EmptyNode 
	
end

procedure action_11()
#line 328 "scoelgram.y"

		children := [valstk[3], valstk[2], valstk[1]]
		yyval := constructor_node(2, children)
	
end

procedure action_12()
#line 332 "scoelgram.y"

		children := [valstk[6], valstk[5], valstk[4], valstk[3], valstk[2], valstk[1]]
		yyval := constructor_node(4, children)
	
end

procedure action_13()
#line 338 "scoelgram.y"

		children := [valstk[5], valstk[4], valstk[3], valstk[2], valstk[1]]
		yyval := class_node(children)
	
end

procedure action_14()
#line 344 "scoelgram.y"

		children := [valstk[7],valstk[6],valstk[5], valstk[4], "(",valstk[2],")"]
		yyval := classhead_node(children)
	
end

procedure action_15()
#line 348 "scoelgram.y"

		children := [valstk[4],valstk[3],valstk[2], valstk[1]]
		yyval := classhead_node(children)
	
end

procedure action_16()
#line 354 "scoelgram.y"
 
		yyval := EmptyNode 
	
end

procedure action_17()
#line 357 "scoelgram.y"
 
		children := [":", valstk[2], valstk[1]]
		yyval := supers_node(children) 
	
end

procedure action_18()
#line 361 "scoelgram.y"
 
		children := [":", valstk[2], valstk[1]]
		yyval := supers_node(children) 
	
end

procedure action_19()
#line 367 "scoelgram.y"
 
		children := [valstk[3],"::",valstk[1]]
		yyval := packageref_node(children) 
	
end

procedure action_20()
#line 371 "scoelgram.y"
 
		children := ["::",valstk[1]]
		yyval := packageref_node(children) 
	
end

procedure action_21()
#line 377 "scoelgram.y"
 
		yyval := EmptyNode 
	
end

procedure action_22()
#line 380 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := methods_node(children) 
	
end

procedure action_23()
#line 384 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := methods_node(children) 
	
end

procedure action_24()
#line 388 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := methods_node(children) 
	
end

procedure action_25()
#line 392 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := methods_node(children) 
	
end

procedure action_26()
#line 396 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := methods_node(children) 
	
end

procedure action_27()
#line 402 "scoelgram.y"

		yyval := semiOptional_node()
	
end

procedure action_28()
#line 405 "scoelgram.y"

		yyval := semiOptional_node()
	
end

procedure action_29()
#line 410 "scoelgram.y"

		children := [valstk[2],valstk[1]]
		yyval := import_node(children)
	
end

procedure action_30()
#line 416 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := link_node(children)
	
end

procedure action_31()
#line 422 "scoelgram.y"

		children := [valstk[1]]
		yyval := linklist_node(children)
	
end

procedure action_32()
#line 426 "scoelgram.y"
 
		children := [valstk[3],",",valstk[1]]
		yyval := linklist_node(children)
	
end

procedure action_33()
#line 432 "scoelgram.y"

		children := [valstk[1]]
		yyval := lnkfile_node(children)
	
end

procedure action_34()
#line 436 "scoelgram.y"

		children := [valstk[1]]
		yyval := lnkfile_node(children)
	
end

procedure action_35()
#line 442 "scoelgram.y"
 
		children := [valstk[3],valstk[2]]
		yyval := global_node(children) 
	
end

procedure action_36()
#line 446 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := const_node(children) 
	
end

procedure action_37()
#line 450 "scoelgram.y"
 
		children := [valstk[3],valstk[2]]
		yyval := topic_node(children) 
	
end

procedure action_38()
#line 456 "scoelgram.y"

		children := [valstk[1]]
		yyval := constlist_node(children)
	
end

procedure action_39()
#line 460 "scoelgram.y"

		children := [valstk[3], ",", valstk[1]]
		yyval := constlist_node(children)
	
end

procedure action_40()
#line 466 "scoelgram.y"

		children := [valstk[3], valstk[2], valstk[1]]
		yyval := constdef_node(children)
	
end

procedure action_41()
#line 472 "scoelgram.y"

		children := [valstk[6],valstk[5],valstk[4],valstk[3],valstk[2]]
		yyval := record_node(children)
	
end

procedure action_42()
#line 478 "scoelgram.y"
 
		yyval := EmptyNode 
	
end

procedure action_43()
#line 481 "scoelgram.y"

		children := [valstk[1]]
		yyval := store_node(children)
	
end

procedure action_44()
#line 487 "scoelgram.y"

		children := [valstk[3],":-",valstk[1]]
		yyval := queryDef_node(children)
	
end

procedure action_45()
#line 491 "scoelgram.y"
 
		children := [valstk[6],":-",valstk[4], "(", valstk[2], ")"]
		yyval := fact_node(children)
	
end

procedure action_46()
#line 495 "scoelgram.y"

		children := [valstk[5], valstk[4]]
		yyval := functionDef_node(children)
	
end

procedure action_47()
#line 499 "scoelgram.y"

		children := [valstk[4], ":-", "{", valstk[1], "}"]
		yyval := patternDef_node(children)
	
end

procedure action_48()
#line 505 "scoelgram.y"

		children := ["(", valstk[5], ")", ";", "{", valstk[1], "}"]
		yyval := query_node(children)
	
end

procedure action_49()
#line 509 "scoelgram.y"

		children := ["(", valstk[6], ")", ";", valstk[3], "(", valstk[1], ")"]
		yyval := query_node(children)
	
end

procedure action_50()
#line 515 "scoelgram.y"

		yyval := EmptyNode
	
end

procedure action_52()
#line 518 "scoelgram.y"

		children := [valstk[0], valstk[-1]]
		yyval := patternList_node(children)
	
end

procedure action_53()
#line 524 "scoelgram.y"
 
		yyval := EmptyNode 
	
end

procedure action_54()
#line 527 "scoelgram.y"

		children := [valstk[1]]
		yyval := fldlist_node(children)
	
end

procedure action_55()
#line 533 "scoelgram.y"

		children := [valstk[2],valstk[1]]
		yyval := method_node(children)
	
end

procedure action_56()
#line 537 "scoelgram.y"

		children := [valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := method_node(children)
	
end

procedure action_57()
#line 543 "scoelgram.y"

		children := [valstk[5],valstk[4],"(",valstk[2],")"]
		yyval := methhead_node(children)
	
end

procedure action_58()
#line 549 "scoelgram.y"
 
		yyval := EmptyNode 
	
end

procedure action_59()
#line 552 "scoelgram.y"
 
		children := [valstk[1]]
		yyval := arglist_node(children) 
	
end

procedure action_60()
#line 556 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := arglist_node(children) 
	
end

procedure action_61()
#line 562 "scoelgram.y"

		children := [valstk[1]]
		yyval := idlist_node(children)
	
end

procedure action_62()
#line 566 "scoelgram.y"
 
		children := [valstk[3],",",valstk[1]]
		yyval := idlist_node(children) 
	
end

procedure action_63()
#line 572 "scoelgram.y"

		children := [valstk[1]]
		yyval := parmlist_node(children) 
	
end

procedure action_64()
#line 576 "scoelgram.y"
 
		children := [valstk[3],",",valstk[1]]
		yyval := parmlist_node(children) 
	
end

procedure action_65()
#line 582 "scoelgram.y"

		children := [valstk[1]]
		yyval := arg_node(1, children)
	
end

procedure action_66()
#line 586 "scoelgram.y"
 
		children := [valstk[3], ":", valstk[1]]
		yyval := arg_node(2, children) 
	
end

procedure action_67()
#line 590 "scoelgram.y"
 
		children := [valstk[3], ":", valstk[1]]
		yyval := arg_node(3, children) 
	
end

procedure action_68()
#line 594 "scoelgram.y"
 
		children := [valstk[5], ":", valstk[3], ":", valstk[1]]
		yyval := arg_node(4, children) 
	
end

procedure action_69()
#line 600 "scoelgram.y"
 
		yyval := EmptyNode
	
end

procedure action_70()
#line 603 "scoelgram.y"
 
		children := [valstk[4],valstk[3],valstk[2],";"]
		yyval := locals_node(2, children)
	
end

procedure action_71()
#line 609 "scoelgram.y"
 
		children := [valstk[2], valstk[1]]
		yyval := local_node(children[1].string, children)
	
end

procedure action_72()
#line 613 "scoelgram.y"
 
		children := [valstk[2], valstk[1]]
		yyval := local_node(children[1].string, children)
	
end

procedure action_73()
#line 618 "scoelgram.y"
 
		children := [valstk[2], valstk[1]]
		yyval := local_node(children[1].string, children)
	
end

procedure action_74()
#line 624 "scoelgram.y"

	yyval := EmptyNode
	
end

procedure action_75()
#line 627 "scoelgram.y"
 
		children := [valstk[1]]
		yyval := static_node(children[1].string, children)
	
end

procedure action_76()
#line 632 "scoelgram.y"
 
		yyval := EmptyNode 
	
end

procedure action_77()
#line 635 "scoelgram.y"
 
		children := [valstk[3],";",valstk[1]]
		yyval := methbody_node(children)
	
end

procedure action_78()
#line 641 "scoelgram.y"
 
		yyval := EmptyNode 
	
end

procedure action_79()
#line 644 "scoelgram.y"

		children := [valstk[1]]
		yyval := expr_node(children)
	
end

procedure action_81()
#line 651 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := and_node(children) 
	
end

procedure action_83()
#line 658 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := assign_node(children)
	
end

procedure action_84()
#line 662 "scoelgram.y"

		children := [valstk[1]]
		yyval := invocAssign_node(children)
	
end

procedure action_85()
#line 666 "scoelgram.y"

		children := [valstk[3],valstk[2],valstk[1]]
		yyval := condAssign_node(children)
	
end

procedure action_86()
#line 670 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bdiffa_node(children)
	
end

procedure action_87()
#line 674 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Buniona_node(children)
	
end

procedure action_88()
#line 678 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bplusa_node(children)
	
end

procedure action_89()
#line 682 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bminusa_node(children)
	
end

procedure action_90()
#line 686 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bstara_node(children)
	
end

procedure action_91()
#line 690 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bintera_node(children)
	
end

procedure action_92()
#line 694 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bslasha_node(children)
	
end

procedure action_93()
#line 698 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bmoda_node(children)
	
end

procedure action_94()
#line 702 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bcareta_node(children)
	
end

procedure action_95()
#line 706 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Baugge_node(children)
	
end

procedure action_96()
#line 710 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bauggt_node(children)
	
end

procedure action_97()
#line 714 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Baugle_node(children)
	
end

procedure action_98()
#line 718 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bauglt_node(children)
	
end

procedure action_99()
#line 722 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Baugne_node(children)
	
end

procedure action_100()
#line 726 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Baugques_node(children)
	
end

procedure action_101()
#line 730 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Baugamper_node(children)
	
end

procedure action_103()
#line 737 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := to_node("to", children)
	
end

procedure action_104()
#line 741 "scoelgram.y"
 
		children := [valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := toby_node(children)
	
end

procedure action_106()
#line 748 "scoelgram.y"

		children := [valstk[3],valstk[2],valstk[1]]
		yyval := bar_node(children)
	
end

procedure action_108()
#line 755 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Beq_node(children)
	
end

procedure action_109()
#line 759 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bge_node(children)
	
end

procedure action_110()
#line 763 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bgt_node(children)
	
end

procedure action_111()
#line 767 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Ble_node(children)
	
end

procedure action_112()
#line 771 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Blt_node(children)
	
end

procedure action_113()
#line 775 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bne_node(children)
	
end

procedure action_115()
#line 782 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bplus_node(children)
	
end

procedure action_116()
#line 786 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bdiff_node(children)
	
end

procedure action_117()
#line 790 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bunion_node(children)
	
end

procedure action_118()
#line 794 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bminus_node(children)
	
end

procedure action_120()
#line 801 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bstar_node(children)
	
end

procedure action_121()
#line 805 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Binter_node(children)
	
end

procedure action_122()
#line 809 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bslash_node(children)
	
end

procedure action_123()
#line 813 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bmod_node(children)
	
end

procedure action_125()
#line 820 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bcaret_node(children)
	
end

procedure action_127()
#line 827 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := limit_node(children)
	
end

procedure action_128()
#line 831 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := apply_node(children)
	
end

procedure action_130()
#line 838 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := uat_node(children)
	
end

procedure action_131()
#line 842 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := ubar_node(children)
	
end

procedure action_132()
#line 846 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := udot_node(children)
	
end

procedure action_133()
#line 850 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := ubang_node(children)
	
end

procedure action_134()
#line 854 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := udiff_node(children)
	
end

procedure action_135()
#line 858 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := uplus_node(children)
	
end

procedure action_136()
#line 862 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := ustar_node(children)
	
end

procedure action_137()
#line 866 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := uslash_node(children)
	
end

procedure action_138()
#line 870 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := ucaret_node(children)
	
end

procedure action_139()
#line 874 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := uinter_node(children)
	
end

procedure action_140()
#line 878 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := utilde_node(children)
	
end

procedure action_141()
#line 882 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := uminus_node(children)
	
end

procedure action_142()
#line 886 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := unumne_node(children)
	
end

procedure action_143()
#line 890 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := uunion_node(children)
	
end

procedure action_144()
#line 894 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := uqmark_node(children)
	
end

procedure action_145()
#line 898 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := ubackslash_node(children)
	
end

procedure action_147()
#line 905 "scoelgram.y"

		children := [valstk[1]]
		yyval := section_node(children)
	
end

procedure action_148()
#line 909 "scoelgram.y"

		children := [valstk[1]]
		yyval := return_node(children)
	
end

procedure action_149()
#line 913 "scoelgram.y"

		children := [valstk[1]]
		yyval := if_node(children)
	
end

procedure action_150()
#line 917 "scoelgram.y"

		children := [valstk[1]]
		yyval := case_node(children)
	
end

procedure action_151()
#line 921 "scoelgram.y"

		children := [valstk[1]]
		yyval := while_node(children)
	
end

procedure action_152()
#line 925 "scoelgram.y"

		children := [valstk[1]]
		yyval := until_node(children)
	
end

procedure action_153()
#line 929 "scoelgram.y"

		children := [valstk[1]]
		yyval := every_node(children)
	
end

procedure action_154()
#line 933 "scoelgram.y"

		children := [valstk[1]]
		yyval := repeat_node(children)
	
end

procedure action_155()
#line 937 "scoelgram.y"

		children := [valstk[1]]
		yyval := ident_node(children)
	
end

procedure action_156()
#line 941 "scoelgram.y"
 
		children := [valstk[1]]
		yyval := next_node(children)
	
end

procedure action_157()
#line 945 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := Break_node(children)
	
end

procedure action_158()
#line 949 "scoelgram.y"
 
		children := [valstk[3], valstk[2], valstk[1]]
		yyval := Paren_node(children)
	
end

procedure action_159()
#line 953 "scoelgram.y"
 
		children := [valstk[3], valstk[2], valstk[1]]
		yyval := Brace_node(children)
	
end

procedure action_160()
#line 957 "scoelgram.y"
 
		children := [valstk[3], valstk[2], valstk[1]]
		yyval := Brack_node(children)
	
end

procedure action_161()
#line 961 "scoelgram.y"
 
		children := [valstk[4], valstk[3], valstk[2], valstk[1]]
		yyval := Subscript_node(children)
	
end

procedure action_162()
#line 965 "scoelgram.y"
 
		children := [valstk[3], valstk[2], valstk[1]]
		yyval := Pdco_node(0, children)
	
end

procedure action_163()
#line 969 "scoelgram.y"
 
		children := [valstk[4], valstk[3], valstk[2], valstk[1]]
		yyval := Pdco_node(1, children)
	
end

procedure action_164()
#line 973 "scoelgram.y"
 
		children := [valstk[4], "(", valstk[2], ")"]
		yyval := invoke_node(children)
	
end

procedure action_165()
#line 977 "scoelgram.y"

		children := [valstk[5],":", "(", valstk[2], ")"]
		yyval := invocationnode(children)
	
end

procedure action_166()
#line 981 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := field_node(children)
	
end

procedure action_167()
#line 986 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := field_node(children)
	
end

procedure action_168()
#line 991 "scoelgram.y"

		children := [valstk[1]]
		yyval := packageref_node(children)
	
end

procedure action_169()
#line 995 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := field_node(children)
	
end

procedure action_170()
#line 1002 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := keyword_node(children)
	
end

procedure action_171()
#line 1006 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := keyword_node(children)
	
end

procedure action_172()
#line 1012 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := While_node(0, children)
	
end

procedure action_173()
#line 1016 "scoelgram.y"
 
		children := [valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := While_node(1, children)
	
end

procedure action_174()
#line 1022 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := Until_node(0, children)
	
end

procedure action_175()
#line 1026 "scoelgram.y"
 
		children := [valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := Until_node(1, children)
	
end

procedure action_176()
#line 1032 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := Every_node(0, children)
	
end

procedure action_177()
#line 1036 "scoelgram.y"
 
		children := [valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := Every_node(1, children)
	
end

procedure action_178()
#line 1042 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := Repeat_node(0, children)
	
end

procedure action_180()
#line 1049 "scoelgram.y"
 
		children := [valstk[2], valstk[1]]
		yyval := Return_node(0, children)
	
end

procedure action_181()
#line 1053 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := Suspend_node(0, children)
	
end

procedure action_182()
#line 1057 "scoelgram.y"
 
		children := [valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := Suspend_node(1, children)
	
end

procedure action_183()
#line 1063 "scoelgram.y"
 
		children := [valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := If_node(0, children)
	
end

procedure action_184()
#line 1067 "scoelgram.y"
 
		children := [valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := If_node(1, children)
	
end

procedure action_185()
#line 1073 "scoelgram.y"
 
		children := [valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := Case_node(0, children)
	
end

procedure action_187()
#line 1080 "scoelgram.y"
 
		children := [valstk[3],";",valstk[1]]
		yyval := caselist_node(children)
	
end

procedure action_188()
#line 1086 "scoelgram.y"
 
		children := [valstk[3],":",valstk[1]]
		yyval := cclause_node(0, children)
	
end

procedure action_189()
#line 1090 "scoelgram.y"
 
		children := [valstk[3],":",valstk[1]]
		yyval := cclause_node(0, children)
	
end

procedure action_190()
#line 1096 "scoelgram.y"

		children := [valstk[1]]
		yyval := exprlist_node(children)
	
end

procedure action_191()
#line 1100 "scoelgram.y"

		children := [valstk[3],",",valstk[1]]
		yyval := exprlist_node(children)
	
end

procedure action_192()
#line 1106 "scoelgram.y"
 
		children := [valstk[1]]
		yyval := pdcolist_node(0, children) 
	
end

procedure action_193()
#line 1110 "scoelgram.y"
 
		children := [valstk[3],",",valstk[1]]
		yyval := pdcolist_node(1, children)
	
end

procedure action_194()
#line 1116 "scoelgram.y"

		children := [valstk[1]]
		yyval := intlit_node(children)
	
end

procedure action_195()
#line 1120 "scoelgram.y"

		children := [valstk[1]]
		yyval := reallit_node(children)
	
end

procedure action_196()
#line 1124 "scoelgram.y"

		children := [valstk[1]]
		yyval := stringlit_node(children)
	
end

procedure action_197()
#line 1128 "scoelgram.y"

		children := [valstk[1]]
		yyval := csetlit_node(children)
	
end

procedure action_198()
#line 1134 "scoelgram.y"
 
		children := [valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := section_node(children)
	
end

procedure action_199()
#line 1140 "scoelgram.y"

		children := [valstk[1]]
		yyval := colon_node(children)
	
end

procedure action_200()
#line 1144 "scoelgram.y"

		children := [valstk[1]]
		yyval := pcolon_node(children)
	
end

procedure action_201()
#line 1148 "scoelgram.y"

		children := [valstk[1]]
		yyval := mcolon_node(children)
	
end

procedure action_202()
#line 1154 "scoelgram.y"

		children := [valstk[1]]
		yyval := compound_node(children)
	
end

procedure action_203()
#line 1158 "scoelgram.y"
 
		children := [valstk[3],";",valstk[1]]
		yyval := compound_node(children)
	
end

procedure action_204()
#line 1164 "scoelgram.y"

		children := [valstk[3]]
		yyval := program_node(children)
	
end

procedure action_205()
#line 1170 "scoelgram.y"
 
		yyval := error_node(); 
	
end

#line 3547 "scoelgram.icn"
