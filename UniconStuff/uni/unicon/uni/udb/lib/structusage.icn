
#
# structusage.icn
# Ziad Al-Sharif
# June 1, 2008
#

$include "evdefs.icn"

#
# This is a general record keeps track of each struct info
# such as size, max num created, etc
#
record StructRecord(
   List,   # info about list
   Table,  # Max Number of tables
   Record, # Max number of records
   Set     # Max number of sets
    )

#
# This class handles the general structure usage such as the total number of
# struct type, the read percentage, and the write percentage on each type:
# List, Table, Set, Record
#
$ifndef StandAlone
class StructUsage : Listener(
$else
class StructUsage (
$endif

   eventMask,      # All Monitored events for this detection

   ListChange,     # List events that indicate a change in the list
   TableChange,    # Table events that indicate a change in the table
   RecordChange,   # Record events that indicate a change in the record
   SetChange,      # Set events that indicate a change in the set
   
   structCountAll, # an int tracks all of the referenced structs (L+T+R+S)
   structCount,    # A record counts number of each created struct (L,T,R,S)
   structSize,     # A record counts the max size of each struct (L,T,R,S)
   structMostRef,  # A record tracks num of most referenced serial of a struct
   structMostSer,  # A record tracks the most referenced serial of a struct
   structUsage,    # A record counts references of each created struct (L,T,R,S)
   structChange,   # A record counts each struct changes (create + modify) 
   structRead,     # A record counts each struct read (reference without change)

   Tlists,         # counts each list number of references
   Ttables,        # counts each table number of references
   Tsets,          # counts each set number of references
   Trecords,       # counts each record number of references

   StructUsageInfo # A list keeps the struct usage information
   )

#
# It handles the struct usage: total references, read, and write
#
method handle_Events()
   static Serial

   Serial := serial(&eventvalue) 
   if member(ListMask,&eventcode) then{
      structUsage.List +:= 1
      if structMostRef.List <:= Tlists[Serial] +:= 1 then
         structMostSer.List := Serial

      if &eventcode == E_Lcreate then structCount.List := Serial
      if type(&eventvalue) == "list" then structSize.List <:= *&eventvalue
      if member(ListChange,&eventcode) then structChange.List +:= 1
      else                                  structRead.List   +:= 1
      } 
   else if member(TableMask,&eventcode) then{
      structUsage.Table +:= 1
      if structMostRef.Table <:= Ttables[Serial] +:= 1 then
         structMostSer.Table := Serial

      if &eventcode == E_Tcreate then structCount.Table := Serial
      if type(&eventvalue) == "table" then structSize.Table <:= *&eventvalue+1
      if member(TableChange,&eventcode) then structChange.Table +:= 1
      else                                   structRead.Table   +:= 1
      }  
   else if member(SetMask,&eventcode) then{
      structUsage.Set +:= 1
      if structMostRef.Set <:= Tsets[Serial] +:= 1 then
         structMostSer.Set := Serial

      if &eventcode == E_Screate then structCount.Set := Serial
      if type(&eventvalue) == "set" then structSize.Set <:= *&eventvalue
      if member(SetChange,&eventcode) then structChange.Set +:= 1
      else                                 structRead.Set   +:= 1
      }  
   else if member(RecordMask,&eventcode) then{
      structUsage.Record +:= 1
      if structMostRef.Record <:= Trecords[Serial] +:= 1 then
         structMostSer.Record := Serial

      if &eventcode == E_Rcreate then structCount.Record := Serial
      if type(&eventvalue) == "record" then structSize.Record <:= *&eventvalue
      if member(RecordChange,&eventcode) then structChange.Record +:= 1
      else                                    structRead.Record   +:= 1
      }
end

#
# updates the struct info list with the recent information
#
method update_Info()

  # Fields description:
  # 1-Struct | 2-Number | 3-Num % | 4-Change % | 5-Read % | 6-Max 

  structCountAll := structCount.List   + structCount.Table + 
                    structCount.Record + structCount.Set + 1
   
  #StructUsageInfo[1][1] := "Lists"
   StructUsageInfo[1][2] := structCount.List
   StructUsageInfo[1][3] := structCount.List  * 100 / structCountAll
   StructUsageInfo[1][4] := structChange.List * 100 / structUsage.List
   StructUsageInfo[1][5] := structRead.List   * 100 / structUsage.List
   StructUsageInfo[1][6] := structSize.List
   StructUsageInfo[1][7] := structMostSer.List #getStructAliases(E_List)
   StructUsageInfo[1][8] := structMostRef.List #getStructAliases(E_List)

  #StructUsageInfo[2][1] := "Tables"
   StructUsageInfo[2][2] := structCount.Table
   StructUsageInfo[2][3] := structCount.Table  * 100 / structCountAll
   StructUsageInfo[2][4] := structChange.Table * 100 / structUsage.Table
   StructUsageInfo[2][5] := structRead.Table   * 100 / structUsage.Table
   StructUsageInfo[2][6] := structSize.Table
   StructUsageInfo[2][7] := structMostSer.Table #getStructAliases(E_Table)
   StructUsageInfo[2][8] := structMostRef.Table #getStructAliases(E_Table)

  #StructUsageInfo[3][1] := "Records"
   StructUsageInfo[3][2] := structCount.Record
   StructUsageInfo[3][3] := structCount.Record  * 100 / structCountAll
   StructUsageInfo[3][4] := structChange.Record * 100 / structUsage.Record
   StructUsageInfo[3][5] := structRead.Record   * 100 / structUsage.Record
   StructUsageInfo[3][6] := structSize.Record
   StructUsageInfo[3][7] := structMostSer.Record #getStructAliases(E_Record)
   StructUsageInfo[3][8] := structMostRef.Record #getStructAliases(E_Record)

  #StructUsageInfo[4][1] := "Sets"
   StructUsageInfo[4][2] := structCount.Set
   StructUsageInfo[4][3] := structCount.Set  * 100 / structCountAll
   StructUsageInfo[4][4] := structChange.Set * 100 / structUsage.Set
   StructUsageInfo[4][5] := structRead.Set   * 100 / structUsage.Set
   StructUsageInfo[4][6] := structSize.Set
   StructUsageInfo[4][7] := structMostSer.Set #getStructAliases(E_Set)
   StructUsageInfo[4][8] := structMostRef.Set #getStructAliases(E_Set)
  #return StructInfo
end

#
# It is to be used in a console based application such as UDB
#
method write_Info()
   local L

   update_Info()

   write("\n-------------------------------------------------------------")
   # 1-Struct   | 2-Number | 3-Num %    | 4-Max 
   # 5-Change % | 6-Read % | 7-Most Used
   write("\n---- Structure Usage Info ----")
   write(left("Struct",10),  " : ",left("Number",10), " : ",
         left("Num %",5),    " : ",left("Change %",8)," : ",
         left("Read %",6),   " : ",left("Max",5),     " : ",
         left("MostUsed",15)," : ",left("# of Use",10)
         )
   every L := !StructUsageInfo do{
      write(left(L[1],10)," : ",
            left(L[2],10)," : ",
            left(L[3],5), " : ",
            left(L[4],8), " : ",
            left(L[5],6), " : ",
            left(L[6],5), " | ",
            left(L[7],15)," : ",
            left(L[8],10)
           )
      }
end

#
# returns the change percentage
# k = (E_List | E_Table | E_Set | E_Record )
#
method get_ChangePercentage(k)
    case k of {
       E_List:  { return structChange.List   * 100 / structUsage.List   }
       E_Table: { return structChange.Table  * 100 / structUsage.Table  }
       E_Record:{ return structChange.Record * 100 / structUsage.Record }
       E_Set:   { return structChange.Set    * 100 / structUsage.Set    }
       default: { return -1 }
       }
end

#
# returns the read percentage
# k = (E_List | E_Table | E_Set | E_Record )
#
method get_ReadPercentage(k)
   case k of {
       E_List:  { return structRead.List   * 100 / structUsage.List   }
       E_Table: { return structRead.Table  * 100 / structUsage.Table  }
       E_Record:{ return structRead.Record * 100 / structUsage.Record }
       E_Set:   { return structRead.Set    * 100 / structUsage.Set    }
       default: { return -1 }
       }
end

#
# returns the count percentage of a specific structure
# k = (E_List | E_Table | E_Set | E_Record )
#
method getCountPercentage(k)
    case k of {
       E_List:  { return structCount.List    * 100 / structCountAll   }
       E_Table: { return structChange.Table  * 100 / structCountAll   }
       E_Record:{ return structChange.Record * 100 / structCountAll   }
       E_Set:   { return structChange.Set    * 100 / structCountAll   }
       default: { return -1 }
       }
end

#
# Initialize the class attributes
#
initially(name, state)

$ifndef StandAlone
   self.Listener.initially(name, state)
$endif

   eventMask   := cset(E_Exit || E_Error) ++ 
                  cset(ListMask ++ TableMask ++ SetMask ++ RecordMask)
   ListChange  := cset(E_Lcreate||E_Lpop||E_Lpull||E_Lpush||E_Lput||E_Lget)
  #ListAccess  := cset(E_Lrand||E_Lsub||E_Lref||E_Lbang)
   TableChange := cset(E_Tcreate || E_Tdelete || E_Tinsert)
  #TableAccess:=cset(E_Tkey||E_Tmember||E_Trand||E_Tsub||E_Tref||
  #                  E_Tbang||E_Tval)
   RecordChange:= cset(E_Rcreate)
  #RecordAccess:= cset(E_Rrand||E_Rsub||E_Rref||E_Rbang)
   SetChange   := cset(E_Screate || E_Sdelete || E_Sinsert)
  #SetAccess   := cset(E_Smember||E_Sval||E_Sbang||E_Sval)

   Tlists         := table(0)
   Ttables        := table(0)
   Tsets          := table(0)
   Trecords       := table(0)

   structCountAll := 0
   structCount    := StructRecord(0,0,0,0)
   structSize     := StructRecord(0,0,0,0)
   structMostRef  := StructRecord(0,0,0,0)
   structMostSer  := StructRecord(0,0,0,0)
   structUsage    := StructRecord(1,1,1,1)
   structChange   := StructRecord(0,0,0,0)
   structRead     := StructRecord(0,0,0,0)

   # Fields description:
   # 1-Struct | 2-Number | 3-Num %    | 4-Change % |
   # 5-Read % | 6-Max    | 7-MostUsed | 8-num of use 
   StructUsageInfo := [["Lists"  ,0,0,0,0,0,0,0], 
                       ["Tables" ,0,0,0,0,0,0,0],
                       ["Records",0,0,0,0,0,0,0],
                       ["Sets"   ,0,0,0,0,0,0,0]]
end

#
# StandAlone is defined when this tool is used as a stand-alone monitor.
#  Otherwise, this tool can be statically linked into the main utop/udb
#  source code 
#
$ifdef StandAlone

link evinit

#
# This main procedure is only used in the standalone mode
# or udb's external co-expression mode
#
procedure main(arg)
   local obj
   
   EvInit(arg) | stop(" **** can not initialize Monitor !!!")
   obj := StructUsage()

   while EvGet(obj.eventMask) do{
      if &eventcode == (E_Exit | E_Error) then
         obj.write_Info()
      else
         obj.handle_Events() 
      }
   handle_Events() #fake call
end

#
# This handle_Events procedure is only used udb's external 
# inter-program procedure calls
#
procedure handle_Events(code, value)
   static obj
   
   initial{
      #EvInit(arg) | stop(" **** can not initialize Monitor !!!")
      obj := StructUsage()
      return obj.eventMask
      } 

   &eventcode  := code
   &eventvalue := value

   if &eventcode == (E_Exit | E_Error) then
      obj.write_Info()
   else
      obj.handle_Events() 
end

$endif
