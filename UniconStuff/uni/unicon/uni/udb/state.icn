#
# state.icn
# Handles the main debugging state properties
# Author : Ziad Al-Sharif
# Date   : Feb 24, 2008
# e-mail : zsharif@gmail.com
#

$include "evdefs.icn"
$include "defaults.icn"

#
# This class is used to handle the current debugging state of UDB 
#
class State(
   TP,              # TargetProgram and its arguments

   State,           # Debugging state such RUN, PUSE, etc
   RunCode,         # It is one of the RUNNING States (RUN|CONTINUE|SPEP|NEXT)
   RunCount,        # integer counts number of runs a program has in a session

   MaskTable,       # a table that maps eventcodes into their value masks
   eventMask,       # the cset of the main evaluator set of event codes 
   valueMask,       # table used for breakpoints and watchpoints set of masks
   breakMask,       # a set of the E_Line values that we like to break on
   watchChangeMask, # a set of the E_Assign values that we like to watch
   watchReadMask,   # a set of the E_Deref values that we like to watch
   internalMask,    # The cset of the active internals event mask
   externalMask,    # The cset of the active externals event mask   
   traceMask,       # a cset of &eventcode(s) of wanted traced fetures

   assertEventMask, # a cset of the active temporal assertions event masks
   assertVars,      # a set with all assertions' variables
   assertLoc,       # a set with all line numbers that has assertions on them

   cur_Frame,       # points at the last investigated frame, using up,down,frame

   Message,         # a string formated with the current message

   srcFile,         # an instance of the SourceFile class
   icode,           # an instance of the Icode class
   srcCode,         # an instance of the SourceCode class
   
   cmdHistory       # list keeps all of the UDB's cmd Session History
   )

#
# prints a message out into a console, message box, and so
#
method Write(Msg)

   /Msg := Message
   write(Msg)
   Message := ""
end

#
# prints a message out into a console, message box, and so
#
method Writes(Msg)

   /Msg := Message
   writes(Msg)
   Message := ""
end

#
# check if the current command is valid
#
method isValidCommand(cmd)

   if State = (LOAD | PAUSE | END) then
      return
   else{
      State := ERROR
      Message   := "\n   No Program is Loaded_
                    \n   Type \"help "||cmd[1]||"\" for assistance"
      Write(Message)
      fail
      }
end

#
# constructs/reconstructs the monitoring/debugging event-mask & value-mask
#
method constructEventMask()
   local x

   #write("----> state.icn: re-constructing all of event mask and value mask")
   if *internalMask >0 | *externalMask >0    | 
      *traceMask >0    | *assertEventMask >0 then{
      eventMask := cset(E_Error || E_Exit || E_Signal) ++ 
                   cset(E_MXevent) ++
                   cset(E_Collect || E_EndCollect) ++
                   internalMask ++ externalMask ++ traceMask ++ assertEventMask
      if *breakMask > 0 | *assertEventMask > 0 then{
         if member(traceMask,E_Line)    |
            member(internalMask,E_Line) | member(externalMask,E_Line) then
            delete(valueMask,E_Line)
         else{
            eventMask ++:= cset(E_Line)
            valueMask[E_Line] := breakMask ++ assertLoc
            }
         }
      if *watchChangeMask > 0 then{
         if member(traceMask,E_Assign)    |
            member(internalMask,E_Assign) | member(externalMask,E_Assign) then
            delete(valueMask,E_Assign)
         else{
            eventMask ++:= cset(E_Assign || E_Value) #??? temp
            valueMask[E_Assign] := watchChangeMask
            }
         }
      if *watchReadMask > 0 then{
         if member(traceMask,E_Deref)    |
            member(internalMask,E_Deref) | member(externalMask,E_Deref) then
            delete(valueMask,E_Deref)
         else{
            eventMask ++:= cset(E_Deref)
            valueMask[E_Deref] := watchReadMask
            }
         }
      if *assertEventMask > 0 then{
         if member(traceMask,E_Deref)    |
            member(internalMask,E_Deref) | member(externalMask,E_Deref) then
            delete(valueMask,E_Deref)
         else{
            #write("OK, Iam here with E_Assign and E_Deref")
            #write(ximage(assertVars))
            eventMask ++:= assertEventMask #cset(E_Deref || E_Assign || E_Value)
            valueMask[E_Deref]  := assertVars
            valueMask[E_Assign] := assertVars
            }
         }

      }
   else{ # *internalMask = 0 & *externalMask = 0 & *traceMask = 0
      eventMask := cset(E_Error || E_Exit || E_Signal) ++ 
                   cset(E_Collect || E_EndCollect)
      if *breakMask > 0 then{
         eventMask ++:= cset(E_Line)
         valueMask[E_Line] := breakMask
         }

      if *watchChangeMask > 0 then{
         if member(watchChangeMask, "&pos") then
            eventMask ++:= cset(E_Spos)
         if member(watchChangeMask, "&subject") then
            eventMask ++:= cset(E_Snew)
         eventMask ++:= cset(E_Assign || E_Value) # ??? temp
         valueMask[E_Assign] := watchChangeMask
         }

      if *watchReadMask > 0 then{
         eventMask ++:= cset(E_Deref)
         valueMask[E_Deref] := watchReadMask
         }
      }

      # debug the agent mask
      #write("------[state.icn: eventMask]------")
      #every x := !eventMask do
      #   write("-->",evnames(x))
end

#
# Update the debug state 
# cmd =("run" | "rerun" | "continue" | "step" | "next"| "fresh" | "break")
# enable/disable -internal/external,
#  
method Update(state)

   if /state then state := State else  State := state
   case state of {
     LOAD :{
          #write("\n   --- a program just loaded ---") 
          }
     RUN  |
     RERUN:{
        RunCount +:= 1
        constructEventMask()
        } 
     PAUSE   |
     CONTINUE:{
        constructEventMask()
        }
     STEP |
     NEXT :{
        #State := state
        if not member(eventMask, E_Line) then eventMask ++:= cset(E_Line)
        if \valueMask[E_Line] then            delete(valueMask, E_Line)
        eventMask ++:= internalMask ++ externalMask
        }
     default:{
        #Write("OPs: Start Over !!!")
        Fresh()
        }
     }
end

#
# Initialize the UDB Debugging State
#
method initializeState(tp)
   local x, src, found, missing, plural:=""

   # This is only when the TP is passed at the start of udb, i.e: ./udb test
   # in either case the ErrorCode will be initialized
   State := NONE
   if tp[1] then{
      TP := tp
      # check if the TP is loadable and accessable.
$ifndef _UNIX
      if not stat(TP[1]) & stat(TP[1]||".exe") then
         TP[1]||:=".exe"
$endif
      if stat(TP[1]) then{
         #--
         EvInit(TP) | stop("cant start evinit on " || TP[1])
         if src := icode.getSrcFileNames(TP[1]) then{
            srcFile.loadSourceFiles(TP[1], src)
            State := LOAD
            srcCode.analyzeGlobalNames()
            #-- Automated TEST
$ifdef TEST
            State := RUN ###### TEST : For the sake of getting the Time right
$endif
            Message ||:= "\n   "|| srcFile.exeName ||" : loaded "||
                         srcFile.exeSize||" of "||icode.icodeVersion 
            found := *srcFile.foundFiles
            if found > 0 then{
               if found > 1 then plural := "s are " else plural := " is "
               Message ||:=  "\n   "|| found ||" file"||plural||"found"
               }
            missing := *srcFile.missingFiles
            if missing > 0 then{
               if missing > 1 then plural := "s are " else plural := " is "
               Message ||:=  "\n   and "|| missing ||" file"||plural||"missing"
               }
            Message ||:= "\n   Type \"help\" for assistance _
                               or \"src\" for file(s) name"
            }
         else{
            Message ||:= "\n   Can not get the Source File Names_
                        \n   Type \"help\" for assistance."
            }
         }
      else{
         State := ERROR
         Message ||:= "\n   Could not access \"" || TP[1] ||"\""||
                      "\n   Type \"help\" for assistance."
         State := NONE
         }
      }
   else{
      State := ERROR
      Message ||:= "\n   A program must be pre-loaded_
                    \n   Type \"help\" for assistance"
      RunCode := NONE
      }
   Write(Message)
end

#
# Puts the last command in the right place in cmdHistory List
#
method update_cmdHistory(line)
   local i

   # cmdHistory[1]=""
   every i:=2 to *cmdHistory do
      if line == cmdHistory[i] then{
         delete(cmdHistory,i)    
         break
         }
   push(cmdHistory,line)
end

#
# refresh the debugging state to the default settings
#
method Fresh() 

   #Initilly, eventMask does not contain the E_Line & E_Assign events
   #If there is a breakpoint, E_Line will be added to the eventMask,
   #and the breakpoint linenum will be inserted in valueMask[E_Line] set
   #Also, initially the eventMask will not contain the E_Assign event
   #If there is a watchpoint then the E_Assign will be added and the 
   #variable will be added to the watchMask set.
 
   eventMask       := cset(E_Error || E_Exit || E_Signal)
   internalMask    := cset('')
   externalMask    := cset('')
   traceMask       := cset('')
   assertEventMask := cset('')

   valueMask       := table() 
   assertVars      := set()
   breakMask       := set()
   watchChangeMask := set()
   watchReadMask   := set()
   assertLoc       := set()
   cur_Frame       := 0 # the current active frame is the last one
   cmdHistory      := [""]


   MaskTable           := table()
   MaskTable[E_Line]   := breakMask
   MaskTable[E_Assign] := watchChangeMask
   MaskTable[E_Value]  := watchChangeMask
   MaskTable[E_Snew]   := watchChangeMask
   MaskTable[E_Spos]   := watchChangeMask
   MaskTable[E_Deref]  := watchReadMask

   Message         := VERSION||"\n   "
end

#
# Initialization
#
initially()
   TP        := []

   State     := NONE
   RunCode   := NONE
   RunCount  := 0

   icode     := Icode()
   srcFile   := SourceFile()
   srcCode   := SourceCode()

   Fresh()
end
