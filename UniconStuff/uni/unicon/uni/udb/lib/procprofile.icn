#
# procprofile.icn 
# Ziad Al-Sharif
# June 1, 2008
#

$include "evdefs.icn"

#
# This is a general record for procedure profiles
#
record ProcRecord(
   Call,    # accumulates the number of calls for all procedures
   Resume,  # accumulates the number of resumess for all procedures
   Return,  # accumulates the number of returns for all procedures
   Remove,  # accumulates the number of removes for all procedures
   Fail,    # accumulates the number of fails for all procedures
   Suspend  # accumulates the number of suspends for all procedures
   )

#
# This class monitores profile related information such as
# procedure activities and variables
#
$ifndef StandAlone
class ProcProfile : Listener(
$else
class ProcProfile (
$endif

   eventMask,       # The monitored events

   procCallCount,   # procedure call count
   procResumeCount, # procedure resume count
   procSuspendCount,# procedure suspend count
   procReturnCount, # procedure return count
   procFailCount,   # procedure faile count
   procRemoveCount, # procedure remove count

   procTotal,       # a record tracks the total number of proc activities
   procMostNum,     # a record tracks the most used proc in each activity
   procMostName,    # a record tracks the name of the most used proc activity

   totalCall,       # acumulates the total calls + resumes
   totalRet,        # acumulates the total returns+fails+suspends+removes  

   ProcProfileInfo  # A list with the procedure's profile info
   )

#
# Counts the number of times a procedure is called, resumed, suspended,
# returned, failed, and removed.
#
method handle_Events()
   local  pname, k

   pname := image(&eventvalue)
   pname := pname[find(" ",pname)+1:0]
   case &eventcode of {
      E_Pcall:{
          totalCall  +:= 1
          procTotal.Call  +:= 1
          if procMostNum.Call <:= procCallCount[pname] +:= 1 then
             procMostName.Call := pname
          }
      E_Pfail:{
          totalRet  +:= 1
          procTotal.Fail +:= 1 
          if procMostNum.Fail <:= procFailCount[pname] +:= 1 then
             procMostName.Fail := pname
          }
      E_Pret:{
          totalRet  +:= 1
          procTotal.Return +:= 1 
          if procMostNum.Return <:= procReturnCount[pname] +:= 1 then
             procMostName.Return := pname
          }
      E_Presum:{
          totalCall  +:= 1
          procTotal.Resume  +:= 1
          if procMostNum.Resume <:= procResumeCount[pname] +:= 1 then
             procMostName.Resume := pname
          }
      E_Psusp:{
          totalRet  +:= 1
          procTotal.Suspend +:= 1 
          if procMostNum.Suspend <:= procSuspendCount[pname] +:= 1 then
             procMostName.Suspend := pname 
          }
      E_Prem:{
          totalRet  +:= 1
          procTotal.Remove +:= 1 
          if procMostNum.Remove <:= procRemoveCount[pname] +:= 1 then
             procMostName.Remove := pname
          }
      } 
end

#
# updates the proc profile info
#
method update_Info()

  # Fields description for procedure profiles:
  # 1-Action | 2-Total | 3-Total % | 4-Most Used

  #procProfileInfo[1][1] := "Call" 
   ProcProfileInfo[1][2] := procTotal.Call
   ProcProfileInfo[1][3] := procTotal.Call * 100 / totalCall
   ProcProfileInfo[1][4] := procMostName.Call||"-"||procMostNum.Call

  #ProcInfo[2][1] := "Resume"
   ProcProfileInfo[2][2] := procTotal.Resume
   ProcProfileInfo[2][3] := procTotal.Resume * 100 / totalCall
   ProcProfileInfo[2][4] := procMostName.Resume||"-"||procMostNum.Resume

  #ProcProfileInfo[3][1] := "Suspend"
   ProcProfileInfo[3][2] := procTotal.Suspend
   ProcProfileInfo[3][3] := procTotal.Suspend * 100 / totalRet
   ProcProfileInfo[3][4] := procMostName.Suspend||"-"||procMostNum.Suspend

  #ProcProfileInfo[4][1] := "Return" 
   ProcProfileInfo[4][2] := procTotal.Return
   ProcProfileInfo[4][3] := procTotal.Return * 100 / totalRet 
   ProcProfileInfo[4][4] := procMostName.Return||"-"||procMostNum.Return

  #ProcProfileInfo[5][1] := "Fail" 
   ProcProfileInfo[5][2] := procTotal.Fail
   ProcProfileInfo[5][3] := procTotal.Fail * 100 / totalRet
   ProcProfileInfo[5][4] := procMostName.Fail||"-"||procMostNum.Fail

  #ProcProfileInfo[6][1] := "Remove"
   ProcProfileInfo[6][2] := procTotal.Remove
   ProcProfileInfo[6][3] := procTotal.Remove * 100 / totalRet
   ProcProfileInfo[6][4] := procMostName.Remove||"-"||procMostNum.Remove
end

#
# It is to be used in a console based application such as UDB
#
method write_Info()
   local L

   update_Info()

   write("\n-------------------------------------------------------------")
   write("\n---- Procedure Activities Profile info ----")
   write(left("Action",10), " : ",
         left("Total",8),   " : ",
         left("Total%",8),  " : ",
         left("Most Used",8)
         )
   every L := !ProcProfileInfo do{
      write(left(L[1],10)," : ",
            left(L[2],8), " : ",
            left(L[3],8), " : ",
            left(L[4],20)
            )
      }
end

#
# returns the total actions for a specific procedure activity
# k=(E_Pcall | E_Presum | E_Psusp | E_Pret | E_Pfail | E_Prem)
#
method get_ProcTotal(k)

    case k of{
      E_Pcall: { return procTotal.Call    }
      E_Pfail: { return procTotal.Fail    }
      E_Pret:  { return procTotal.Return  }
      E_Presum:{ return procTotal.Resume  }
      E_Psusp: { return procTotal.Suspend }
      E_Prem:  { return procTotal.Remove  }
      default: { return -1 }
      }
end

#
# returns the percentage of a specific procedure activity
# k=(E_Pcall | E_Presum | E_Psusp | E_Pret | E_Pfail | E_Prem)
#
method get_ProcPercentage(k)

    case k of{
      E_Pcall: { return procTotal.Call    * 100 / totalCall }
      E_Pfail: { return procTotal.Fail    * 100 / totalRet  }
      E_Pret:  { return procTotal.Return  * 100 / totalRet  }
      E_Presum:{ return procTotal.Resume  * 100 / totalCall }
      E_Psusp: { return procTotal.Suspend * 100 / totalRet  }
      E_Prem:  { return procTotal.Remove  * 100 / totalRet  }
      default: { return -1 }
      }
end

#
# returns the percentage of a specific procedure activity
# k=(E_Pcall | E_Presum | E_Psusp | E_Pret | E_Pfail | E_Prem)
#
method get_ProcMax(k)

    case k of{
      E_Pcall: { return procMostName.Call    ||"-"|| procMostNum.Call    }
      E_Pfail: { return procMostName.Fail    ||"-"|| procMostNum.Fail    }
      E_Pret:  { return procMostName.Return  ||"-"|| procMostNum.Return  }
      E_Presum:{ return procMostName.Resume  ||"-"|| procMostNum.Resume  }
      E_Psusp: { return procMostName.Suspend ||"-"|| procMostNum.Suspend }
      E_Prem:  { return procMostName.Remove  ||"-"|| procMostNum.Remove  }
      default: { return -1 }
      }
end

#
# Initialize the Monitoring Stuff
#
initially(name, state)

$ifndef StandAlone
   self.Listener.initially(name, state)
$endif

   eventMask := cset(E_Exit || E_Error) ++ ProcMask
 
   procCallCount    := table(0)
   procResumeCount  := table(0)
   procSuspendCount := table(0)
   procReturnCount  := table(0)
   procFailCount    := table(0)
   procRemoveCount  := table(0)

   procTotal    := ProcRecord(0,0,0,0,0,0)
   procMostNum  := ProcRecord(0,0,0,0,0,0)
   procMostName := ProcRecord(0,0,0,0,0,0)

   totalCall    := 1
   totalRet     := 1

   # Fields description for procedure profiles:
   # 1-Action | 2-Total | 3-Total % | 4-Most Used 
   ProcProfileInfo := [["Call"   ,0,0,0],
                       ["Resume" ,0,0,0],
                       ["Suspend",0,0,0],
                       ["Return" ,0,0,0],
                       ["Fail"   ,0,0,0],
                       ["Remove" ,0,0,0]]
end

#
# StandAlone is defined when this tool is used as a stand-alone monitor.
#  Otherwise, this tool can be statically linked into the main utop/udb
#  source code 
#
$ifdef StandAlone

link evinit

#
# This main procedure is only used in the standalone mode
# or udb's external co-expression mode
# 
procedure main(arg)
   local obj
   
   EvInit(arg) | stop(" **** can not initialize Monitor !!!")   
   obj := ProcProfile()

   while EvGet(obj.eventMask) do{
      if &eventcode == (E_Exit | E_Error) then
         obj.write_Info()
      else
         obj.handle_Events()
      }
   #obj.write_Info()
   handle_Events() #fake call
end

#
# This handle_Events procedure is only used udb's external 
# inter-program procedure calls
#
procedure handle_Events(code, value)
   static obj
   
   initial{
      #EvInit(arg) | stop(" **** can not initialize Monitor !!!")   
      obj := ProcProfile()
      return obj.eventMask
      } 

   &eventcode  := code
   &eventvalue := value

   if &eventcode == (E_Exit | E_Error) then
      obj.write_Info()
   else
      obj.handle_Events()
end

$endif
