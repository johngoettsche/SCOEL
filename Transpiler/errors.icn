#package errors

class Error_Object()
	local
		token,
		state,
		lineno,
		colno,
		filename,
		message,
		text
		
	method to_string()
		local
			str
			
	#	write("Error_Object:to_string: ", state)
		str := message || " " || state || ", "
		str ||:= generate_error(state) || "\n"
		if state < 1100 & state > 0 then {
			if \lineno then {
				str ||:= "on line number " || lineno + 1
				str ||:= " column " || colno 
			}
			str ||:= " in file: " || filename || "\n"			
		}
		str ||:= "offending item: " || text 
		str ||:= "\n"
		return str
	end
initially(st, msg, t)
	token := t
	state := st
	if \token then {
		if \token.line then {
			lineno := token.line
			colno := token.column
		}
		filename := token.filename
		text := token.string
	} else {
		lineno := yylineno
		colno := yycolno
		filename := yyfilename
		text := yytext
	}
	message := msg
end

global errors

procedure init_errors()
	errors := []
end

procedure lex_error()
	put(errors, Error_Object(1000, "lexical error"))
end

procedure uni_error(s)
   /errors := 0
   /s := "uni_error"
   put(errors, Error_Object(statestk, s))
   yyerror(s)
#   put(errors, +:= 1)
end

procedure write_errors()
	local
		error
		
	every error := !errors do write(&errout, error.to_string())
end

procedure generate_error(err)
	static t
	local
		errorMessage,
		i
		
	initial {
		t := table()
		every i := 0 to 599 do {
			t[i] := "something wrong"
		}
		t[600] := "the 'store' flag may not be used on the Main object"
		t[601] := "only global and constant variables can be instantiated outside a class"
		t[602] := "global and constant varivables can only be instantiated outside a class"
		t[603] := "only local variables can be instantiated inside a method"
		t[604] := "field already exists"
		t[605] := "identifier not instantiated"
		t[606] := "class or record not defined"
		t[607] := "facts must be of class or record type"
		t[608] := "package not found"
		t[609] := "object not found"
		t[610] := "function/method not found"
		t[611] := "identifier not found"
		t[612] := "identifier's access is not \'global\' or \'const\'"
		t[613] := "\'const\' variables may not be changed"
		t[614] := "identifier's access is not \'pubic\' or \'read\'"
		t[615] := "\'read\' variables may not be changed"
		t[620] := "failed to find file"
		t[1000] := "token not recognized"
		t[1100] := "stack underflow error, aborting..."
		t[1200] := "unable to find table"
	}
	return t[err]
end

procedure compiler_error(code, msg, token)
	local
		error
		
	error := Error_Object(code, msg, token)
	put(errors, error)
	write(&errout, error.to_string())
end

procedure simpleTerminalError(msg, off)
	stop(&errout, msg, "\n offending item: ", off)
end

procedure yyerror2(number, message, off, token)
	local
		error

	error := Error_Object(number, message, token)
	if \off then error.text := off
	if \error then {
		put(errors, error)
		write(&errout, error.to_string())
	} else {
		write("failed to create Error_Object")
	}
	
end

procedure yyerror(s, token)
	local
		error
		
	error := Error_Object(\statestk[1], s, token)
	if \error then {
		put(errors, error)
		write(&errout, error.to_string())
	} else {
		write("failed to create Error_Object")
	}
end

procedure warning(mesage)
	write(&errout, mesage)
end
