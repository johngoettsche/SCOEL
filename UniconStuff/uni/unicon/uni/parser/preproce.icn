#  preprocessor.icn -- complete Icon preprocessor.

#
# Icon Preprocessor procedures
#
# Invocation:
#
#  preprocessor(fname,predefined_syms)
#
#      fname - the filename to preprocess
#
#      predefined_syms - (optional) a table of symbols & definitions to
#              serve as preprocessor "predefined" symbols 
#

#
# Issues:
#
#  - The mechanism for getting the $include path is not appropriate for
#    100% Java.  The machinery is there for dealing with a path string,
#    but where does it come from?  Right now, it's doing a getenv()
#    which is not meaningful for the Java platform.
#

#
# a_Global declarations of variables in the preprocessor "object"
#
global preproc_sym_table,preproc_if_stack,preproc_file_stack,preproc_if_state,
        preproc_file,preproc_filename,preproc_line,preproc_print_line,
        preproc_word_chars,preproc_nest_level,preproc_include_name,
        preproc_include_set,preproc_print_filename,preproc_command,
        preproc_err_count

procedure predefs()
    local t

    t := table()

    # reverse engineer the predefined symbols list from our predefined symbols
    t["_V9"] := 1
    every s := &features do {
	t[case s of {
	    "Macintosh":"_MACINTOSH"
	    "MS Windows NT":"_MS_WINDOWS_NT"
	    "UNIX":"_UNIX"
	    "POSIX":"_POSIX"
	    "DBM":"_DBM"
	    "SQL connectivity":"_SQL"
	    "ASCII":"_ASCII"
	    "co-expressions":"_CO_EXPRESSIONS"
	    "dynamic loading":"_DYNAMIC_LOADING"
	    "event montoring":"_EVENT_MONITOR"
	    "large integers":"_LARGE_INTEGERS"
	    "multiple programs":"_MULTITASKING"
	    "pipes":"_PIPES"
	    "system function":"_SYSTEM_FUNCTION"
	    "graphics":"_GRAPHICS"
	    "X Windows":"_X_WINDOW_SYSTEM"
	    "MS Windows":"_MS_WINDOWS"
	    "Win32":"_WIN32"
	}] := "1"
    }

    # there is no predefn for "environment variables" feature
    return t
end

procedure preproc(dummy, args)
    suspend preprocessor(args[1], predefs())
end

#
# Preprocesses a file, generating output lines.
#
procedure preprocessor(fname,predefined_syms)
    local line,result
    static nonpunctuation
    initial {
        nonpunctuation := &letters ++ &digits ++ ' \t\f\r'
    }

    preproc_new(fname,predefined_syms)
    
    while line := preproc_read() do line ? {
        if match("#line") then {
            next
        }
        preproc_space()
        if ="$" & any(nonpunctuation) then {
            suspend preproc_scan_directive()
        } else {
            &pos := 1
            suspend preproc_scan_text()
        }
    }
    preproc_line +:= 1
    suspend preproc_sync_lines()
    close(preproc_file)
    preproc_done()
    if preproc_err_count > 0 then {
        stop()      # force error exit (abruptly)
    }
end

#
# a_Initializes the preprocessor "object".
#
procedure preproc_new(fname,predefined_syms)
    preproc_file := open(fname) |
            stop(&progname, ": cannot open ", image(fname))
    preproc_sym_table := \predefined_syms |table()
    preproc_if_stack := []
    preproc_file_stack := []
    preproc_include_set := set([fname])
    preproc_if_state := &null
    preproc_word_chars := &letters ++ &digits ++ '_'
    preproc_filename := preproc_include_name := fname
    preproc_line := preproc_print_line := 0
    preproc_print_filename := &null
    preproc_nest_level := 0
    preproc_err_count := 0
    return
end

#
# Clears the values of certain space-consuming variables.
#
procedure preproc_done()
    preproc_sym_table := preproc_if_stack := preproc_file_stack :=
            preproc_filename := preproc_print_filename :=
            preproc_file := preproc_include_set := &null
    return
end

#
# a_Scans a preprocessor directive.
#
procedure preproc_scan_directive()
    local sym,value,new_file,new_filename,new_line,path_list,old
    preproc_space()
    preproc_command := preproc_word()
    if \preproc_if_state then {
        if match("if",preproc_command) then {
            preproc_command := "$if"
        }
    }
    preproc_space()
    case preproc_command of {
        "define": {
            if /preproc_if_state then {
                if sym := preproc_word() &
                        value := preproc_scan_define_value() then {
                    if \(old := preproc_sym_table[sym]) ~=== value then {
                        preproc_error("redefinition of " || sym || " = " ||
                                old)
                    } else {
                        preproc_sym_table[sym] := value
                    }
                } else {
                    preproc_error()
                }
            }
        }
        "undef": {
            if /preproc_if_state then {
                if sym := preproc_word() &
                        preproc_at_end() then {
                    delete(preproc_sym_table,sym)
                } else {
                    preproc_error()
                }
            }
        }
        "ifdef" | "ifndef": {
            push(preproc_if_stack,preproc_if_state)
            if sym := preproc_word() &
                    preproc_at_end() then {
                if /preproc_if_state then {
                    value := (\preproc_sym_table[sym] & &null) | "false"
                    if match("n",preproc_command,3) then {
                        value := (\value & &null) | "false"
                    }
                    preproc_if_state := value
                } else {
                    preproc_if_state := "off"
                }
            } else {
                preproc_if_state := "off"
                preproc_error()
            }
        }
        "$if": {    # handles if... command in "if'd-out" code
                push(preproc_if_stack,preproc_if_state)
                preproc_if_state := "off"
        }
        "else": {
            if preproc_at_end() then {
                if *preproc_if_stack <= preproc_nest_level then {
                    preproc_error("no corresponding $if...")
                } else {
                    #preproc_if_state := (\preproc_if_state & &null) | "done"
                    preproc_if_state := {
                        case preproc_if_state of {
                            "false": &null
                            "off": "off"
                            default: "false"
                        }
                    }
                }
            } else {
                preproc_error()
            }
        }
        "endif": {
            if preproc_at_end() then {
                (*preproc_if_stack >= preproc_nest_level &
                        preproc_if_state := pop(preproc_if_stack)) |
                        preproc_error("no corresponding $if...")
            } else {
                *preproc_if_stack >= preproc_nest_level &
                        preproc_if_state := pop(preproc_if_stack)
                preproc_error()
            }
        }
        "include": {
            if /preproc_if_state then {
                path_list := preproc_get_path_list()
                if sym := preproc_qword() & *sym > 0 &
                        preproc_at_end() then {
                    if member(preproc_include_set,sym) then {
                        preproc_error("circular reference to " || image(sym))
                    } else {
                        if new_file := open(
                              new_filename := sym | (!path_list || "/" || sym))
                              then {
                            push(preproc_file_stack,
                                 preproc_file,preproc_filename,
                                 preproc_include_name,preproc_line,
                                 preproc_nest_level)
                            preproc_filename := new_filename
                            preproc_include_name := sym
                            preproc_file := new_file
                            preproc_line := 0
                            preproc_nest_level := *preproc_if_stack
                            insert(preproc_include_set,sym)
                        } else {
                            preproc_error("cannot open " || image(sym))
                        }
                    }
                } else {
                    preproc_error()
                }
            }
        }
        "line": {
            #if /preproc_if_state then {
                if new_line := integer(tab(many(&digits))) &
                        preproc_opt_space() &
                        (new_filename := preproc_qword() | &null) \ 1 &
                        (/new_filename | *new_filename > 0) \ 1 &
                        preproc_at_end() then {
                    preproc_filename := \new_filename
                    preproc_line := new_line
                } else {
                    preproc_error()
                }
            #}
        }
        "error": {
            if /preproc_if_state then {
                preproc_space()
                preproc_error(trim(tab(find("#") | 0),' \t\f\r'))
            }
        }
        "ITRACE": {
            if /preproc_if_state then {
                if value := integer(tab(many(&digits ++ "-"))) &
                        preproc_at_end() then {
                    &trace := value
                } else {
                    preproc_error()
                }
            }
        }
        default: {
            if /preproc_if_state then {
                preproc_error("unknown preprocessor directive")
            }
        }
    }
    preproc_command := &null
end

#
# a_Scans and make substitutions in a text line.
#
procedure preproc_scan_text(done_set)
    local q,result,p,interesting_in_quotes,ident,value
    static interesting_chars
    initial {
        interesting_chars := '#"\'_' ++ &letters
    }
    if /preproc_if_state then {
        if *preproc_sym_table > 0 then {
            &pos := q := 1
            result := ""
            while tab(upto(interesting_chars)) do {
                case move(1) of {
                    "#": {
                        move(-1)
                        tab(0)
                    }
                    "\"" | "'": {
                        interesting_in_quotes := '\\' ++ &subject[&pos - 1]
                        repeat {
                            while tab(upto(interesting_in_quotes)) do {
                                case move(1) of {
                                    "\\": move(1)
                                    default: {
                                        break break
                                    }
                                }
                            }
                            suspend preproc_sync_lines()
                            suspend if q = 1 then .&subject else
                                    result || &subject[q:0]
                            if not match("_",,-1) then {
                                break
                            }
                            &subject := preproc_read() | fail
                            preproc_print_line := preproc_line
                            preproc_line +:= 1
                            result := ""
                        }
                    }
                    default: {
                        move(-1)
                        p := &pos
                        ident := tab(many(preproc_word_chars))
                        if value := \preproc_sym_table[ident] then {
                            if /done_set |
                                    {type(done_set) == "string" &
                                        done_set := set([done_set])
                                    not member(done_set,ident)} then {
                                value ? value :=
                                    preproc_scan_text(insert(copy(\done_set),
                                                             ident) | ident)
                                result ||:= &subject[q:p] || value
                                q := &pos
                            }
                        }
                    }
                }
            }
            if /done_set then {
                suspend preproc_sync_lines()
            }
            suspend if q = 1 then .&subject else result || &subject[q:0]
        }
        else {
            suspend preproc_sync_lines()
            suspend .&subject
            #suspend image(preproc_filename) || ":" ||
            #       preproc_line || " " || &subject
        }
        preproc_print_line := preproc_line
    }
end

#
# Reads an input line.  Manages end-of-file and reverting to including
# file if appropriate, failing at end-of-input.
#
procedure preproc_read()
    local result
    until result := read(preproc_file) do {
        if *preproc_if_stack ~= preproc_nest_level then {
            preproc_error("$if(s) without $endif(s): " ||
                    *preproc_if_stack - preproc_nest_level)
            until *preproc_if_stack <= preproc_nest_level do
                preproc_if_state := pop(preproc_if_stack)
        }
        close(preproc_file)
        delete(preproc_include_set,preproc_include_name)
        (preproc_nest_level := pop(preproc_file_stack) &
            preproc_line := pop(preproc_file_stack) &
            preproc_include_name := pop(preproc_file_stack) &
            preproc_filename := pop(preproc_file_stack) &
            preproc_file := pop(preproc_file_stack)) | fail
    }
    preproc_line +:= 1
    #write(&errout,"+++ ",image(preproc_filename),":",
    #             preproc_line," (",preproc_if_state,"): ",result)
    return result
end

#
# a_Scans an identifier.
#
procedure preproc_word()
    static word_starters
    initial {
        word_starters := &letters ++ '_'
    }
    suspend any(word_starters) & tab(many(preproc_word_chars))
end

#
# a_Scans a possibly-quoted word (e.g. a file name).
#
procedure preproc_qword()
    local result
    suspend (="\"" &
        result := tab(find("\"")) &
        not match("\\",,&pos - 1) &
        move(1) & preproc_istring(result)) |
        preproc_word()
end

#
# a_Scans the value of a $define.
#
procedure preproc_scan_define_value()
    local q,interesting_in_quotes
    static interesting_chars
    initial interesting_chars := '#"\''

    if ="(" then {
        fail      # "$define name(" is specifically prohibited; needs whitespace
    }
    preproc_space()
    q := &pos
    (while tab(upto(interesting_chars)) do {
        case move(1) of {
            "#": {
                move(-1)
                break
            }
            default: {
                interesting_in_quotes := '\\' ++ &subject[&pos - 1]
                repeat {
                    while tab(upto(interesting_in_quotes)) do {
                        case move(1) of {
                            "\\": move(1)
                            default: {
                                break break
                            }
                        }
                    }
                    fail # end of line inside quotes!!
                }
            }
        }
    }) | tab(0)
    return trim(&subject[q:&pos],' \t\f\r')
end

#
# a_Scans white space.
#
procedure preproc_space()
    suspend tab(many(' \t\f\r'))
end

#
# a_Scans optional white space.
#
procedure preproc_opt_space()
    local i
    suspend if i := many(' \t\f\r') then tab(i) else ""
end

#
# Tests for &pos at the logical end of a preprocessor directive.
#
procedure preproc_at_end()
    preproc_space()
    return pos(0) | match("#")
end

#
# Outputs an error message.
#
procedure preproc_error(msg)
    local filename
    static non_shell_word_chars
    initial non_shell_word_chars := ~(&letters ++ &digits ++ '_.-')
    /msg := "syntax error"
    filename := preproc_filename
    if upto(non_shell_word_chars,filename) then {
        filename := image(filename)
    }
    write(&errout,"File ",filename,"; Line ",preproc_line," # ",
        "$" || \preproc_command || ": " | "",msg)
    preproc_err_count +:= 1
    return
end

#
# a_Returns the list of directories in the LPATH environment variable.
#
procedure preproc_get_path_list()
    static the_list
    initial {
        the_list := preproc_compute_path_list()
    }
    return the_list
end

#
# Computes the list of directories in the LPATH environment variable.
#
procedure preproc_compute_path_list()
    local result,path_string,path_sep
    result := []    # FIX ME: compute path list

   if not (path_string := getenv("LPATH")) then {
       if binpath := (&features ? (="Binaries at " & tab(0))) then
	   path_string := binpath || "../uni/lib " ||
			   binpath || "../ipl/gincl " ||
			   binpath || "../ipl/mincl " ||
			   binpath || "../ipl/incl"
       else if (f := open((binpath:=getpaths()) || ("nticonx.exe"|"wiconx.exe"))) then {
	   close(f)
	   path_string := binpath || "../uni/lib " ||
			   binpath || "../ipl/gincl " ||
			   binpath || "../ipl/mincl " ||
			   binpath || "../ipl/incl"
       }
   }

    if \path_string ~== "" then {
        path_sep := getenv("PATHSEP") | " "
        path_string ? {
            while put(result,tab(find(path_sep))) do {
                move(1)
            }
            put(result,tab(0))
        }
    }
    return result
end

#
# Determines if a "#lines" is called for and generates one if so.
#
procedure preproc_sync_lines()
    local delta
    if preproc_filename ~=== preproc_print_filename then {
        suspend "#line " || preproc_line - 1 || " " || image(preproc_filename)
        preproc_print_filename := preproc_filename
    }
    else {
        delta := preproc_line - preproc_print_line
        #write(&errout,"+++++ preproc_line = ",image(preproc_line),
        #  "; preproc_print_line = ",image(preproc_print_line),
        #  "; delta = ",image(delta))
        if delta ~= 1 then {
            if delta < 20 then {
                suspend 2 to delta & ""
            } else {
                suspend "#line " || preproc_line - 1 || " " ||
                    image(preproc_filename)
            }
        }
    }
    preproc_print_line := preproc_line
end

#
# Makes escape-sequence substitutions in an Icon-type string literal.
#
procedure preproc_istring(s)
    local r,c
    r := ""
    s ? {
        while r ||:= tab(upto('\\')) do {
            move(1)
            r ||:= case c := map(move(1)) of {
                "b": "\b"       # backspace
                "d": "\d"       # delete (rubout)
                "e": "\e"       # escape (altmode)
                "f": "\f"       # formfeed
                "l": "\l"       # linefeed (newline)
                "n": "\n"       # newline (linefeed)
                "r": "\r"       # carriage return
                "t": "\t"       # horizontal tab
                "v": "\v"       # vertical tab
                "x": preproc_istring_radix(16,2)# hexadecimal code
                "^": char(ord(move(1)) % 32) | break # control code
                default: {      # either octal code or non-escaped character
                    if any('01234567',c) then { # if octal digit
                        move(-1)
                        preproc_istring_radix(8,3)
                    }
                    else c          # else non-escaped character
                } | break
            }
        }
        r ||:= tab(0)
    }
    return r
end

#
# Handles character-code specification in string literal.
#
procedure preproc_istring_radix(r,max)
  local n,d,i,c
  d := "0123456789abcdef"[1:r + 1]
  n := 0
  every 1 to max do {
      c := move(1) | break
      if not (i := find(map(c),d) - 1) then {
          move(-1)
          break
      }
      n := n * r + i
  }
  return char(n)
end
