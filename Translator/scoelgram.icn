### This file created by IYACC 1.0
### Please send bug reports to raypereda@hotmail.com
#define YYPREFIX "yy"
#line 129 "scoelgram.y"

procedure Keyword(x1,x2)
	static keywords
	initial {
		keywords := set(["allocated","clock","collections","column","current",
				"date","now","dateline","digits","e","error",
				"errornumber","errortext","errorvalue","errout","fail",
				"eventcode","eventsource","eventvalue","features",
				"file","host","input","lcase","letters","level",
				"line","main","null","output","phi","pi","pick","pos",
				"progname","random","regions","source","storage",
				"subject","time","trace","dump","ucase","version",
				"errno","window","col","row","x","y","interval",
				"control","shift","meta","lpress","mpress","rpress",
				"lrelease","mrelease","rrelease","ldrag","mdrag",
				"rdrag","resize","ascii","cset"])
	}

	# verify that x2 is a valid keyword
	if not member(keywords, x2.s) then
		yyerror("&" || x2.s ||" is not a valid keyword!")

	children := [x1, x2]
	return node("keyword", children)
end

global set_of_all_fields, dummyrecno
procedure Field(x1,x2,x3)
	initial { set_of_all_fields := set(); dummyrecno := 1 }

	if \iconc then {
		if type(x3) == "token" then {
			nsert(set_of_all_fields, x3.s)
#			write(&errout, "field ", image(x3.s))
		}
	}
	children := [x1, x2, x3]
	return node("field", children)
end

procedure Clone1stToken(n)
	case type(n) of {
		"token": return copy(n)
		"treenode": {
				return Clone1stToken(!n.children)
			}
	}
end

global outline, outcol, outfilename,package_level_syms,package_level_class_syms

procedure Progend(x1)
   
	if *\parsingErrors > 0 then {
		every pe := !parsingErrors do {
			write(&errout, pe.errorMessage)
		}
		istop(*\parsingErrors || " error" ||
				(if *\parsingErrors > 1 then "s" else ""))
	}

	if /x1 then istop("error: empty file")

	package_level_syms := set()
	package_level_class_syms := set()
	set_package_level_syms(x1)
	scopecheck_superclass_decs(x1)

	outline := 1
	outcol := 1
   #
   # export specifications for each class
   #
	native := set()
	every cl := classes.foreach_t() do {
		cl.WriteSpec()
		insert(native, cl)
	}
   #
   # import class specifications, transitively
   #
	repeat {
		added := 0
		every super := ((classes.foreach_t()).foreachsuper() | !imports) do {
			if /classes.lookup(super) then {
				added := 1
				readspec(super)
				cl := classes.lookup(super)
				if /cl then halt("can't inherit class '",super,"'")
				iwrite("  inherits ", super, " from ", cl.linkfile)
				writelink(cl.dir, cl.linkfile)
			}
		}
		if added = 0 then break
	}
  #
  # Compute the transitive closure of the superclass graph. Then
  # resolve inheritance for each class, and use it to apply scoping rules.
  #
	every (classes.foreach_t()).transitive_closure()
	every (classes.foreach_t()).resolve()

	scopecheck_bodies(x1)

	if \thePackage then {
		every thePackage.insertsym(!package_level_syms)
	}

	if \iconc then  {
		iconc_prep_parse_tree(&null, x1)
	}

  #
  # generate output
  #
#  iwrite("Generating code:")
	yyprint(x1)
	write(yyout)

   # generate invocable declarations for identifiers in unevaluated exprs
	if (*\list_of_invocables)>0 then {
		writes(yyout, "invocable ")
		every temp := list_of_invocables[i := 1 to *list_of_invocables] do {
			writes(yyout, image(temp))
			if i < *list_of_invocables then writes(yyout, ",")
		}
		write(yyout)
	}

	if \iconc & (type(set_of_all_fields) == "set") &
			(*set_of_all_fields > 0) then {
		arandomfield := !set_of_all_fields
		writes(yyout, "record __dummyrecord",dummyrecno,"(",arandomfield)
		delete(set_of_all_fields, arandomfield)
		every writes(yyout, ",", !set_of_all_fields)
		write(yyout, ")")
		dummyrecno +:= 1
		set_of_all_fields := set()
	}
end
#line 145 "scoelgram.icn"
$define IDENT 257
$define INTLIT 258
$define REALLIT 259
$define STRINGLIT 260
$define CSETLIT 261
$define EOFX 262
$define BREAK 263
$define BY 264
$define CASE 265
$define CLASS 266
$define CREATE 267
$define CRITICAL 268
$define DEFAULT 269
$define DO 270
$define ELSE 271
$define END 272
$define EVERY 273
$define FAIL 274
$define GLOBAL 275
$define IF 276
$define IMPORT 277
$define iconINITIAL 278
$define INITIALLY 279
$define SUPER 280
$define LINK 281
$define LOCAL 282
$define METHOD 283
$define NEXT 284
$define NOT 285
$define OF 286
$define PACKAGE 287
$define RECORD 288
$define REPEAT 289
$define RETURN 290
$define STATIC 291
$define SUSPEND 292
$define THEN 293
$define THREAD 294
$define TO 295
$define UNTIL 296
$define WHILE 297
$define BANG 298
$define MOD 299
$define AUGMOD 300
$define AND 301
$define AUGAND 302
$define STAR 303
$define AUGSTAR 304
$define INTER 305
$define AUGINTER 306
$define PLUS 307
$define AUGPLUS 308
$define UNION 309
$define AUGUNION 310
$define MINUS 311
$define AUGMINUS 312
$define DIFF 313
$define AUGDIFF 314
$define DOT 315
$define SLASH 316
$define AUGSLASH 317
$define ASSIGN 318
$define INVASSIGN 319
$define SWAP 320
$define NMLT 321
$define AUGNMLT 322
$define REVASSIGN 323
$define REVSWAP 324
$define NMLE 325
$define AUGNMLE 326
$define EQ 327
$define AUGEQ 328
$define NMGT 329
$define AUGNMGT 330
$define NMGE 331
$define AUGNMGE 332
$define QMARK 333
$define AUGQMARK 334
$define AT 335
$define AUGAT 336
$define BACKSLASH 337
$define CARET 338
$define AUGCARET 339
$define BAR 340
$define CONCAT 341
$define AUGCONCAT 342
$define TILDE 343
$define NMNE 344
$define AUGNMNE 345
$define LPAREN 346
$define RPAREN 347
$define PCOLON 348
$define COMMA 349
$define MCOLON 350
$define COLON 351
$define COLONCOLON 352
$define SEMICOL 353
$define LBRACK 354
$define RBRACK 355
$define LBRACE 356
$define RBRACE 357
$define DOLLAR 358
$define ABSTRACT 359
$define PCONDASSN 360
$define PIMDASSN 361
$define PSETCUR 362
$define SND 363
$define SNDBK 364
$define RCV 365
$define RCVBK 366
$define YYERRCODE 256
procedure init() 
  yylhs := [                                        -1,
    0,    1,    1,    2,    2,    2,    2,    2,    2,    9,
    9,    9,   14,   14,    8,    8,   15,   15,   17,   17,
   17,   18,   18,   16,   16,   16,   16,   16,    6,    7,
    5,   22,   22,   21,   21,    4,    3,   20,   24,   24,
   19,   19,   26,   13,   13,   13,   23,   23,   27,   27,
   28,   28,   28,   28,   10,   10,   30,   30,   11,   11,
   12,   12,   31,   31,   25,   25,   32,   32,   32,   32,
   32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
   32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
   33,   33,   33,   34,   34,   35,   35,   35,   35,   35,
   35,   35,   36,   36,   37,   37,   37,   37,   37,   38,
   38,   38,   38,   38,   39,   39,   40,   40,   40,   40,
   41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
   41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
   42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
   42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
   42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
   47,   47,   48,   48,   49,   49,   50,   44,   44,   44,
   44,   45,   45,   46,   54,   54,   55,   55,   51,   51,
   53,   53,   29,   29,   29,   29,   43,   56,   56,   56,
   52,   52,    0,   25,
  ]
  yylen := [                            2,
    2,    0,    2,    1,    1,    1,    1,    1,    1,    0,
    5,    8,    0,    1,    7,    3,    3,    6,    0,    3,
    3,    3,    2,    0,    2,    2,    2,    2,    2,    2,
    2,    1,    3,    1,    1,    2,    5,    3,    0,    1,
    2,    6,    5,    0,    1,    3,    1,    3,    1,    3,
    1,    3,    3,    5,    0,    4,    1,    1,    0,    3,
    0,    3,    0,    1,    1,    3,    1,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    1,    3,    5,    1,    3,    1,    3,    3,    3,    3,
    3,    3,    1,    3,    1,    3,    3,    3,    3,    1,
    3,    3,    3,    3,    1,    3,    1,    3,    3,    3,
    1,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
    1,    1,    2,    3,    3,    3,    4,    3,    4,    4,
    6,    6,    8,    8,    3,    3,    1,    3,    2,    2,
    2,    4,    2,    4,    2,    4,    2,    1,    2,    2,
    4,    4,    6,    6,    1,    3,    3,    3,    1,    3,
    1,    3,    1,    1,    1,    1,    6,    1,    1,    1,
    1,    3,    3,    1,
  ]
  yydefred := [                         0,
    2,    0,    0,    0,    1,    0,    0,    0,    0,    0,
    0,    3,    4,    5,    6,    7,    8,    9,    0,  203,
    0,   47,    0,   34,   35,   32,    0,    0,   29,    0,
   14,    0,    0,    0,    0,    0,    0,   16,    0,    0,
    0,    0,    0,   48,   33,    0,    0,    0,   57,    0,
   58,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   20,   23,   21,    0,    0,    0,   49,   37,    0,    0,
   41,   27,   26,    0,   25,   28,   55,    0,   22,    0,
   18,    0,    0,  204,    0,  193,  194,  195,  196,    0,
    0,    0,    0,  178,    0,  152,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  167,    0,  141,   65,    0,   91,
    0,    0,    0,    0,  110,    0,  117,    0,  142,  143,
  144,  145,  146,  147,  148,  149,    0,    0,    0,    0,
   56,    0,   53,   50,   46,    0,  153,    0,    0,    0,
    0,  123,    0,  179,    0,  180,    0,    0,  127,  170,
  169,  130,  133,  129,  138,  135,  128,  126,  131,  136,
  139,  122,  140,  132,  124,  125,  134,  137,  189,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   55,   15,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  154,    0,  156,    0,
  155,   66,    0,   80,   89,   77,   78,   75,   74,   76,
   73,   79,   69,   68,   86,   71,   70,   85,   82,   84,
   83,   88,   90,   81,   72,   87,    0,    0,    0,    0,
    0,   95,    0,    0,    0,    0,    0,    0,  114,  111,
  112,  113,  120,  119,  118,  116,    0,  168,  166,    0,
    0,    0,  158,  191,    0,    0,    0,   43,    0,    0,
    0,    0,    0,   54,    0,    0,    0,    0,    0,    0,
  190,  202,    0,  160,  199,  200,  198,    0,  157,    0,
  159,    0,    0,    0,    0,    0,   60,   42,    0,    0,
    0,    0,  185,    0,   93,    0,  192,    0,    0,    0,
    0,   55,   11,   62,    0,    0,    0,  184,    0,  197,
    0,    0,  162,  161,    0,    0,    0,  186,    0,    0,
    0,  164,  163,   12,
  ]
  yydgoto := [                          2,
    3,   12,   53,   54,   15,   16,   17,   18,  149,   39,
  249,  322,   65,   32,   19,   55,   34,  125,   56,   57,
   26,   27,   23,   47,  156,   58,   66,   67,  127,   59,
  189,  128,  129,  130,  131,  132,  133,  134,  135,  136,
  137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
  190,  193,  315,  352,  353,  338,
  ]
  yysindex := [                      -231,
    0,    0,  -68,  -14,    0, -127,  -34,   15,   15,   15,
  -11,    0,    0,    0,    0,    0,    0,    0,  -62,    0,
  -85,    0, -249,    0,    0,    0,  -48,  -48,    0,  -59,
    0,   32, -248,   -6,   93,   15,  -34,    0,  -33, -184,
  102,  -85,  135,    0,    0, -249,   59,  124,    0,  150,
    0,  146, -208, -208,  -62, -208, -208,  100,  -34,  205,
    0,    0,    0,  120,  129, -334,    0,    0, 3800,  134,
    0,    0,    0,  207,    0,    0,    0, -150,    0,  111,
    0,  135,  139,    0,  138,    0,    0,    0,    0, 3800,
 3800, 3800, 3800,    0, 3800,    0, 3890, 3800, 3800, 3800,
 3800, 3800, 3890, -113, 3890, 3890, 3890, 3890, 3890, 3890,
 3890, 3890, 3890, 3890, 3890, 3890, 3890, 3890, 3890, 3890,
 3890, 3800, 3800, 3800,    0,  194,    0,    0, 4029,    0,
  357,  157,  -66, -157,    0, -219,    0, -140,    0,    0,
    0,    0,    0,    0,    0,    0,  135, -191,  228, -126,
    0,  151,    0,    0,    0,  194,    0, -204,  194, -257,
 -152,    0,  194,    0, -225,    0, -223, -198,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, -262,
 -128,  152,  153, 3890, 3890, 3890, 3890, 3890, 3890, 3890,
 3890, 3890, 3890, 3890, 3890, 3890, 3890, 3890, 3890, 3890,
 3890, 3890, 3890, 3890, 3890, 3890, 3890, 3890, 3890, 3890,
 3890, 3890, 3890, 3890, 3890, 3890, 3890, 3890, 3890, 3890,
 3890, 3890, 3890, 3890, 3890, 3890, 3890, 3890, -240, 3800,
 3800, 3496, -239,  160,  135,    0,    0, 3800, 3800,  214,
  176, 3800, 3800, 3800, 3800, 3800,    0, 3800,    0, 3800,
    0,    0,  245,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  157,  157,  157,  157,
  157,    0,  157,  -66, -157, -157, -157, -157,    0,    0,
    0,    0,    0,    0,    0,    0,  138,    0,    0, -159,
 -212,  -90,    0,    0, -147, -241,  200,    0,  209, -126,
 -282,  282,  212,    0, 3699,  194, -190,  194,  194,  194,
    0,    0, 3890,    0,    0,    0,    0, 3800,    0, 3800,
    0, -142, 3800, 3800,  225, 3800,    0,    0, 3800,  231,
 -260,  -54,    0, 3800,    0, -285,    0,  233,  237,   29,
   37,    0,    0,    0, 3800, 3800, 3699,    0,  194,    0,
 3800, 3800,    0,    0, -126,  194,  194,    0,   50,   55,
 3800,    0,    0,    0,
  ]
  yyrindex := [                       113,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, -148,    0,
 -245,    0, -189,    0,    0,    0,  216,  319,    0,    0,
    0, -125,    0, -162,    0,    0,  242,    0, -251, -245,
    0, -245,  243,    0,    0,  246,    0,    0,    0,    0,
    0,    0, -251, -251,  -35, -251, -251,    0,    0,    0,
    0,    0,    0, -132,    0,  250,    0,    0,    0,    0,
    0,    0,    0,  312,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    7,    0,    0,    0,    0, 3968,
    0,    0,    0,    0,    0,    0,    0,    0, 3968, 3968,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  132,  -87,   20,    0,  -83,    0,    0, 3392,    0,
 3289,  213, 2368, 2471,    0, 2574,    0, 3192,    0,    0,
    0,    0,    0,    0,    0,    0,  243,    0,    0, 3598,
    0, -114,    0,    0,    0,  316,    0,    0,  419, 1853,
    0,    0,  522,    0, 1956,    0, 2059, 2162,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  241,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  132,
  -87,  252,    0,    0,  243,    0,    0,    0, -269,    0,
    0,    0,    0,    0,    0,    0,    0, -154,    0,   20,
    0,    0,  617,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  720,  823,  926, 1029,
 1132,    0, 1235, 2677, 2780, 2883, 2986, 3089,    0,    0,
    0,    0,    0,    0,    0,    0,  110,    0,    0,    0,
  -61,    0,    0,    0,    0,    0,    0,    0,    0, 3598,
    0,    0,    0,    0,    0, 1338, 2265, 1441, 1544, 1647,
    0,    0,    0,    0,    0,    0,    0,    0,    0, -145,
    0,    0,  132,  132,    0, -269,    0,    0, -269,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1750,    0,
  132,  132,    0,    0, 3598,   30,   38,    0,    0,    0,
 -269,    0,    0,    0,
  ]
  yygindex := [                         0,
  591,    0,  174,  235,    0,    0,    0,    0,    0,  -73,
 -306, -253, -139,  548,    0,  227,  447,  -31,    0,    0,
   97,  596,   88,    0,  -69,  556,    0,  528,  -74,    0,
  -89, 4179,    0, -188,    0,  562,  386,  347,   -2,    0,
  -55,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 -118,  353,    0,    0,  268,    0,
  ]
$define YYTABLESIZE 4397
  yytable := [                        126,
  157,   42,   61,  150,  191,  153,  263,  244,   40,  164,
  166,   19,  252,  346,   82,  194,  307,  316,  194,   83,
   24,  158,  159,  160,    1,  161,   19,   24,  163,   19,
  165,  167,  168,   19,  192,  292,   19,   19,  308,  317,
  194,  162,   19,  194,  254,   19,  255,  169,   48,  172,
  173,  174,  175,  176,  177,  178,  179,  180,  181,  182,
  183,  184,  185,  186,  187,  188,    7,   36,  381,  370,
  347,  256,   36,  342,   50,  194,   36,  194,  235,   11,
  354,  251,   36,   63,  257,   36,  258,   36,  194,   36,
  366,   36,  363,   36,   17,  364,  194,   36,   36,   35,
   19,   24,  194,   41,  343,  319,   29,   19,   13,   17,
  194,   41,   17,   19,  358,  236,   17,  237,  238,   17,
   17,  310,  312,   13,   46,   17,   13,  384,   17,   21,
   13,   55,   45,   13,   13,  335,  359,  336,  337,   13,
  253,  231,   13,  170,  355,  232,   78,  233,  194,   55,
   52,  248,  314,   55,  245,   49,   55,   55,  234,  323,
  171,  246,   55,   36,   51,   55,   33,   60,  331,   36,
  192,  311,  320,   38,  239,  324,   13,   13,  321,  303,
  304,  305,  326,  327,  328,  329,  330,  334,   38,  258,
   17,   38,   63,    5,   63,   38,   17,    6,   35,   38,
   63,  340,  151,   63,   38,  240,    7,  309,    8,  341,
   13,   63,    9,  241,   51,  242,   51,  243,   10,   11,
  258,   51,   22,   48,  360,  361,  259,   55,  299,  300,
  301,  302,   52,   55,   52,  306,   13,   14,   14,   52,
  227,    7,  228,   13,  229,   30,  230,   20,   49,   50,
  357,    6,  379,  380,   11,  351,  323,   51,  258,  323,
    7,   63,    8,  151,  339,   33,    9,   63,  356,   38,
  151,   24,   10,   11,   25,   38,  151,  151,  151,   72,
   73,  151,   75,   76,  369,  151,   37,   64,  375,  151,
   31,  323,  151,   64,  151,  376,  377,  351,  367,  151,
   36,  151,  368,   38,  151,  151,  151,  151,  151,  151,
  151,  151,  151,  151,  151,  151,  151,  151,  151,  151,
  151,  151,  151,  151,  151,   52,  151,  151,  151,  151,
  151,  151,  151,  151,  151,  151,  151,  151,  151,   43,
  151,  151,  151,  151,  151,  151,  151,  151,  151,   44,
  151,  151,  151,  151,  151,  151,  151,  151,   62,  151,
  151,  151,  151,  151,  151,  151,  165,  152,   86,   87,
   88,   89,   63,  165,    2,  373,   63,  258,    2,  165,
  165,  165,  187,  374,  165,  258,  187,    2,  165,    2,
  188,   64,  165,    2,  188,  165,  382,  165,  258,    2,
    2,  383,  165,  258,  165,   68,   70,  165,  165,  165,
  165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
  165,  165,  165,  165,  165,  165,  165,  165,   50,  165,
  165,  165,  165,  165,  165,  165,  165,  165,  165,  165,
  165,  165,   69,  165,  165,  165,  165,  165,  165,  165,
  165,  165,   77,  165,  165,  165,  165,  165,  165,  165,
  165,   79,  165,  165,  165,  165,  165,  165,  165,   96,
   80,   86,   87,   88,   89,   81,   96,   30,   63,  147,
   63,   30,   96,   96,   96,  148,   61,   96,   63,   60,
   30,   96,   30,  155,  194,   96,   30,  226,   96,  247,
   96,  250,   30,   30,  260,   96,  318,   96,  333,  261,
   96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
   96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
   96,  325,   96,   96,   96,   96,   96,   96,   96,   96,
   96,   96,   96,   96,   96,  344,   96,   96,   96,   96,
   96,   96,   96,  348,   96,  345,   96,   96,   96,   96,
   96,   96,   96,   96,  349,   96,   96,   96,   96,   96,
   96,   96,   64,  295,  296,  297,  298,  362,  371,   64,
   31,  365,  372,   10,   31,   64,   64,   64,   39,   44,
   64,    4,   40,   31,   64,   31,   45,  201,   64,   31,
   63,   64,   74,   64,   28,   31,   31,   71,   64,  154,
   64,  294,  332,   64,   64,   64,    0,   64,   64,   64,
   64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
   64,   64,   64,   64,  378,   64,   64,   64,   64,   64,
   64,   64,   64,   64,   64,   64,   64,   64,    0,   64,
   64,   64,   64,   64,   64,   64,   64,   64,    0,   64,
   64,   64,   64,   64,   64,   64,   64,    0,   64,   64,
   64,   64,   64,   64,   64,  150,    0,  219,    0,    0,
    0,  220,  150,  221,    0,  222,    0,  223,  150,  150,
  150,    0,    0,  150,    0,    0,  224,  150,    0,    0,
  225,  150,    0,    0,  150,    0,  150,    0,    0,    0,
    0,  150,    0,  150,    0,    0,  150,  150,  150,    0,
  150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
  150,  150,  150,  150,  150,  150,  150,    0,  150,  150,
  150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
  150,    0,  150,  150,  150,  150,  150,  150,  150,  150,
  150,    0,  150,  150,  150,  150,  150,  150,  150,  150,
    0,  150,  150,  150,  150,  150,  150,  150,  177,    0,
  287,  288,  289,  290,  291,  177,  293,    0,    0,    0,
    0,  177,  177,  177,    0,    0,  177,    0,    0,    0,
  177,    0,    0,    0,  177,    0,    0,  177,    0,  177,
    0,    0,    0,    0,  177,    0,  177,    0,    0,  177,
  177,  177,    0,  177,  177,  177,  177,  177,  177,  177,
  177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
    0,  177,  177,  177,  177,  177,  177,  177,  177,  177,
  177,  177,  177,  177,    0,  177,  177,  177,  177,  177,
  177,  177,  177,  177,    0,  177,  177,  177,  177,  177,
  177,  177,  177,   92,  177,  177,  177,  177,  177,  177,
  177,    0,    0,    0,    0,    0,   92,   92,   92,    0,
    0,   92,    0,    0,    0,   92,    0,    0,    0,   92,
    0,    0,   92,    0,   92,    0,    0,    0,    0,   92,
    0,   92,    0,    0,   92,   92,   92,   92,   92,   92,
   92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
   92,   92,   92,   92,   92,    0,   92,   92,   92,   92,
   92,   92,   92,   92,   92,   92,   92,   92,   92,    0,
   92,   92,   92,   92,   92,   92,   92,   92,   92,    0,
   92,   92,   92,   92,   92,   92,   92,   92,    0,   92,
   92,   92,   92,   92,   92,   92,  101,    0,    0,    0,
    0,    0,    0,  101,    0,    0,    0,    0,    0,  101,
  101,  101,    0,    0,  101,    0,    0,    0,  101,    0,
    0,    0,  101,    0,    0,  101,    0,  101,    0,    0,
    0,    0,  101,    0,  101,    0,    0,  101,  101,  101,
  101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
  101,  101,  101,  101,  101,  101,  101,  101,    0,  101,
  101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
  101,  101,    0,  101,  101,  101,  101,  101,  101,  101,
    0,  101,    0,  101,  101,  101,  101,  101,  101,  101,
  101,    0,  101,  101,  101,  101,  101,  101,  101,  100,
    0,    0,    0,    0,    0,    0,  100,    0,    0,    0,
    0,    0,  100,  100,  100,    0,    0,  100,    0,    0,
    0,  100,    0,    0,    0,  100,    0,    0,  100,    0,
  100,    0,    0,    0,    0,  100,    0,  100,    0,    0,
  100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
  100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
  100,    0,  100,  100,  100,  100,  100,  100,  100,  100,
  100,  100,  100,  100,  100,    0,  100,  100,  100,  100,
  100,  100,  100,    0,  100,    0,  100,  100,  100,  100,
  100,  100,  100,  100,    0,  100,  100,  100,  100,  100,
  100,  100,   97,    0,    0,    0,    0,    0,    0,   97,
    0,    0,    0,    0,    0,   97,   97,   97,    0,    0,
   97,    0,    0,    0,   97,    0,    0,    0,   97,    0,
    0,   97,    0,   97,    0,    0,    0,    0,   97,    0,
   97,    0,    0,   97,   97,   97,   97,   97,   97,   97,
   97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
   97,   97,   97,   97,    0,   97,   97,   97,   97,   97,
   97,   97,   97,   97,   97,   97,   97,   97,    0,   97,
   97,   97,   97,   97,   97,   97,    0,   97,    0,   97,
   97,   97,   97,   97,   97,   97,   97,    0,   97,   97,
   97,   97,   97,   97,   97,   99,    0,    0,    0,    0,
    0,    0,   99,    0,    0,    0,    0,    0,   99,   99,
   99,    0,    0,   99,    0,    0,    0,   99,    0,    0,
    0,   99,    0,    0,   99,    0,   99,    0,    0,    0,
    0,   99,    0,   99,    0,    0,   99,   99,   99,   99,
   99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
   99,   99,   99,   99,   99,   99,   99,    0,   99,   99,
   99,   99,   99,   99,   99,   99,   99,   99,   99,   99,
   99,    0,   99,   99,   99,   99,   99,   99,   99,    0,
   99,    0,   99,   99,   99,   99,   99,   99,   99,   99,
    0,   99,   99,   99,   99,   99,   99,   99,   98,    0,
    0,    0,    0,    0,    0,   98,    0,    0,    0,    0,
    0,   98,   98,   98,    0,    0,   98,    0,    0,    0,
   98,    0,    0,    0,   98,    0,    0,   98,    0,   98,
    0,    0,    0,    0,   98,    0,   98,    0,    0,   98,
   98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
   98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
    0,   98,   98,   98,   98,   98,   98,   98,   98,   98,
   98,   98,   98,   98,    0,   98,   98,   98,   98,   98,
   98,   98,    0,   98,    0,   98,   98,   98,   98,   98,
   98,   98,   98,    0,   98,   98,   98,   98,   98,   98,
   98,  102,    0,    0,    0,    0,    0,    0,  102,    0,
    0,    0,    0,    0,  102,  102,  102,    0,    0,  102,
    0,    0,    0,  102,    0,    0,    0,  102,    0,    0,
  102,    0,  102,    0,    0,    0,    0,  102,    0,  102,
    0,    0,  102,  102,  102,  102,  102,  102,  102,  102,
  102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
  102,  102,  102,    0,  102,  102,  102,  102,  102,  102,
  102,  102,  102,  102,  102,  102,  102,    0,  102,  102,
  102,  102,  102,  102,  102,    0,  102,    0,  102,  102,
  102,  102,  102,  102,  102,  102,    0,  102,  102,  102,
  102,  102,  102,  102,  176,    0,    0,    0,    0,    0,
    0,  176,    0,    0,    0,    0,    0,  176,  176,  176,
    0,    0,  176,    0,    0,    0,  176,    0,    0,    0,
  176,    0,    0,  176,    0,  176,    0,    0,    0,    0,
  176,    0,  176,    0,    0,  176,  176,  176,    0,  176,
  176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
  176,  176,  176,  176,  176,  176,    0,  176,  176,  176,
  176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
    0,  176,  176,  176,  176,  176,  176,  176,  176,  176,
    0,  176,  176,  176,  176,  176,  176,  176,  176,    0,
  176,  176,  176,  176,  176,  176,  176,  181,    0,    0,
    0,    0,    0,    0,  181,    0,    0,    0,    0,    0,
  181,  181,  181,    0,    0,  181,    0,    0,    0,  181,
    0,    0,    0,  181,    0,    0,  181,    0,  181,    0,
    0,    0,    0,  181,    0,  181,    0,    0,  181,  181,
  181,    0,  181,  181,  181,  181,  181,  181,  181,  181,
  181,  181,  181,  181,  181,  181,  181,  181,  181,    0,
  181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
  181,  181,  181,    0,  181,  181,  181,  181,  181,  181,
  181,  181,  181,    0,  181,  181,  181,  181,  181,  181,
  181,  181,    0,  181,  181,  181,  181,  181,  181,  181,
  174,    0,    0,    0,    0,    0,    0,  174,    0,    0,
    0,    0,    0,  174,  174,  174,    0,    0,  174,    0,
    0,    0,  174,    0,    0,    0,  174,    0,    0,  174,
    0,  174,    0,    0,    0,    0,  174,    0,  174,    0,
    0,  174,  174,  174,    0,  174,  174,  174,  174,  174,
  174,  174,  174,  174,  174,  174,  174,  174,  174,  174,
  174,  174,    0,  174,  174,  174,  174,  174,  174,  174,
  174,  174,  174,  174,  174,  174,    0,  174,  174,  174,
  174,  174,  174,  174,  174,  174,    0,  174,  174,  174,
  174,  174,  174,  174,  174,    0,  174,  174,  174,  174,
  174,  174,  174,  172,    0,    0,    0,    0,    0,    0,
  172,    0,    0,    0,    0,    0,  172,  172,  172,    0,
    0,  172,    0,    0,    0,  172,    0,    0,    0,  172,
    0,    0,  172,    0,  172,    0,    0,    0,    0,  172,
    0,  172,    0,    0,  172,  172,  172,    0,  172,  172,
  172,  172,  172,  172,  172,  172,  172,  172,  172,  172,
  172,  172,  172,  172,  172,    0,  172,  172,  172,  172,
  172,  172,  172,  172,  172,  172,  172,  172,  172,    0,
  172,  172,  172,  172,  172,  172,  172,  172,  172,    0,
  172,  172,  172,  172,  172,  172,  172,  172,    0,  172,
  172,  172,  172,  172,  172,  172,  183,    0,    0,    0,
    0,    0,    0,  183,    0,    0,    0,    0,    0,  183,
  183,  183,    0,    0,  183,    0,    0,    0,  183,    0,
    0,    0,  183,    0,    0,  183,    0,  183,    0,    0,
    0,    0,  183,    0,  183,    0,    0,  183,  183,  183,
    0,  183,  183,  183,  183,  183,  183,  183,  183,  183,
  183,  183,  183,  183,  183,  183,  183,  183,    0,  183,
  183,  183,  183,  183,  183,  183,  183,  183,  183,  183,
  183,  183,    0,  183,  183,  183,  183,  183,  183,  183,
  183,  183,    0,  183,  183,  183,  183,  183,  183,  183,
  183,    0,  183,  183,  183,  183,  183,  183,  183,  175,
    0,    0,    0,    0,    0,    0,  175,    0,    0,    0,
    0,    0,    0,  175,  175,    0,    0,  175,    0,    0,
    0,  175,    0,    0,    0,  175,    0,    0,  175,    0,
  175,    0,    0,    0,    0,  175,    0,  175,    0,    0,
  175,  175,  175,    0,  175,  175,  175,  175,  175,  175,
  175,  175,  175,  175,  175,  175,  175,  175,  175,  175,
  175,    0,  175,  175,  175,  175,  175,  175,  175,  175,
  175,  175,  175,  175,  175,    0,  175,  175,  175,  175,
  175,  175,  175,  175,  175,    0,  175,  175,  175,  175,
  175,  175,  175,  175,    0,  175,  175,  175,  175,  175,
  175,  175,   64,    0,    0,    0,    0,    0,    0,   64,
    0,    0,    0,    0,    0,    0,   64,   64,    0,    0,
   64,    0,    0,    0,   64,    0,    0,    0,   64,    0,
    0,   64,    0,   64,    0,    0,    0,    0,   64,    0,
   64,    0,    0,   64,   64,   64,    0,   64,   64,   64,
   64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
   64,   64,   64,   64,    0,   64,   64,   64,   64,   64,
   64,   64,   64,   64,   64,   64,   64,   64,    0,   64,
   64,   64,   64,   64,   64,   64,   64,   64,    0,   64,
   64,   64,   64,   64,   64,   64,   64,    0,   64,   64,
   64,   64,   64,   64,   64,  173,    0,    0,    0,    0,
    0,    0,  173,    0,    0,    0,    0,    0,    0,  173,
  173,    0,    0,  173,    0,    0,    0,  173,    0,    0,
    0,  173,    0,    0,  173,    0,  173,    0,    0,    0,
    0,  173,    0,  173,    0,    0,  173,  173,  173,    0,
  173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
  173,  173,  173,  173,  173,  173,  173,    0,  173,  173,
  173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
  173,    0,  173,  173,  173,  173,  173,  173,  173,  173,
  173,    0,  173,  173,  173,  173,  173,  173,  173,  173,
    0,  173,  173,  173,  173,  173,  173,  173,  171,    0,
    0,    0,    0,    0,    0,  171,    0,    0,    0,    0,
    0,    0,  171,  171,    0,    0,  171,    0,    0,    0,
  171,    0,    0,    0,  171,    0,    0,  171,    0,  171,
    0,    0,    0,    0,  171,    0,  171,    0,    0,  171,
  171,  171,    0,  171,  171,  171,  171,  171,  171,  171,
  171,  171,  171,  171,  171,  171,  171,  171,  171,  171,
    0,  171,  171,  171,  171,  171,  171,  171,  171,  171,
  171,  171,  171,  171,    0,  171,  171,  171,  171,  171,
  171,  171,  171,  171,    0,  171,  171,  171,  171,  171,
  171,  171,  171,    0,  171,  171,  171,  171,  171,  171,
  171,  182,    0,    0,    0,    0,    0,    0,  182,    0,
    0,    0,    0,    0,  182,    0,  182,    0,    0,  182,
    0,    0,    0,  182,    0,    0,    0,  182,    0,    0,
  182,    0,  182,    0,    0,    0,    0,  182,    0,  182,
    0,    0,  182,  182,  182,    0,  182,  182,  182,  182,
  182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
  182,  182,  182,    0,  182,  182,  182,  182,  182,  182,
  182,  182,  182,  182,  182,  182,  182,    0,  182,  182,
  182,  182,  182,  182,  182,  182,  182,    0,  182,  182,
  182,  182,  182,  182,  182,  182,    0,  182,  182,  182,
  182,  182,  182,  182,  103,    0,    0,    0,    0,    0,
    0,  103,    0,    0,    0,    0,    0,  103,  103,  103,
    0,    0,  103,    0,    0,    0,  103,    0,    0,    0,
  103,    0,    0,  103,    0,  103,    0,    0,    0,    0,
  103,    0,  103,    0,    0,  103,  103,  103,  103,  103,
  103,  103,  103,  103,    0,  103,    0,  103,    0,  103,
    0,  103,  103,  103,  103,  103,    0,  103,  103,  103,
  103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
    0,  103,  103,  103,  103,  103,  103,  103,  103,  103,
    0,  103,  103,  103,  103,  103,  103,  103,  103,    0,
  103,  103,  103,  103,  103,  103,  103,  105,    0,    0,
    0,    0,    0,    0,  105,    0,    0,    0,    0,    0,
  105,  105,  105,    0,    0,  105,    0,    0,    0,  105,
    0,    0,    0,  105,    0,    0,  105,    0,  105,    0,
    0,    0,    0,  105,    0,  105,    0,    0,  105,    0,
  105,  105,  105,    0,  105,    0,  105,  105,  105,  105,
  105,  105,  105,  105,  105,  105,    0,  105,  105,    0,
  105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
  105,  105,  105,    0,  105,  105,  105,  105,  105,  105,
  105,  105,  105,    0,  105,  105,  105,  105,  105,  105,
  105,  105,    0,  105,  105,  105,  105,  105,  105,  105,
  115,    0,    0,    0,    0,    0,    0,  115,    0,    0,
    0,    0,    0,  115,  115,  115,    0,    0,  115,    0,
    0,    0,  115,    0,    0,    0,  115,    0,    0,  115,
    0,  115,    0,    0,    0,    0,  115,    0,  115,    0,
    0,    0,  115,  115,  115,  115,  115,  115,  115,  115,
  115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
  115,  115,    0,  115,  115,  115,  115,  115,  115,  115,
  115,  115,  115,  115,  115,  115,    0,  115,    0,  115,
    0,    0,  115,  115,  115,  115,    0,  115,  115,  115,
  115,  115,  115,  115,  115,    0,  115,  115,  115,  115,
  115,  115,  115,  104,    0,    0,    0,    0,    0,    0,
  104,    0,    0,    0,    0,    0,  104,  104,  104,    0,
    0,  104,    0,    0,    0,  104,    0,    0,    0,  104,
    0,    0,  104,    0,  104,    0,    0,    0,    0,  104,
    0,  104,    0,    0,  104,  104,  104,  104,  104,  104,
  104,  104,  104,    0,  104,    0,  104,    0,  104,    0,
  104,  104,  104,  104,  104,    0,  104,  104,  104,  104,
  104,  104,  104,  104,  104,  104,  104,  104,  104,    0,
  104,  104,  104,  104,  104,  104,  104,  104,  104,    0,
  104,  104,  104,  104,  104,  104,  104,  104,    0,  104,
  104,  104,  104,  104,  104,  104,  106,    0,    0,    0,
    0,    0,    0,  106,    0,    0,    0,    0,    0,  106,
  106,  106,    0,    0,  106,    0,    0,    0,  106,    0,
    0,    0,  106,    0,    0,  106,    0,  106,    0,    0,
    0,    0,  106,    0,  106,    0,    0,  106,    0,  106,
  106,  106,    0,  106,    0,  106,  106,  106,  106,  106,
  106,  106,  106,  106,  106,    0,  106,  106,    0,  106,
  106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
  106,  106,    0,  106,  106,  106,  106,  106,  106,  106,
  106,  106,    0,  106,  106,  106,  106,  106,  106,  106,
  106,    0,  106,  106,  106,  106,  106,  106,  106,  108,
    0,    0,    0,    0,    0,    0,  108,    0,    0,    0,
    0,    0,  108,  108,  108,    0,    0,  108,    0,    0,
    0,  108,    0,    0,    0,  108,    0,    0,  108,    0,
  108,    0,    0,    0,    0,  108,    0,  108,    0,    0,
  108,    0,  108,  108,  108,    0,  108,    0,  108,  108,
  108,  108,  108,  108,  108,  108,  108,  108,    0,  108,
  108,    0,  108,  108,  108,  108,  108,  108,  108,  108,
  108,  108,  108,  108,  108,    0,  108,  108,  108,  108,
  108,  108,  108,  108,  108,    0,  108,  108,  108,  108,
  108,  108,  108,  108,    0,  108,  108,  108,  108,  108,
  108,  108,  109,    0,    0,    0,    0,    0,    0,  109,
    0,    0,    0,    0,    0,  109,  109,  109,    0,    0,
  109,    0,    0,    0,  109,    0,    0,    0,  109,    0,
    0,  109,    0,  109,    0,    0,    0,    0,  109,    0,
  109,    0,    0,  109,    0,  109,  109,  109,    0,  109,
    0,  109,  109,  109,  109,  109,  109,  109,  109,  109,
  109,    0,  109,  109,    0,  109,  109,  109,  109,  109,
  109,  109,  109,  109,  109,  109,  109,  109,    0,  109,
  109,  109,  109,  109,  109,  109,  109,  109,    0,  109,
  109,  109,  109,  109,  109,  109,  109,    0,  109,  109,
  109,  109,  109,  109,  109,  107,    0,    0,    0,    0,
    0,    0,  107,    0,    0,    0,    0,    0,  107,  107,
  107,    0,    0,  107,    0,    0,    0,  107,    0,    0,
    0,  107,    0,    0,  107,    0,  107,    0,    0,    0,
    0,  107,    0,  107,    0,    0,  107,    0,  107,  107,
  107,    0,  107,    0,  107,  107,  107,  107,  107,  107,
  107,  107,  107,  107,    0,  107,  107,    0,  107,  107,
  107,  107,  107,  107,  107,  107,  107,  107,  107,  107,
  107,    0,  107,  107,  107,  107,  107,  107,  107,  107,
  107,    0,  107,  107,  107,  107,  107,  107,  107,  107,
    0,  107,  107,  107,  107,  107,  107,  107,  121,    0,
    0,    0,    0,    0,    0,  121,    0,    0,    0,    0,
    0,  121,  121,  121,    0,    0,  121,    0,    0,    0,
  121,    0,    0,    0,  121,    0,    0,  121,    0,  121,
    0,    0,    0,    0,  121,    0,  121,    0,    0,  121,
  121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
  121,  121,  121,  121,  121,  121,    0,  121,  121,  121,
    0,  121,  121,  121,  121,  121,  121,  121,  121,  121,
  121,  121,  121,  121,    0,  121,  121,  121,  121,  121,
  121,  121,  121,  121,    0,  121,  121,    0,  121,  121,
  121,  121,  121,    0,  121,   94,  121,    0,  121,    0,
  121,    0,   94,    0,    0,    0,    0,    0,   94,   94,
   94,    0,    0,   94,    0,    0,    0,   94,    0,    0,
    0,   94,    0,    0,   94,    0,   94,    0,    0,    0,
    0,   94,    0,   94,    0,    0,   94,   94,   94,   94,
   94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
   94,   94,   94,   94,   94,   94,   94,    0,   94,    0,
   94,   94,   94,    0,   94,    0,   94,    0,   94,    0,
   94,    0,   94,   94,   94,   94,   94,   94,    0,   94,
   94,    0,    0,   94,   94,   94,   94,   94,   94,   94,
    0,   94,   94,   94,   94,   94,   94,   94,   67,    0,
    0,    0,    0,    0,    0,   67,    0,    0,    0,    0,
    0,   67,   67,   67,    0,    0,   67,    0,    0,    0,
   67,    0,    0,    0,   67,    0,    0,   67,    0,   67,
    0,    0,    0,    0,   67,    0,    0,    0,    0,   67,
   67,    0,   67,    0,   67,    0,   67,    0,   67,    0,
   67,    0,   67,    0,   67,    0,   67,   67,    0,    0,
    0,    0,   67,    0,    0,    0,   67,    0,   67,    0,
   67,    0,   67,    0,    0,    0,   67,    0,   67,   67,
    0,   67,   67,    0,    0,   67,    0,   67,   67,   67,
   67,   67,   67,    0,   67,   67,   67,   67,   67,   67,
   67,   84,   85,   86,   87,   88,   89,    0,   90,    0,
   91,    0,   92,    0,    0,    0,    0,    0,   93,   94,
    0,   95,    0,    0,    0,    0,    0,    0,    0,   96,
   97,    0,    0,    0,   98,   99,    0,  100,    0,    0,
    0,  101,  102,  103,    0,    0,  104,    0,  105,    0,
  106,    0,  107,    0,  108,    0,  109,    0,  110,    0,
  111,  112,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  113,    0,    0,    0,    0,    0,  114,    0,
  115,    0,  116,  117,    0,  118,  119,    0,  120,  121,
    0,  122,    0,    0,    0,    0,    0,   41,    0,  123,
    0,  124,  313,   59,   59,   59,   59,   59,   59,    0,
   59,    0,   59,    0,   59,    0,    0,    0,    0,   59,
   59,   59,    0,   59,    0,    0,    0,    0,    0,    0,
    0,   59,   59,    0,    0,    0,   59,   59,    0,   59,
    0,    0,    0,   59,   59,   59,    0,    0,   59,    0,
   59,    0,   59,    0,   59,    0,   59,    0,   59,    0,
   59,    0,   59,   59,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   59,    0,    0,    0,    0,    0,
   59,    0,   59,    0,   59,   59,    0,   59,   59,    0,
   59,   59,    0,   59,    0,    0,    0,    0,    0,   59,
   59,   59,    0,   59,   84,   85,   86,   87,   88,   89,
    0,   90,    0,   91,    0,   92,    0,  350,    0,    0,
    0,   93,   94,    0,   95,    0,    0,    0,    0,    0,
    0,    0,   96,   97,    0,    0,    0,   98,   99,    0,
  100,    0,    0,    0,  101,  102,  103,    0,    0,  104,
    0,  105,    0,  106,    0,  107,    0,  108,    0,  109,
    0,  110,    0,  111,  112,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  113,    0,    0,    0,    0,
    0,  114,    0,  115,    0,  116,  117,    0,  118,  119,
    0,  120,  121,    0,  122,    0,    0,    0,    0,    0,
   41,    0,  123,    0,  124,   84,   85,   86,   87,   88,
   89,    0,   90,    0,   91,    0,   92,    0,    0,    0,
    0,    0,   93,   94,    0,   95,    0,    0,    0,    0,
    0,    0,    0,   96,   97,    0,    0,    0,   98,   99,
    0,  100,    0,    0,    0,  101,  102,  103,    0,    0,
  104,    0,  105,    0,  106,    0,  107,    0,  108,    0,
  109,    0,  110,    0,  111,  112,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  113,    0,    0,    0,
    0,    0,  114,    0,  115,    0,  116,  117,    0,  118,
  119,    0,  120,  121,    0,  122,   85,   86,   87,   88,
   89,   41,   90,  123,   91,  124,   92,    0,    0,    0,
    0,    0,   93,   94,    0,   95,    0,    0,    0,    0,
    0,    0,    0,   96,   97,    0,    0,    0,   98,   99,
    0,  100,    0,    0,    0,  101,  102,  103,    0,    0,
  104,    0,  105,    0,  106,    0,  107,    0,  108,    0,
  109,    0,  110,    0,  111,  112,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  113,    0,    0,    0,
    0,    0,  114,    0,  115,    0,  116,  117,    0,  118,
  119,   63,  120,  121,    0,  122,    0,   63,   63,   63,
    0,   41,   63,  123,    0,  124,   63,    0,    0,    0,
   63,    0,    0,   63,    0,   63,    0,    0,    0,    0,
   63,    0,   63,    0,    0,    0,   63,   63,    0,   63,
    0,   63,    0,   63,    0,   63,    0,   63,    0,   63,
    0,   63,    0,    0,   63,   63,    0,   63,   63,   63,
   63,   63,   63,   63,    0,   63,   63,   63,   63,   63,
    0,   63,    0,   63,    0,    0,   63,    0,    0,   63,
    0,    0,   63,    0,   63,   63,   63,   63,   63,    0,
   63,    0,   63,  195,   63,   63,   63,    0,  196,    0,
  197,    0,  198,    0,  199,    0,  200,    0,  201,    0,
  202,    0,  203,    0,    0,  204,  205,    0,  206,    0,
  207,  208,  209,    0,  210,    0,  211,    0,  212,    0,
  213,    0,  214,    0,  215,    0,    0,  216,    0,    0,
  217,    0,  262,  218,  264,  265,  266,  267,  268,  269,
  270,  271,  272,  273,  274,  275,  276,  277,  278,  279,
  280,  281,  282,  283,  284,  285,  286,
  ]
  yycheck := [                         69,
   90,   33,  272,   77,  123,   80,  195,  147,  257,   99,
  100,  257,  270,  320,  349,  301,  257,  257,  301,  354,
  272,   91,   92,   93,  256,   95,  272,  279,   98,  275,
  100,  101,  102,  279,  124,  224,  282,  283,  279,  279,
  301,   97,  288,  301,  270,  291,  270,  103,  257,  105,
  106,  107,  108,  109,  110,  111,  112,  113,  114,  115,
  116,  117,  118,  119,  120,  121,  275,  257,  375,  355,
  353,  270,  262,  315,  283,  301,  266,  301,  298,  288,
  271,  286,  272,  353,  347,  275,  349,  277,  301,  279,
  351,  281,  346,  283,  257,  349,  301,  287,  288,  349,
  346,  353,  301,  352,  346,  245,   10,  353,  257,  272,
  301,  352,  275,  359,  257,  335,  279,  337,  338,  282,
  283,  240,  241,  272,   37,  288,  275,  381,  291,  257,
  279,  257,   36,  282,  283,  348,  279,  350,  351,  288,
  293,  299,  291,  257,  333,  303,   59,  305,  301,  275,
  359,  278,  242,  279,  346,  282,  282,  283,  316,  249,
  274,  353,  288,  353,  291,  291,  351,  352,  258,  359,
  260,  241,  246,  257,  315,  250,    3,    4,  248,  235,
  236,  237,  252,  253,  254,  255,  256,  347,  272,  349,
  353,  275,  347,  262,  349,  279,  359,  266,  349,  283,
  355,  349,  353,  349,  288,  346,  275,  239,  277,  357,
  359,  357,  281,  354,  347,  356,  349,  358,  287,  288,
  349,  354,  257,  257,  343,  344,  355,  353,  231,  232,
  233,  234,  347,  359,  349,  238,  272,    3,    4,  354,
  307,  275,  309,  279,  311,  257,  313,  262,  282,  283,
  340,  266,  371,  372,  288,  325,  346,  291,  349,  349,
  275,  349,  277,  257,  355,  351,  281,  355,  338,  353,
  264,  257,  287,  288,  260,  359,  270,  271,  272,   53,
   54,  275,   56,   57,  354,  279,  346,  349,  362,  283,
  353,  381,  286,  355,  288,  365,  366,  367,  353,  293,
  349,  295,  357,  272,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,  359,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  346,
  334,  335,  336,  337,  338,  339,  340,  341,  342,  257,
  344,  345,  346,  347,  348,  349,  350,  351,  257,  353,
  354,  355,  356,  357,  358,  359,  257,  257,  258,  259,
  260,  261,  353,  264,  262,  347,  357,  349,  266,  270,
  271,  272,  353,  347,  275,  349,  357,  275,  279,  277,
  353,  257,  283,  281,  357,  286,  347,  288,  349,  287,
  288,  347,  293,  349,  295,  347,  257,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,  283,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  319,  334,  335,  336,  337,  338,  339,  340,
  341,  342,  353,  344,  345,  346,  347,  348,  349,  350,
  351,  257,  353,  354,  355,  356,  357,  358,  359,  257,
  351,  258,  259,  260,  261,  347,  264,  262,  347,  346,
  349,  266,  270,  271,  272,  279,   40,  275,   42,  352,
  275,  279,  277,  355,  301,  283,  281,  341,  286,  272,
  288,  351,  287,  288,  353,  293,  347,  295,  264,  357,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,  316,  317,
  318,  356,  320,  321,  322,  323,  324,  325,  326,  327,
  328,  329,  330,  331,  332,  346,  334,  335,  336,  337,
  338,  339,  340,  272,  342,  347,  344,  345,  346,  347,
  348,  349,  350,  351,  353,  353,  354,  355,  356,  357,
  358,  359,  257,  227,  228,  229,  230,  353,  346,  264,
  262,  351,  346,  272,  266,  270,  271,  272,  347,  347,
  275,    1,  347,  275,  279,  277,  347,  357,  283,  281,
  349,  286,   55,  288,    9,  287,  288,   52,  293,   82,
  295,  226,  260,  298,  299,  300,   -1,  302,  303,  304,
  305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
  315,  316,  317,  318,  367,  320,  321,  322,  323,  324,
  325,  326,  327,  328,  329,  330,  331,  332,   -1,  334,
  335,  336,  337,  338,  339,  340,  341,  342,   -1,  344,
  345,  346,  347,  348,  349,  350,  351,   -1,  353,  354,
  355,  356,  357,  358,  359,  257,   -1,  321,   -1,   -1,
   -1,  325,  264,  327,   -1,  329,   -1,  331,  270,  271,
  272,   -1,   -1,  275,   -1,   -1,  340,  279,   -1,   -1,
  344,  283,   -1,   -1,  286,   -1,  288,   -1,   -1,   -1,
   -1,  293,   -1,  295,   -1,   -1,  298,  299,  300,   -1,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,   -1,  320,  321,
  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,
  332,   -1,  334,  335,  336,  337,  338,  339,  340,  341,
  342,   -1,  344,  345,  346,  347,  348,  349,  350,  351,
   -1,  353,  354,  355,  356,  357,  358,  359,  257,   -1,
  219,  220,  221,  222,  223,  264,  225,   -1,   -1,   -1,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,   -1,  283,   -1,   -1,  286,   -1,  288,
   -1,   -1,   -1,   -1,  293,   -1,  295,   -1,   -1,  298,
  299,  300,   -1,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
   -1,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,   -1,  334,  335,  336,  337,  338,
  339,  340,  341,  342,   -1,  344,  345,  346,  347,  348,
  349,  350,  351,  257,  353,  354,  355,  356,  357,  358,
  359,   -1,   -1,   -1,   -1,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,   -1,  283,
   -1,   -1,  286,   -1,  288,   -1,   -1,   -1,   -1,  293,
   -1,  295,   -1,   -1,  298,  299,  300,  301,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,   -1,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,   -1,
  334,  335,  336,  337,  338,  339,  340,  341,  342,   -1,
  344,  345,  346,  347,  348,  349,  350,  351,   -1,  353,
  354,  355,  356,  357,  358,  359,  257,   -1,   -1,   -1,
   -1,   -1,   -1,  264,   -1,   -1,   -1,   -1,   -1,  270,
  271,  272,   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,
   -1,   -1,  283,   -1,   -1,  286,   -1,  288,   -1,   -1,
   -1,   -1,  293,   -1,  295,   -1,   -1,  298,  299,  300,
  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,   -1,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
  331,  332,   -1,  334,  335,  336,  337,  338,  339,  340,
   -1,  342,   -1,  344,  345,  346,  347,  348,  349,  350,
  351,   -1,  353,  354,  355,  356,  357,  358,  359,  257,
   -1,   -1,   -1,   -1,   -1,   -1,  264,   -1,   -1,   -1,
   -1,   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,
   -1,  279,   -1,   -1,   -1,  283,   -1,   -1,  286,   -1,
  288,   -1,   -1,   -1,   -1,  293,   -1,  295,   -1,   -1,
  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,  316,  317,
  318,   -1,  320,  321,  322,  323,  324,  325,  326,  327,
  328,  329,  330,  331,  332,   -1,  334,  335,  336,  337,
  338,  339,  340,   -1,  342,   -1,  344,  345,  346,  347,
  348,  349,  350,  351,   -1,  353,  354,  355,  356,  357,
  358,  359,  257,   -1,   -1,   -1,   -1,   -1,   -1,  264,
   -1,   -1,   -1,   -1,   -1,  270,  271,  272,   -1,   -1,
  275,   -1,   -1,   -1,  279,   -1,   -1,   -1,  283,   -1,
   -1,  286,   -1,  288,   -1,   -1,   -1,   -1,  293,   -1,
  295,   -1,   -1,  298,  299,  300,  301,  302,  303,  304,
  305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
  315,  316,  317,  318,   -1,  320,  321,  322,  323,  324,
  325,  326,  327,  328,  329,  330,  331,  332,   -1,  334,
  335,  336,  337,  338,  339,  340,   -1,  342,   -1,  344,
  345,  346,  347,  348,  349,  350,  351,   -1,  353,  354,
  355,  356,  357,  358,  359,  257,   -1,   -1,   -1,   -1,
   -1,   -1,  264,   -1,   -1,   -1,   -1,   -1,  270,  271,
  272,   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,
   -1,  283,   -1,   -1,  286,   -1,  288,   -1,   -1,   -1,
   -1,  293,   -1,  295,   -1,   -1,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,   -1,  320,  321,
  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,
  332,   -1,  334,  335,  336,  337,  338,  339,  340,   -1,
  342,   -1,  344,  345,  346,  347,  348,  349,  350,  351,
   -1,  353,  354,  355,  356,  357,  358,  359,  257,   -1,
   -1,   -1,   -1,   -1,   -1,  264,   -1,   -1,   -1,   -1,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,   -1,  283,   -1,   -1,  286,   -1,  288,
   -1,   -1,   -1,   -1,  293,   -1,  295,   -1,   -1,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
   -1,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,   -1,  334,  335,  336,  337,  338,
  339,  340,   -1,  342,   -1,  344,  345,  346,  347,  348,
  349,  350,  351,   -1,  353,  354,  355,  356,  357,  358,
  359,  257,   -1,   -1,   -1,   -1,   -1,   -1,  264,   -1,
   -1,   -1,   -1,   -1,  270,  271,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,   -1,  283,   -1,   -1,
  286,   -1,  288,   -1,   -1,   -1,   -1,  293,   -1,  295,
   -1,   -1,  298,  299,  300,  301,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,   -1,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,   -1,  334,  335,
  336,  337,  338,  339,  340,   -1,  342,   -1,  344,  345,
  346,  347,  348,  349,  350,  351,   -1,  353,  354,  355,
  356,  357,  358,  359,  257,   -1,   -1,   -1,   -1,   -1,
   -1,  264,   -1,   -1,   -1,   -1,   -1,  270,  271,  272,
   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,   -1,
  283,   -1,   -1,  286,   -1,  288,   -1,   -1,   -1,   -1,
  293,   -1,  295,   -1,   -1,  298,  299,  300,   -1,  302,
  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
  313,  314,  315,  316,  317,  318,   -1,  320,  321,  322,
  323,  324,  325,  326,  327,  328,  329,  330,  331,  332,
   -1,  334,  335,  336,  337,  338,  339,  340,  341,  342,
   -1,  344,  345,  346,  347,  348,  349,  350,  351,   -1,
  353,  354,  355,  356,  357,  358,  359,  257,   -1,   -1,
   -1,   -1,   -1,   -1,  264,   -1,   -1,   -1,   -1,   -1,
  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,  279,
   -1,   -1,   -1,  283,   -1,   -1,  286,   -1,  288,   -1,
   -1,   -1,   -1,  293,   -1,  295,   -1,   -1,  298,  299,
  300,   -1,  302,  303,  304,  305,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,  316,  317,  318,   -1,
  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,
  330,  331,  332,   -1,  334,  335,  336,  337,  338,  339,
  340,  341,  342,   -1,  344,  345,  346,  347,  348,  349,
  350,  351,   -1,  353,  354,  355,  356,  357,  358,  359,
  257,   -1,   -1,   -1,   -1,   -1,   -1,  264,   -1,   -1,
   -1,   -1,   -1,  270,  271,  272,   -1,   -1,  275,   -1,
   -1,   -1,  279,   -1,   -1,   -1,  283,   -1,   -1,  286,
   -1,  288,   -1,   -1,   -1,   -1,  293,   -1,  295,   -1,
   -1,  298,  299,  300,   -1,  302,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,   -1,  320,  321,  322,  323,  324,  325,  326,
  327,  328,  329,  330,  331,  332,   -1,  334,  335,  336,
  337,  338,  339,  340,  341,  342,   -1,  344,  345,  346,
  347,  348,  349,  350,  351,   -1,  353,  354,  355,  356,
  357,  358,  359,  257,   -1,   -1,   -1,   -1,   -1,   -1,
  264,   -1,   -1,   -1,   -1,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,   -1,  283,
   -1,   -1,  286,   -1,  288,   -1,   -1,   -1,   -1,  293,
   -1,  295,   -1,   -1,  298,  299,  300,   -1,  302,  303,
  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
  314,  315,  316,  317,  318,   -1,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,   -1,
  334,  335,  336,  337,  338,  339,  340,  341,  342,   -1,
  344,  345,  346,  347,  348,  349,  350,  351,   -1,  353,
  354,  355,  356,  357,  358,  359,  257,   -1,   -1,   -1,
   -1,   -1,   -1,  264,   -1,   -1,   -1,   -1,   -1,  270,
  271,  272,   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,
   -1,   -1,  283,   -1,   -1,  286,   -1,  288,   -1,   -1,
   -1,   -1,  293,   -1,  295,   -1,   -1,  298,  299,  300,
   -1,  302,  303,  304,  305,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  315,  316,  317,  318,   -1,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
  331,  332,   -1,  334,  335,  336,  337,  338,  339,  340,
  341,  342,   -1,  344,  345,  346,  347,  348,  349,  350,
  351,   -1,  353,  354,  355,  356,  357,  358,  359,  257,
   -1,   -1,   -1,   -1,   -1,   -1,  264,   -1,   -1,   -1,
   -1,   -1,   -1,  271,  272,   -1,   -1,  275,   -1,   -1,
   -1,  279,   -1,   -1,   -1,  283,   -1,   -1,  286,   -1,
  288,   -1,   -1,   -1,   -1,  293,   -1,  295,   -1,   -1,
  298,  299,  300,   -1,  302,  303,  304,  305,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,  316,  317,
  318,   -1,  320,  321,  322,  323,  324,  325,  326,  327,
  328,  329,  330,  331,  332,   -1,  334,  335,  336,  337,
  338,  339,  340,  341,  342,   -1,  344,  345,  346,  347,
  348,  349,  350,  351,   -1,  353,  354,  355,  356,  357,
  358,  359,  257,   -1,   -1,   -1,   -1,   -1,   -1,  264,
   -1,   -1,   -1,   -1,   -1,   -1,  271,  272,   -1,   -1,
  275,   -1,   -1,   -1,  279,   -1,   -1,   -1,  283,   -1,
   -1,  286,   -1,  288,   -1,   -1,   -1,   -1,  293,   -1,
  295,   -1,   -1,  298,  299,  300,   -1,  302,  303,  304,
  305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
  315,  316,  317,  318,   -1,  320,  321,  322,  323,  324,
  325,  326,  327,  328,  329,  330,  331,  332,   -1,  334,
  335,  336,  337,  338,  339,  340,  341,  342,   -1,  344,
  345,  346,  347,  348,  349,  350,  351,   -1,  353,  354,
  355,  356,  357,  358,  359,  257,   -1,   -1,   -1,   -1,
   -1,   -1,  264,   -1,   -1,   -1,   -1,   -1,   -1,  271,
  272,   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,
   -1,  283,   -1,   -1,  286,   -1,  288,   -1,   -1,   -1,
   -1,  293,   -1,  295,   -1,   -1,  298,  299,  300,   -1,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,   -1,  320,  321,
  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,
  332,   -1,  334,  335,  336,  337,  338,  339,  340,  341,
  342,   -1,  344,  345,  346,  347,  348,  349,  350,  351,
   -1,  353,  354,  355,  356,  357,  358,  359,  257,   -1,
   -1,   -1,   -1,   -1,   -1,  264,   -1,   -1,   -1,   -1,
   -1,   -1,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,   -1,  283,   -1,   -1,  286,   -1,  288,
   -1,   -1,   -1,   -1,  293,   -1,  295,   -1,   -1,  298,
  299,  300,   -1,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,
   -1,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,   -1,  334,  335,  336,  337,  338,
  339,  340,  341,  342,   -1,  344,  345,  346,  347,  348,
  349,  350,  351,   -1,  353,  354,  355,  356,  357,  358,
  359,  257,   -1,   -1,   -1,   -1,   -1,   -1,  264,   -1,
   -1,   -1,   -1,   -1,  270,   -1,  272,   -1,   -1,  275,
   -1,   -1,   -1,  279,   -1,   -1,   -1,  283,   -1,   -1,
  286,   -1,  288,   -1,   -1,   -1,   -1,  293,   -1,  295,
   -1,   -1,  298,  299,  300,   -1,  302,  303,  304,  305,
  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,
  316,  317,  318,   -1,  320,  321,  322,  323,  324,  325,
  326,  327,  328,  329,  330,  331,  332,   -1,  334,  335,
  336,  337,  338,  339,  340,  341,  342,   -1,  344,  345,
  346,  347,  348,  349,  350,  351,   -1,  353,  354,  355,
  356,  357,  358,  359,  257,   -1,   -1,   -1,   -1,   -1,
   -1,  264,   -1,   -1,   -1,   -1,   -1,  270,  271,  272,
   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,   -1,
  283,   -1,   -1,  286,   -1,  288,   -1,   -1,   -1,   -1,
  293,   -1,  295,   -1,   -1,  298,  299,  300,  301,  302,
  303,  304,  305,  306,   -1,  308,   -1,  310,   -1,  312,
   -1,  314,  315,  316,  317,  318,   -1,  320,  321,  322,
  323,  324,  325,  326,  327,  328,  329,  330,  331,  332,
   -1,  334,  335,  336,  337,  338,  339,  340,  341,  342,
   -1,  344,  345,  346,  347,  348,  349,  350,  351,   -1,
  353,  354,  355,  356,  357,  358,  359,  257,   -1,   -1,
   -1,   -1,   -1,   -1,  264,   -1,   -1,   -1,   -1,   -1,
  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,  279,
   -1,   -1,   -1,  283,   -1,   -1,  286,   -1,  288,   -1,
   -1,   -1,   -1,  293,   -1,  295,   -1,   -1,  298,   -1,
  300,  301,  302,   -1,  304,   -1,  306,  307,  308,  309,
  310,  311,  312,  313,  314,  315,   -1,  317,  318,   -1,
  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,
  330,  331,  332,   -1,  334,  335,  336,  337,  338,  339,
  340,  341,  342,   -1,  344,  345,  346,  347,  348,  349,
  350,  351,   -1,  353,  354,  355,  356,  357,  358,  359,
  257,   -1,   -1,   -1,   -1,   -1,   -1,  264,   -1,   -1,
   -1,   -1,   -1,  270,  271,  272,   -1,   -1,  275,   -1,
   -1,   -1,  279,   -1,   -1,   -1,  283,   -1,   -1,  286,
   -1,  288,   -1,   -1,   -1,   -1,  293,   -1,  295,   -1,
   -1,   -1,  299,  300,  301,  302,  303,  304,  305,  306,
  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,
  317,  318,   -1,  320,  321,  322,  323,  324,  325,  326,
  327,  328,  329,  330,  331,  332,   -1,  334,   -1,  336,
   -1,   -1,  339,  340,  341,  342,   -1,  344,  345,  346,
  347,  348,  349,  350,  351,   -1,  353,  354,  355,  356,
  357,  358,  359,  257,   -1,   -1,   -1,   -1,   -1,   -1,
  264,   -1,   -1,   -1,   -1,   -1,  270,  271,  272,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,   -1,  283,
   -1,   -1,  286,   -1,  288,   -1,   -1,   -1,   -1,  293,
   -1,  295,   -1,   -1,  298,  299,  300,  301,  302,  303,
  304,  305,  306,   -1,  308,   -1,  310,   -1,  312,   -1,
  314,  315,  316,  317,  318,   -1,  320,  321,  322,  323,
  324,  325,  326,  327,  328,  329,  330,  331,  332,   -1,
  334,  335,  336,  337,  338,  339,  340,  341,  342,   -1,
  344,  345,  346,  347,  348,  349,  350,  351,   -1,  353,
  354,  355,  356,  357,  358,  359,  257,   -1,   -1,   -1,
   -1,   -1,   -1,  264,   -1,   -1,   -1,   -1,   -1,  270,
  271,  272,   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,
   -1,   -1,  283,   -1,   -1,  286,   -1,  288,   -1,   -1,
   -1,   -1,  293,   -1,  295,   -1,   -1,  298,   -1,  300,
  301,  302,   -1,  304,   -1,  306,  307,  308,  309,  310,
  311,  312,  313,  314,  315,   -1,  317,  318,   -1,  320,
  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,
  331,  332,   -1,  334,  335,  336,  337,  338,  339,  340,
  341,  342,   -1,  344,  345,  346,  347,  348,  349,  350,
  351,   -1,  353,  354,  355,  356,  357,  358,  359,  257,
   -1,   -1,   -1,   -1,   -1,   -1,  264,   -1,   -1,   -1,
   -1,   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,
   -1,  279,   -1,   -1,   -1,  283,   -1,   -1,  286,   -1,
  288,   -1,   -1,   -1,   -1,  293,   -1,  295,   -1,   -1,
  298,   -1,  300,  301,  302,   -1,  304,   -1,  306,  307,
  308,  309,  310,  311,  312,  313,  314,  315,   -1,  317,
  318,   -1,  320,  321,  322,  323,  324,  325,  326,  327,
  328,  329,  330,  331,  332,   -1,  334,  335,  336,  337,
  338,  339,  340,  341,  342,   -1,  344,  345,  346,  347,
  348,  349,  350,  351,   -1,  353,  354,  355,  356,  357,
  358,  359,  257,   -1,   -1,   -1,   -1,   -1,   -1,  264,
   -1,   -1,   -1,   -1,   -1,  270,  271,  272,   -1,   -1,
  275,   -1,   -1,   -1,  279,   -1,   -1,   -1,  283,   -1,
   -1,  286,   -1,  288,   -1,   -1,   -1,   -1,  293,   -1,
  295,   -1,   -1,  298,   -1,  300,  301,  302,   -1,  304,
   -1,  306,  307,  308,  309,  310,  311,  312,  313,  314,
  315,   -1,  317,  318,   -1,  320,  321,  322,  323,  324,
  325,  326,  327,  328,  329,  330,  331,  332,   -1,  334,
  335,  336,  337,  338,  339,  340,  341,  342,   -1,  344,
  345,  346,  347,  348,  349,  350,  351,   -1,  353,  354,
  355,  356,  357,  358,  359,  257,   -1,   -1,   -1,   -1,
   -1,   -1,  264,   -1,   -1,   -1,   -1,   -1,  270,  271,
  272,   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,
   -1,  283,   -1,   -1,  286,   -1,  288,   -1,   -1,   -1,
   -1,  293,   -1,  295,   -1,   -1,  298,   -1,  300,  301,
  302,   -1,  304,   -1,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,   -1,  317,  318,   -1,  320,  321,
  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,
  332,   -1,  334,  335,  336,  337,  338,  339,  340,  341,
  342,   -1,  344,  345,  346,  347,  348,  349,  350,  351,
   -1,  353,  354,  355,  356,  357,  358,  359,  257,   -1,
   -1,   -1,   -1,   -1,   -1,  264,   -1,   -1,   -1,   -1,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,   -1,  283,   -1,   -1,  286,   -1,  288,
   -1,   -1,   -1,   -1,  293,   -1,  295,   -1,   -1,  298,
  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
  309,  310,  311,  312,  313,  314,   -1,  316,  317,  318,
   -1,  320,  321,  322,  323,  324,  325,  326,  327,  328,
  329,  330,  331,  332,   -1,  334,  335,  336,  337,  338,
  339,  340,  341,  342,   -1,  344,  345,   -1,  347,  348,
  349,  350,  351,   -1,  353,  257,  355,   -1,  357,   -1,
  359,   -1,  264,   -1,   -1,   -1,   -1,   -1,  270,  271,
  272,   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,
   -1,  283,   -1,   -1,  286,   -1,  288,   -1,   -1,   -1,
   -1,  293,   -1,  295,   -1,   -1,  298,  299,  300,  301,
  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
  312,  313,  314,  315,  316,  317,  318,   -1,  320,   -1,
  322,  323,  324,   -1,  326,   -1,  328,   -1,  330,   -1,
  332,   -1,  334,  335,  336,  337,  338,  339,   -1,  341,
  342,   -1,   -1,  345,  346,  347,  348,  349,  350,  351,
   -1,  353,  354,  355,  356,  357,  358,  359,  257,   -1,
   -1,   -1,   -1,   -1,   -1,  264,   -1,   -1,   -1,   -1,
   -1,  270,  271,  272,   -1,   -1,  275,   -1,   -1,   -1,
  279,   -1,   -1,   -1,  283,   -1,   -1,  286,   -1,  288,
   -1,   -1,   -1,   -1,  293,   -1,   -1,   -1,   -1,  298,
  299,   -1,  301,   -1,  303,   -1,  305,   -1,  307,   -1,
  309,   -1,  311,   -1,  313,   -1,  315,  316,   -1,   -1,
   -1,   -1,  321,   -1,   -1,   -1,  325,   -1,  327,   -1,
  329,   -1,  331,   -1,   -1,   -1,  335,   -1,  337,  338,
   -1,  340,  341,   -1,   -1,  344,   -1,  346,  347,  348,
  349,  350,  351,   -1,  353,  354,  355,  356,  357,  358,
  359,  256,  257,  258,  259,  260,  261,   -1,  263,   -1,
  265,   -1,  267,   -1,   -1,   -1,   -1,   -1,  273,  274,
   -1,  276,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  284,
  285,   -1,   -1,   -1,  289,  290,   -1,  292,   -1,   -1,
   -1,  296,  297,  298,   -1,   -1,  301,   -1,  303,   -1,
  305,   -1,  307,   -1,  309,   -1,  311,   -1,  313,   -1,
  315,  316,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  327,   -1,   -1,   -1,   -1,   -1,  333,   -1,
  335,   -1,  337,  338,   -1,  340,  341,   -1,  343,  344,
   -1,  346,   -1,   -1,   -1,   -1,   -1,  352,   -1,  354,
   -1,  356,  357,  256,  257,  258,  259,  260,  261,   -1,
  263,   -1,  265,   -1,  267,   -1,   -1,   -1,   -1,  272,
  273,  274,   -1,  276,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  284,  285,   -1,   -1,   -1,  289,  290,   -1,  292,
   -1,   -1,   -1,  296,  297,  298,   -1,   -1,  301,   -1,
  303,   -1,  305,   -1,  307,   -1,  309,   -1,  311,   -1,
  313,   -1,  315,  316,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  327,   -1,   -1,   -1,   -1,   -1,
  333,   -1,  335,   -1,  337,  338,   -1,  340,  341,   -1,
  343,  344,   -1,  346,   -1,   -1,   -1,   -1,   -1,  352,
  353,  354,   -1,  356,  256,  257,  258,  259,  260,  261,
   -1,  263,   -1,  265,   -1,  267,   -1,  269,   -1,   -1,
   -1,  273,  274,   -1,  276,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  284,  285,   -1,   -1,   -1,  289,  290,   -1,
  292,   -1,   -1,   -1,  296,  297,  298,   -1,   -1,  301,
   -1,  303,   -1,  305,   -1,  307,   -1,  309,   -1,  311,
   -1,  313,   -1,  315,  316,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  327,   -1,   -1,   -1,   -1,
   -1,  333,   -1,  335,   -1,  337,  338,   -1,  340,  341,
   -1,  343,  344,   -1,  346,   -1,   -1,   -1,   -1,   -1,
  352,   -1,  354,   -1,  356,  256,  257,  258,  259,  260,
  261,   -1,  263,   -1,  265,   -1,  267,   -1,   -1,   -1,
   -1,   -1,  273,  274,   -1,  276,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  284,  285,   -1,   -1,   -1,  289,  290,
   -1,  292,   -1,   -1,   -1,  296,  297,  298,   -1,   -1,
  301,   -1,  303,   -1,  305,   -1,  307,   -1,  309,   -1,
  311,   -1,  313,   -1,  315,  316,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  327,   -1,   -1,   -1,
   -1,   -1,  333,   -1,  335,   -1,  337,  338,   -1,  340,
  341,   -1,  343,  344,   -1,  346,  257,  258,  259,  260,
  261,  352,  263,  354,  265,  356,  267,   -1,   -1,   -1,
   -1,   -1,  273,  274,   -1,  276,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  284,  285,   -1,   -1,   -1,  289,  290,
   -1,  292,   -1,   -1,   -1,  296,  297,  298,   -1,   -1,
  301,   -1,  303,   -1,  305,   -1,  307,   -1,  309,   -1,
  311,   -1,  313,   -1,  315,  316,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  327,   -1,   -1,   -1,
   -1,   -1,  333,   -1,  335,   -1,  337,  338,   -1,  340,
  341,  264,  343,  344,   -1,  346,   -1,  270,  271,  272,
   -1,  352,  275,  354,   -1,  356,  279,   -1,   -1,   -1,
  283,   -1,   -1,  286,   -1,  288,   -1,   -1,   -1,   -1,
  293,   -1,  295,   -1,   -1,   -1,  299,  300,   -1,  302,
   -1,  304,   -1,  306,   -1,  308,   -1,  310,   -1,  312,
   -1,  314,   -1,   -1,  317,  318,   -1,  320,  321,  322,
  323,  324,  325,  326,   -1,  328,  329,  330,  331,  332,
   -1,  334,   -1,  336,   -1,   -1,  339,   -1,   -1,  342,
   -1,   -1,  345,   -1,  347,  348,  349,  350,  351,   -1,
  353,   -1,  355,  295,  357,  358,  359,   -1,  300,   -1,
  302,   -1,  304,   -1,  306,   -1,  308,   -1,  310,   -1,
  312,   -1,  314,   -1,   -1,  317,  318,   -1,  320,   -1,
  322,  323,  324,   -1,  326,   -1,  328,   -1,  330,   -1,
  332,   -1,  334,   -1,  336,   -1,   -1,  339,   -1,   -1,
  342,   -1,  194,  345,  196,  197,  198,  199,  200,  201,
  202,  203,  204,  205,  206,  207,  208,  209,  210,  211,
  212,  213,  214,  215,  216,  217,  218,
  ]
$define YYFINAL 2
$define YYMAXTOKEN 366
  yyname := [
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"IDENT","INTLIT","REALLIT",
"STRINGLIT","CSETLIT","EOFX","BREAK","BY","CASE","CLASS","CREATE","CRITICAL",
"DEFAULT","DO","ELSE","END","EVERY","FAIL","GLOBAL","IF","IMPORT","iconINITIAL",
"INITIALLY","SUPER","LINK","LOCAL","METHOD","NEXT","NOT","OF","PACKAGE",
"RECORD","REPEAT","RETURN","STATIC","SUSPEND","THEN","THREAD","TO","UNTIL",
"WHILE","BANG","MOD","AUGMOD","AND","AUGAND","STAR","AUGSTAR","INTER",
"AUGINTER","PLUS","AUGPLUS","UNION","AUGUNION","MINUS","AUGMINUS","DIFF",
"AUGDIFF","DOT","SLASH","AUGSLASH","ASSIGN","INVASSIGN","SWAP","NMLT","AUGNMLT",
"REVASSIGN","REVSWAP","NMLE","AUGNMLE","EQ","AUGEQ","NMGT","AUGNMGT","NMGE",
"AUGNMGE","QMARK","AUGQMARK","AT","AUGAT","BACKSLASH","CARET","AUGCARET","BAR",
"CONCAT","AUGCONCAT","TILDE","NMNE","AUGNMNE","LPAREN","RPAREN","PCOLON",
"COMMA","MCOLON","COLON","COLONCOLON","SEMICOL","LBRACK","RBRACK","LBRACE",
"RBRACE","DOLLAR","ABSTRACT","PCONDASSN","PIMDASSN","PSETCUR","SND","SNDBK",
"RCV","RCVBK",
  ]
  yyrule := [
"$accept : program",
"program : decls EOFX",
"decls :",
"decls : decls decl",
"decl : record",
"decl : global",
"decl : link",
"decl : package",
"decl : import",
"decl : classdef",
"initiallysection :",
"initiallysection : INITIALLY SEMICOL locals initial methbody",
"initiallysection : INITIALLY LPAREN arglist RPAREN SEMICOL locals initial methbody",
"optsemi :",
"optsemi : SEMICOL",
"classdef : classhead optsemi locals methods optsemi initiallysection END",
"classdef : classhead optsemi END",
"classhead : CLASS IDENT supers",
"classhead : CLASS IDENT supers LPAREN arglist RPAREN",
"supers :",
"supers : COLON IDENT supers",
"supers : COLON packageref supers",
"packageref : IDENT COLONCOLON IDENT",
"packageref : COLONCOLON IDENT",
"methods :",
"methods : meth methods",
"methods : global methods",
"methods : record methods",
"methods : invocDef methods",
"package : PACKAGE lnkfile",
"import : IMPORT lnklist",
"link : LINK lnklist",
"lnklist : lnkfile",
"lnklist : lnklist COMMA lnkfile",
"lnkfile : IDENT",
"lnkfile : STRINGLIT",
"global : GLOBAL idlist",
"record : RECORD IDENT LPAREN fldlist RPAREN",
"invocDef : IDENT INVASSIGN expr",
"fldlist :",
"fldlist : idlist",
"meth : ABSTRACT methhead",
"meth : methhead SEMICOL locals initial methbody END",
"methhead : METHOD IDENT LPAREN arglist RPAREN",
"arglist :",
"arglist : parmlist",
"arglist : parmlist LBRACK RBRACK",
"idlist : IDENT",
"idlist : idlist COMMA IDENT",
"parmlist : arg",
"parmlist : parmlist COMMA arg",
"arg : IDENT",
"arg : IDENT COLON IDENT",
"arg : IDENT COLON literal",
"arg : IDENT COLON IDENT COLON literal",
"locals :",
"locals : locals retention idlist SEMICOL",
"retention : LOCAL",
"retention : STATIC",
"initial :",
"initial : iconINITIAL expr SEMICOL",
"methbody :",
"methbody : nexpr SEMICOL methbody",
"nexpr :",
"nexpr : expr",
"expr : expr1",
"expr : expr AND expr1",
"expr1 : expr2",
"expr1 : expr2 SWAP expr1",
"expr1 : expr2 ASSIGN expr1",
"expr1 : expr2 REVSWAP expr1",
"expr1 : expr2 REVASSIGN expr1",
"expr1 : expr2 AUGCONCAT expr1",
"expr1 : expr2 AUGDIFF expr1",
"expr1 : expr2 AUGUNION expr1",
"expr1 : expr2 AUGPLUS expr1",
"expr1 : expr2 AUGMINUS expr1",
"expr1 : expr2 AUGSTAR expr1",
"expr1 : expr2 AUGINTER expr1",
"expr1 : expr2 AUGSLASH expr1",
"expr1 : expr2 AUGMOD expr1",
"expr1 : expr2 AUGCARET expr1",
"expr1 : expr2 AUGEQ expr1",
"expr1 : expr2 AUGNMGE expr1",
"expr1 : expr2 AUGNMGT expr1",
"expr1 : expr2 AUGNMLE expr1",
"expr1 : expr2 AUGNMLT expr1",
"expr1 : expr2 AUGNMNE expr1",
"expr1 : expr2 AUGQMARK expr1",
"expr1 : expr2 AUGAND expr1",
"expr1 : expr2 AUGAT expr1",
"expr2 : expr3",
"expr2 : expr2 TO expr3",
"expr2 : expr2 TO expr3 BY expr3",
"expr3 : expr4",
"expr3 : expr4 BAR expr3",
"expr4 : expr5",
"expr4 : expr4 EQ expr5",
"expr4 : expr4 NMGE expr5",
"expr4 : expr4 NMGT expr5",
"expr4 : expr4 NMLE expr5",
"expr4 : expr4 NMLT expr5",
"expr4 : expr4 NMNE expr5",
"expr5 : expr6",
"expr5 : expr5 CONCAT expr6",
"expr6 : expr7",
"expr6 : expr6 PLUS expr7",
"expr6 : expr6 DIFF expr7",
"expr6 : expr6 UNION expr7",
"expr6 : expr6 MINUS expr7",
"expr7 : expr8",
"expr7 : expr7 STAR expr8",
"expr7 : expr7 INTER expr8",
"expr7 : expr7 SLASH expr8",
"expr7 : expr7 MOD expr8",
"expr8 : expr9",
"expr8 : expr9 CARET expr8",
"expr9 : expr10",
"expr9 : expr9 BACKSLASH expr10",
"expr9 : expr9 AT expr10",
"expr9 : expr9 BANG expr10",
"expr10 : expr11",
"expr10 : AT expr10",
"expr10 : NOT expr10",
"expr10 : BAR expr10",
"expr10 : CONCAT expr10",
"expr10 : DOT expr10",
"expr10 : BANG expr10",
"expr10 : DIFF expr10",
"expr10 : PLUS expr10",
"expr10 : STAR expr10",
"expr10 : SLASH expr10",
"expr10 : CARET expr10",
"expr10 : INTER expr10",
"expr10 : TILDE expr10",
"expr10 : MINUS expr10",
"expr10 : EQ expr10",
"expr10 : NMNE expr10",
"expr10 : UNION expr10",
"expr10 : QMARK expr10",
"expr10 : BACKSLASH expr10",
"expr11 : literal",
"expr11 : section",
"expr11 : return",
"expr11 : if",
"expr11 : case",
"expr11 : while",
"expr11 : until",
"expr11 : every",
"expr11 : repeat",
"expr11 : CREATE expr",
"expr11 : IDENT",
"expr11 : NEXT",
"expr11 : BREAK nexpr",
"expr11 : LPAREN exprlist RPAREN",
"expr11 : LBRACE compound RBRACE",
"expr11 : LBRACK exprlist RBRACK",
"expr11 : expr11 LBRACK exprlist RBRACK",
"expr11 : expr11 LBRACE RBRACE",
"expr11 : expr11 LBRACE pdcolist RBRACE",
"expr11 : expr11 LPAREN exprlist RPAREN",
"expr11 : expr11 DOLLAR INITIALLY LPAREN exprlist RPAREN",
"expr11 : expr11 DOLLAR IDENT LPAREN exprlist RPAREN",
"expr11 : expr11 DOLLAR IDENT DOT INITIALLY LPAREN exprlist RPAREN",
"expr11 : expr11 DOLLAR IDENT DOT IDENT LPAREN exprlist RPAREN",
"expr11 : expr11 DOT IDENT",
"expr11 : expr11 DOT packageref",
"expr11 : packageref",
"expr11 : expr11 DOT INITIALLY",
"expr11 : AND FAIL",
"expr11 : AND IDENT",
"while : WHILE expr",
"while : WHILE expr DO expr",
"until : UNTIL expr",
"until : UNTIL expr DO expr",
"every : EVERY expr",
"every : EVERY expr DO expr",
"repeat : REPEAT expr",
"return : FAIL",
"return : RETURN nexpr",
"return : SUSPEND nexpr",
"return : SUSPEND expr DO expr",
"if : IF expr THEN expr",
"if : IF expr THEN expr ELSE expr",
"case : CASE expr OF LBRACE caselist RBRACE",
"caselist : cclause",
"caselist : caselist SEMICOL cclause",
"cclause : DEFAULT COLON expr",
"cclause : expr COLON expr",
"exprlist : nexpr",
"exprlist : exprlist COMMA nexpr",
"pdcolist : nexpr",
"pdcolist : pdcolist COMMA nexpr",
"literal : INTLIT",
"literal : REALLIT",
"literal : STRINGLIT",
"literal : CSETLIT",
"section : expr11 LBRACK expr sectop expr RBRACK",
"sectop : COLON",
"sectop : PCOLON",
"sectop : MCOLON",
"compound : nexpr",
"compound : nexpr SEMICOL compound",
"program : error decls EOFX",
"expr : error",
  ]

end

#####################################################################
#####################################################################
invocable all    # need to look up semantic actions by name

global yytext    # user variable to return contextual strings
global yyval     # used to return semantic vals from action routines
global yylval    # the 'lval' (result) I got from yylex()
global yydebug   # (boolean) do I want debug output?
global yynerrs   # (integer) number of errors so far
global yyerrflag # (integer) was there an error?
global yychar    # (integer) the current working character
global action    # maps an integer to a semantic action procedure

global yylhs
global yylen
global yydefred
global yydgoto
global yysindex
global yyrindex
global yygindex
global yytable
global yycheck
global yyname
global yyrule

global statestk         # state stack
global valstk           # value stack
################################################################
# procedure: init_stacks : allocate and prepare stacks
################################################################
procedure init_stacks()
  local i
  statestk := []
  valstk := []
  yyval  := 0 
  yylval := 0 
  action := list(1000, action_null)  # remove hard coded 1000 later
  every i := 1 to 1000 do action[i] := proc("action_" || i)
end

#line 1153 "scoelgram.y"

global tokens

#
# This procedure parenthesizes the right-hand side of an expression,
# apparently to simplify or correct any precedence or semantic issues
# when passing the code on to iconc.
#
procedure parenthesize_assign(nd)
	local rhs

	if /iconc then return nd
	if not (*nd.children = 3) then return nd
	rhs := nd.children[3]
	if (not(type(rhs) == "treenode")) then return nd
	if (not(rhs.label == "invoke")) then return nd
	rhs := node("Paren", "(", rhs, ")")
	nd.children[3] := rhs
	return nd
end

procedure FieldRef(lhs, dot, rhs)
	if /iconc | (type(lhs) ~== "treenode") then return Field(lhs, dot, rhs)

	if (lhs.label == "invoke") then {
		tmpcount +:= 1;
		return node("Paren", "(",
				node("assign", "__" || tmpcount, " := ", lhs, ")", "& "),
				node("invoke", Field("__" || tmpcount, ".", rhs))
			);
	}
	return Field(lhs, dot, rhs)
end

procedure InvocationNode(args[])
	tmpcount +:= 1
	if type(args[1]) == "token" & (args[1].tok = IDENT) then {
		n1 := args[1]
		lparen := copy(args[1])
		lparen.tok := LPAREN
		lparen.s := "("
	} else {
		n1 := node("Paren","(",node("assign","__"||tmpcount,":=",args[1]),")")
		if lparen := Clone1stToken(args[1]) then {
			lparen.tok := LPAREN
			lparen.s := "("
		} else lparen := "("
	}
	if *args = 6 then {
		return node("Paren",lparen,node("invoke",
				# iconc uses no __m business
				(if /iconc then Field(Field(n1, ".", "__m"), "." , args[3]) 
						else Field(n1, ".", args[3])),

				args[4], node("exprlist",
				if n1 === args[1] then args[1] else "__"||tmpcount,
				if args[5] === EmptyNode then EmptyNode else ",",args[5]),args[6])
				,")")
	} else {
		if /iconc then
			return  node("Paren",lparen,node("invoke",Field(Field(
					Field(n1,".", "__m"),
					"." , args[3]),".",args[5]),
					args[6], node("exprlist",
					if n1 === args[1] then args[1] else "__"||tmpcount,
					if args[7] === EmptyNode then EmptyNode else ",",args[7]),args[8])
					,")")
		else return SuperMethodInvok ! args
	}
end

procedure SimpleInvocation(expr11, lparen, args, rparen)
	if /iconc then return node("invoke", expr11, lparen, args, rparen)
	
	if ((type(expr11) == "token") & (expr11.tok = IDENT)) then {
		return node("invoke", expr11, lparen, args, rparen)
	}

	if (type(expr11) == "treenode") then {
		case expr11.label of {
			"field": {
				#
				# need to examine lhs of field-ref to determine
				# whether we need to decompose the expr11 further...
				#
				if (type(expr11.children[1]) == "treenode") then {
					tmpcount +:= 1;
					n1 := node("Paren", "(", node("assign", "__"||tmpcount, ":=",
							expr11.children[1]), ")")
					return node("exprlist", "(", n1, "&",
							node("invoke", Field("__"||tmpcount, ".", expr11.children[3]),
							lparen, args, rparen), ")")
				} else {
					return node("invoke", expr11, lparen, args, rparen)
				}
			}
			default: {
				return node("invoke", expr11, lparen, args, rparen)
			}
		}
	}
   return node("invoke", expr11, lparen, args, rparen)
end

procedure SuperMethodInvok(args[])
	tmpcount +:= 1
	if (type(args[1]) == "token") & (args[1].tok = IDENT) then {
		n1 := args[1]
		lparen := copy(args[1])
		lparen.tok := LPAREN
		lparen.s := "("
	} else {
		n1 := node("Paren","(",node("assign","__"||tmpcount,":=",args[1]),")")
		if lparen := Clone1stToken(args[1]) then {
			lparen.tok := LPAREN
			lparen.s := "("
		} else lparen := "("
	}

	args[3].s := mangle_class_sym(args[3].s)
	args[3].s ||:= "__oprec"
	return node("exprlist", "(", n1, ")", " & ",
			node("Paren", lparen, node("invoke",
			Field(args[3], ".", args[5]),
			args[6], node("exprlist",
			if n1 === args[1] then args[1] else "__" || tmpcount,
			if args[7] === EmptyNode then EmptyNode else ",", args[7]), args[8]),
			")", ))
end

procedure isloco(node, s)
	case type(node) of {
		"treenode": {
			if *node.children > 0 then return isloco(!node.children, s)
		}
		"token" : {
			if (node.tok = IDENT) & (node.s == s) then return
		}
	}
end

procedure buildtab_from_cclause(n, args)
	if type(n) ~== "treenode" then stop("bad table literal")
	comma := copy(n.children[2])
	comma.tok := COMMA
	comma.s := ","
	case n.label of {
		"cclause0": {
			if *args.children > 0 then push(args.children, comma)
			push(args.children, n.children[3])
		}
		"cclause1": {
			if *args.children > 0 then push(args.children, comma)
			push(args.children, n.children[3])
			push(args.children, comma)
			push(args.children, n.children[1])
		}
	}
end

# build a tree equivalent to
# {__tmp :=[]; every put(__tmp, expr); if __tmp>0 then __tmp}
# The enclosing procedure/method also needs to declare this temp var;
# see AppendListCompTemps
#
procedure ListComp(expr)
	local tmp
	tmpcount +:= 1
	tmp := "__" || tmpcount
	return node("ListComp",
			"{", string(tmp), " :=[]; every put(" || tmp || ", ",
			expr,
			"); if *" || tmp || ">0 then " || tmp || "}")
end

#
# AppendListCompTemps(localdecls, methbody) - at the procedure/method
# outermost level, we may need to add some declarations based on whats
# in the methbody. If there are changes to the declared lcls section,
# returns changed locals.
#
procedure AppendListCompTemps(lcls, body)
	# if there is, in the methbody, a list of varnames to declare
	if *\(ltmps := ListCompTemps(body)) > 0 then {
		# make a varlist containing ltmps
		if *ltmps > 1 then {
			vl := token(IDENT, ltmps[1], 0, 0, "lambda.icn")
			every i := 2 to *ltmps do vl := node("varlist3", vl, ",",
					token(IDENT, ltmps[i], 0, 0, "lambda.icn"))
		} else {
			# the varlist will just be an IDENT
			vl := token(IDENT, ltmps[1], 0, 0, "lambda.icn")
		}
		if (lcls === EmptyNode) |
				(type(lcls)==="treenode" & lcls.label==("locals2"|"locals3")) then {
			return node("locals2", lcls, "local", vl, ";")
		} else
			write(&errout, "don't know what to do with ", image(lcls))
	}
end

#
# ListCompTemps(n) - lower level temp. var extraction from proc body.
# returns list of strings containing temp. variables from list comprehension
# L
procedure ListCompTemps(n)
	local LCT
	if type(n) == "treenode" then {
		if n.label=="ListComp" then {
			LCT := [n.children[2]]
			LCT |||:= ListCompTemps(n.children[4])
			return LCT
		} else if LCT := ListCompTemps(n.children[k := 1 to *(n.children)]) then {
			every kk := k+1 to *(n.children) do {
				LCT |||:= ListCompTemps(n.children[kk])
			}
			return LCT
		}
	}
end

procedure tablelit(lb, cl, rb)
local tabid, lp, rp, args
	args := node("elst1")
	write("I am a tablelit, cl is ", image(cl.label))
	while type(cl)=="treenode" & cl.label == "Caselist" do {
		buildtab_from_cclause(cl.children[3], args)
		cl := cl.children[1]
	}
	buildtab_from_cclause(cl, args)
	tabid := copy(lb); tabid.tok := IDENT; tabid.s := "table"
	lp := copy(lb); lp.tok := LPAREN; lp.s := "("
	rp := copy(rb); rp.tok := RPAREN; rp.s := ")"
	return node("invoke", tabid, lp, args, rp)
end
#line 1842 "scoelgram.icn"
$define YYACCEPT return 0
$define YYABORT return 1
################################################################
# procedure: yyparse : parse input and execute indicated items
################################################################
procedure yyparse()
	local yyn        # next next thing to do
	local yym        #
	local yystate    # current parsing state from state table
	local yys        # current token string
	local doaction   # set to 1 if there need to execute action
	local token      # current token

	if /yytable then init() 
	init_stacks() 
	yynerrs   := 0 
	yyerrflag := 0 
	yychar    := -1           # impossible char forces a read
	yystate   := 0            # initial state
	push(statestk, yystate)   # save it

	repeat { # until parsing is done, either correctly, or w/error
		doaction := 1 

		##### NEXT ACTION (from reduction table)
		yyn := yydefred[yystate+1]

		while yyn = 0 do {

			if yychar < 0 then {   # we want a char?
				yychar := yylex()    # get next token
				##### ERROR CHECK ####
				if yychar < 0 then { # it it didn't work/error
					yychar := 0        # change it to default string (no -1!)
					if \yydebug = 1 then yylexdebug(yystate, yychar) 
				}
			} # yychar < 0
	  
			yyn := yysindex[yystate+1]  # get amount to shift by (shift index)

			if (yyn ~= 0) & ((yyn +:= yychar) >= 0) & 
					(yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yychar) then {
		
				##### NEXT STATE ####
				yystate := yytable[yyn+1] # we are in a new state
				push(statestk, yystate)   # save it
				push(valstk, yylval)      # push our lval as the input for next rule
				yychar := -1              # since we have 'eaten' a token, say we need another
				if yyerrflag > 0 then     # have we recovered an error?
					yyerrflag -:= 1        # give ourselves credit
				doaction := 0             # but don't process yet
				break                     # quit the yyn=0 loop
			}

			yyn := yyrindex[yystate+1]    # reduce

			if (yyn ~= 0) & ((yyn +:= yychar) >= 0) &
					(yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yychar) then {
				# e reduced!
				yyn      := yytable[yyn+1] 
				doaction := 1  # get ready to execute
				break          # drop down to actions
			} else { #ERROR RECOVERY
				if yyerrflag == 0 then {
					yyerror("syntax error") 
					yynerrs +:= 1 
				}
				if yyerrflag < 3 then {     # low error count?
					yyerrflag := 3 
					repeat { #do until break
						if *statestk < 1 then {  # check for under & overflow here
							compiler_error(1100, "compile time error")   # note lower case 's'
							return 1 
						}
						yyn := yysindex[statestk[1]] 
						if ((yyn ~= 0) & (yyn +:= YYERRCODE) >= 0 &
								yyn <= YYTABLESIZE & yycheck[yyn+1] == YYERRCODE) then {
							yystate := yytable[yyn+1] 
							push(statestk, yystate) 
							push(valstk, yylval) 
							doaction := 0 
							break 
						} else {
							if *statestk = 0 then { # check for under & overflow here
								write("Stack underflow. aborting...") # capital 'S'
								return 1 
							}
							pop(statestk) 
							pop(valstk) 
						}
					}
				} else {# discard this token
					if yychar = 0 then return 1  # yyabort
					if \yydebug = 1 then {
						yys := &null 
						if yychar <= YYMAXTOKEN then yys := yyname[yychar+1] 
						if integer(yys) & yys = 0 then yys := "illegal-symbol" 
						write("state ",  yystate, ", error recovery discards token ",
								yychar, " (", yys, ")") 
					}
					yychar := -1       # read another
				}
			} # end error recovery
			yyn := yydefred[yystate+1] 
		}# yyn = 0 loop

		if doaction = 0 then   # any reason not to proceed?
			next                 # skip action

		yym := yylen[yyn+1]    # get count of terminals on rhs
		yyval := valstk[yym]   # get current semantic value
		if arv := action[yyn]() then return arv # execute the semantic action

		##### Now let's reduce... ####
		every 1 to yym do pop(statestk)# we just reduced yylen states
		yystate := statestk[1]        # get new state

		every 1 to yym do pop(valstk) # corresponding value drop
		yym := yylhs[yyn+1]           # select next TERMINAL(on lhs)
		if yystate = 0 & yym = 0 then {
                                  # done? 'rest' state and at first TERMINAL
			yystate := YYFINAL          # explicitly say we're done
			push(statestk, YYFINAL)     # and save it
			push(valstk, yyval)         # also save the semantic value of parsing
			if yychar < 0 then {        # we want another character?
				yychar := yylex()         # get next character
				if yychar < 0 then yychar := 0   #clean, if necessary
			}
			if yychar = 0 then break    # Good exit (if lex returns 0  -)
                                  # quit the loop--all DONE
		} else { 	# if yystate
                #else not done yet
			
			
			# get next state and push, for next yydefred[]
			yyn := yygindex[yym+1]        # find out where to go
			if (yyn ~= 0)           & ((yyn +:= yystate) >= 0) &
					(yyn <= YYTABLESIZE) & (yycheck[yyn+1] = yystate) then {
				yystate := yytable[yyn+1]   # get new state
			} else {
				yystate := yydgoto[yym+1]   # else go to new defred
			}
			push(statestk, yystate)       # going again, so push state & val...
			push(valstk, yyval)           # for next action
		}
	} # main loop

	return 0 # yyaccept!!
end

### end of procedure parse() ######################################

### start semantic actions ########################################

procedure action_null()
  #write("null action")
end

procedure action_1()
#line 279 "scoelgram.y"
	
		children := [valstk[2]]
		yyval := program_node(children)
	
end

procedure action_2()
#line 285 "scoelgram.y"
 
		yyval := EmptyNode 
	
end

procedure action_3()
#line 288 "scoelgram.y"

	   #if yynerrs = 0 then iwrites(&errout,".");
	   children := [valstk[2], valstk[1]]
	   yyval := decls_node(children)
	
end

procedure action_4()
#line 295 "scoelgram.y"
	
		children := [valstk[1]]
		yyval := decl_node(children)
	
end

procedure action_5()
#line 299 "scoelgram.y"
	
		children := [valstk[1]]
		yyval := decl_node(children)
	
end

procedure action_6()
#line 303 "scoelgram.y"
	
		children := [valstk[1]]
		yyval := decl_node(children)
	
end

procedure action_7()
#line 307 "scoelgram.y"
	
		children := [valstk[1]]
		yyval := decl_node(children)
	
end

procedure action_8()
#line 311 "scoelgram.y"
	
		children := [valstk[1]]
		yyval := decl_node(children)
	
end

procedure action_9()
#line 315 "scoelgram.y"
	
		children := [valstk[1]]
		yyval := decl_node(children)
	
end

procedure action_10()
#line 321 "scoelgram.y"
 
		yyval := EmptyNode 
	
end

procedure action_11()
#line 324 "scoelgram.y"

		children := [valstk[5], valstk[4], valstk[3], valstk[2], valstk[1]]
		yyval := initially_node(2, children)
	
end

procedure action_12()
#line 328 "scoelgram.y"

		children := [valstk[8], valstk[7], valstk[6], valstk[5], valstk[4], valstk[3], valstk[2], valstk[1]]
		yyval := initially_node(4, children)
	
end

procedure action_13()
#line 334 "scoelgram.y"
 
		yyval := optsemi_node() #EmptyNode 
	
end

procedure action_14()
#line 337 "scoelgram.y"

		yyval := optsemi_node()
	
end

procedure action_15()
#line 342 "scoelgram.y"

		children := [valstk[7], valstk[5], valstk[4], valstk[2]]
		yyval := class_node(children)
	
end

procedure action_16()
#line 346 "scoelgram.y"

		children := [valstk[3], valstk[2], valstk[1]]
		yyval := class_node(children)
	
end

procedure action_17()
#line 352 "scoelgram.y"

		children := [valstk[3],valstk[2],valstk[1]]
		yyval := classhead_node(0, children)
	
end

procedure action_18()
#line 356 "scoelgram.y"

		children := [valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := classhead_node(1, children)
	
end

procedure action_19()
#line 362 "scoelgram.y"
 
		yyval := EmptyNode 
	
end

procedure action_20()
#line 365 "scoelgram.y"
 
		children := [valstk[3], valstk[2], valstk[1]]
		yyval := supers_node(children) 
	
end

procedure action_21()
#line 369 "scoelgram.y"
 
		children := [valstk[3], valstk[2], valstk[1]]
		yyval := supers_node(children) 
	
end

procedure action_22()
#line 375 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := packageref_node(children) 
	
end

procedure action_23()
#line 379 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := packageref_node(children) 
	
end

procedure action_24()
#line 385 "scoelgram.y"
 
		yyval := EmptyNode 
	
end

procedure action_25()
#line 388 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := methods_node(children) 
	
end

procedure action_26()
#line 392 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := methods_node(children) 
	
end

procedure action_27()
#line 396 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := methods_node(children) 
	
end

procedure action_28()
#line 400 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := methods_node(children) 
	
end

procedure action_29()
#line 406 "scoelgram.y"

		children := [valstk[2],valstk[1]]
		yyval := package_node(children)
	
end

procedure action_30()
#line 412 "scoelgram.y"

		children := [valstk[2],valstk[1]]
		yyval := import_node(children)
	
end

procedure action_31()
#line 418 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := link_node(children)
	
end

procedure action_32()
#line 424 "scoelgram.y"

		children := [valstk[1]]
		yyval := linklist_node(children)
	
end

procedure action_33()
#line 428 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := linklist_node(children); 
	
end

procedure action_34()
#line 434 "scoelgram.y"

		children := [valstk[1]]
		yyval := lnkfile_node(children)
	
end

procedure action_35()
#line 438 "scoelgram.y"

		children := [valstk[1]]
		yyval := lnkfile_node(children)
	
end

procedure action_36()
#line 444 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := global_node(children) 
	
end

procedure action_37()
#line 450 "scoelgram.y"

		children := [valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := record_node(children)
	
end

procedure action_38()
#line 456 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := invocDef_node(children)
	
end

procedure action_39()
#line 462 "scoelgram.y"
 
		yyval := EmptyNode 
	
end

procedure action_40()
#line 465 "scoelgram.y"

		children := [valstk[1]]
		yyval := fldlist_node(children)
	
end

procedure action_41()
#line 471 "scoelgram.y"

		children := [valstk[2],valstk[1]]
		yyval := method_node(children)
	
end

procedure action_42()
#line 475 "scoelgram.y"

		children := [valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := method_node(children)
	
end

procedure action_43()
#line 481 "scoelgram.y"

		children := [valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := methhead_node(children)
	
end

procedure action_44()
#line 487 "scoelgram.y"
 
		yyval := EmptyNode 
	
end

procedure action_45()
#line 490 "scoelgram.y"
 
		children := [valstk[1]]
		yyval := arglist_node(children) 
	
end

procedure action_46()
#line 494 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := arglist_node(children) 
	
end

procedure action_48()
#line 501 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := idlist_node(children) 
	
end

procedure action_50()
#line 508 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := parmlist_node(children) 
	
end

procedure action_51()
#line 514 "scoelgram.y"

		children := [valstk[1]]
		yyval := arg_node(1, children)
	
end

procedure action_52()
#line 518 "scoelgram.y"
 
		children := [valstk[3], valstk[2], valstk[1]]
		yyval := arg_node(2, children) 
	
end

procedure action_53()
#line 522 "scoelgram.y"
 
		children := [valstk[3], valstk[2], valstk[1]]
		yyval := arg_node(3, children) 
	
end

procedure action_54()
#line 526 "scoelgram.y"
 
		children := [valstk[5], valstk[4], valstk[3], valstk[2], valstk[1]]
		yyval := arg_node(4, children) 
	
end

procedure action_55()
#line 532 "scoelgram.y"
 
		yyval := EmptyNode
	
end

procedure action_56()
#line 535 "scoelgram.y"
 
		children := [valstk[4],valstk[3],valstk[2],";"]
		yyval := locals_node(2, children)
	
end

procedure action_59()
#line 545 "scoelgram.y"
 
		yyval := EmptyNode 
	
end

procedure action_60()
#line 548 "scoelgram.y"

		children := [valstk[3], valstk[2],";"]
		yyval := initial_node(children)
	
end

procedure action_61()
#line 554 "scoelgram.y"
 
		yyval := EmptyNode 
	
end

procedure action_62()
#line 557 "scoelgram.y"
 
		children := [valstk[3],";",valstk[1]]
		yyval := methbody_node(children)
	
end

procedure action_63()
#line 563 "scoelgram.y"
 
		yyval := EmptyNode 
	
end

procedure action_64()
#line 566 "scoelgram.y"

		children := [valstk[1]]
		yyval := expr_node(children)
	
end

procedure action_66()
#line 573 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := and_node(children) 
	
end

procedure action_68()
#line 580 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := swap_node(children)
	
end

procedure action_69()
#line 584 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := assign_node(children)
	
end

procedure action_70()
#line 588 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := revswap_node(children)
	
end

procedure action_71()
#line 592 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := revassign_node(children)
	
end

procedure action_72()
#line 596 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := augcat_node(children)
	
end

procedure action_73()
#line 600 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bdiffa_node(children)
	
end

procedure action_74()
#line 604 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Buniona_node(children)
	
end

procedure action_75()
#line 608 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bplusa_node(children)
	
end

procedure action_76()
#line 612 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bminusa_node(children)
	
end

procedure action_77()
#line 616 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bstara_node(children)
	
end

procedure action_78()
#line 620 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bintera_node(children)
	
end

procedure action_79()
#line 624 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bslasha_node(children)
	
end

procedure action_80()
#line 628 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bmoda_node(children)
	
end

procedure action_81()
#line 632 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bcareta_node(children)
	
end

procedure action_82()
#line 636 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Baugeq_node(children)
	
end

procedure action_83()
#line 640 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Baugge_node(children)
	
end

procedure action_84()
#line 644 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bauggt_node(children)
	
end

procedure action_85()
#line 648 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Baugle_node(children)
	
end

procedure action_86()
#line 652 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bauglt_node(children)
	
end

procedure action_87()
#line 656 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Baugne_node(children)
	
end

procedure action_88()
#line 660 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Baugques_node(children)
	
end

procedure action_89()
#line 664 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Baugamper_node(children)
	
end

procedure action_90()
#line 668 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Baugact_node(children)
	
end

procedure action_92()
#line 675 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := to_node("to", children)
	
end

procedure action_93()
#line 679 "scoelgram.y"
 
		children := [valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := toby_node(children)
	
end

procedure action_95()
#line 686 "scoelgram.y"

		children := [valstk[3],valstk[2],valstk[1]]
		yyval := bar_node(children)
	
end

procedure action_97()
#line 693 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Beq_node(children)
	
end

procedure action_98()
#line 697 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bge_node(children)
	
end

procedure action_99()
#line 701 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bgt_node(children)
	
end

procedure action_100()
#line 705 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Ble_node(children)
	
end

procedure action_101()
#line 709 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Blt_node(children)
	
end

procedure action_102()
#line 713 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bne_node(children)
	
end

procedure action_104()
#line 720 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bcat_node(children)
	
end

procedure action_106()
#line 727 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bplus_node(children)
	
end

procedure action_107()
#line 731 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bdiff_node(children)
	
end

procedure action_108()
#line 735 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bunion_node(children)
	
end

procedure action_109()
#line 739 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bminus_node(children)
	
end

procedure action_111()
#line 746 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bstar_node(children)
	
end

procedure action_112()
#line 750 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Binter_node(children)
	
end

procedure action_113()
#line 754 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bslash_node(children)
	
end

procedure action_114()
#line 758 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bmod_node(children)
	
end

procedure action_116()
#line 765 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := Bcaret_node(children)
	
end

procedure action_118()
#line 772 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := limit_node(children)
	
end

procedure action_119()
#line 776 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := at_node(children) 
	
end

procedure action_120()
#line 780 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := apply_node(children)
	
end

procedure action_122()
#line 787 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := uat_node(children)
	
end

procedure action_123()
#line 791 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := unot_node(children)
	
end

procedure action_124()
#line 795 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := ubar_node(children)
	
end

procedure action_125()
#line 799 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := uconcat_node(children)
	
end

procedure action_126()
#line 803 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := udot_node(children)
	
end

procedure action_127()
#line 807 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := ubang_node(children)
	
end

procedure action_128()
#line 811 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := udiff_node(children)
	
end

procedure action_129()
#line 815 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := uplus_node(children)
	
end

procedure action_130()
#line 819 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := ustar_node(children)
	
end

procedure action_131()
#line 823 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := uslash_node(children)
	
end

procedure action_132()
#line 827 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := ucaret_node(children)
	
end

procedure action_133()
#line 831 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := uinter_node(children)
	
end

procedure action_134()
#line 835 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := utilde_node(children)
	
end

procedure action_135()
#line 839 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := uminus_node(children)
	
end

procedure action_136()
#line 843 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := unumeq_node(children)
	
end

procedure action_137()
#line 847 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := unumne_node(children)
	
end

procedure action_138()
#line 851 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := uunion_node(children)
	
end

procedure action_139()
#line 855 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := uqmark_node(children)
	
end

procedure action_140()
#line 859 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := ubackslash_node(children)
	
end

procedure action_142()
#line 866 "scoelgram.y"

		children := [valstk[1]]
		yyval := section_node(children)
	
end

procedure action_143()
#line 870 "scoelgram.y"

		children := [valstk[1]]
		yyval := return_node(children)
	
end

procedure action_144()
#line 874 "scoelgram.y"

		children := [valstk[1]]
		yyval := if_node(children)
	
end

procedure action_145()
#line 878 "scoelgram.y"

		children := [valstk[1]]
		yyval := case_node(children)
	
end

procedure action_146()
#line 882 "scoelgram.y"

		children := [valstk[1]]
		yyval := while_node(children)
	
end

procedure action_147()
#line 886 "scoelgram.y"

		children := [valstk[1]]
		yyval := until_node(children)
	
end

procedure action_148()
#line 890 "scoelgram.y"

		children := [valstk[1]]
		yyval := every_node(children)
	
end

procedure action_149()
#line 894 "scoelgram.y"

		children := [valstk[1]]
		yyval := repeat_node(children)
	
end

procedure action_150()
#line 898 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := create_node(children)
	
end

procedure action_151()
#line 902 "scoelgram.y"

		children := [valstk[1]]
		yyval := ident_node(children)
	
end

procedure action_152()
#line 906 "scoelgram.y"
 
		children := [valstk[1]]
		yyval := next_node(children)
	
end

procedure action_153()
#line 910 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := Break_node(children)
	
end

procedure action_154()
#line 914 "scoelgram.y"
 
		children := [valstk[3], valstk[2], valstk[1]]
		yyval := Paren_node(children)
	
end

procedure action_155()
#line 918 "scoelgram.y"
 
		children := [valstk[3], valstk[2], valstk[1]]
		yyval := Brace_node(children)
	
end

procedure action_156()
#line 922 "scoelgram.y"
 
		children := [valstk[3], valstk[2], valstk[1]]
		yyval := Brack_node(children)
	
end

procedure action_157()
#line 926 "scoelgram.y"
 
		children := [valstk[4], valstk[3], valstk[2], valstk[1]]
		yyval := Subscript_node(children)
	
end

procedure action_158()
#line 930 "scoelgram.y"
 
		children := [valstk[3], valstk[2], valstk[1]]
		yyval := Pdco_node(0, children)
	
end

procedure action_159()
#line 934 "scoelgram.y"
 
		children := [valstk[4], valstk[3], valstk[2], valstk[1]]
		yyval := Pdco_node(1, children)
	
end

procedure action_160()
#line 938 "scoelgram.y"
 
		children := [valstk[4], valstk[3], valstk[2], valstk[1]]
		yyval := invoke_node(children)
	
end

procedure action_161()
#line 942 "scoelgram.y"

		children := [valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := invocationnode(children)
	
end

procedure action_162()
#line 946 "scoelgram.y"

		children := [valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := invocationnode(children)
	
end

procedure action_163()
#line 950 "scoelgram.y"

		children := [valstk[8],valstk[7],valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := invocationnode(children)
	
end

procedure action_164()
#line 954 "scoelgram.y"

		children := [valstk[8],valstk[7],valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := invocationnode(children)
	
end

procedure action_165()
#line 958 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := field_node(children)
	
end

procedure action_166()
#line 962 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := field_node(children)
	
end

procedure action_167()
#line 966 "scoelgram.y"

		children := [valstk[1]]
		yyval := packageref_node(children)
	
end

procedure action_168()
#line 970 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := field_node(children)
	
end

procedure action_169()
#line 974 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := keyword_node(children)
	
end

procedure action_170()
#line 978 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := keyword_node(children)
	
end

procedure action_171()
#line 984 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := While_node(0, children)
	
end

procedure action_172()
#line 988 "scoelgram.y"
 
		children := [valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := While_node(1, children)
	
end

procedure action_173()
#line 994 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := Until_node(0, children)
	
end

procedure action_174()
#line 998 "scoelgram.y"
 
		children := [valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := Until_node(1, children)
	
end

procedure action_175()
#line 1004 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := Every_node(0, children)
	
end

procedure action_176()
#line 1008 "scoelgram.y"
 
		children := [valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := Every_node(1, children)
	
end

procedure action_177()
#line 1014 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := Repeat_node(0, children)
	
end

procedure action_179()
#line 1021 "scoelgram.y"
 
		children := [valstk[2], valstk[1]]
		yyval := Return_node(0, children)
	
end

procedure action_180()
#line 1025 "scoelgram.y"
 
		children := [valstk[2],valstk[1]]
		yyval := Suspend_node(0, children)
	
end

procedure action_181()
#line 1029 "scoelgram.y"
 
		children := [valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := Suspend_node(1, children)
	
end

procedure action_182()
#line 1035 "scoelgram.y"
 
		children := [valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := If_node(0, children)
	
end

procedure action_183()
#line 1039 "scoelgram.y"
 
		children := [valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := If_node(1, children)
	
end

procedure action_184()
#line 1045 "scoelgram.y"
 
		children := [valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := Case_node(0, children)
	
end

procedure action_186()
#line 1052 "scoelgram.y"
 
		children := [valstk[3],";",valstk[1]]
		yyval := caselist_node(children)
	
end

procedure action_187()
#line 1058 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := cclause_node(0, children)
	
end

procedure action_188()
#line 1062 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := cclause_node(0, children)
	
end

procedure action_189()
#line 1068 "scoelgram.y"
#exprlist_node
		children := [valstk[1]]
		yyval := exprlist_node(children)
	
end

procedure action_190()
#line 1072 "scoelgram.y"

		if type(valstk[3])=="treenode" & (valstk[3].label=="elst1") then {
			children := [valstk[2], valstk[1]]
			yyval := valstk[3]; put(yyval.children, children)
		} else {
			children := [valstk[3],valstk[2],valstk[1]]
			yyval := elst_node(1, children)
		}
	
end

procedure action_191()
#line 1083 "scoelgram.y"
 
		children := [valstk[1]]
		yyval := pdcolist_node(0, children) 
	
end

procedure action_192()
#line 1087 "scoelgram.y"
 
		children := [valstk[3],valstk[2],valstk[1]]
		yyval := pdcolist_node(1, children)
	
end

procedure action_193()
#line 1093 "scoelgram.y"

		children := [valstk[1]]
		yyval := intlit_node(children)
	
end

procedure action_194()
#line 1097 "scoelgram.y"

		children := [valstk[1]]
		yyval := reallit_node(children)
	
end

procedure action_195()
#line 1101 "scoelgram.y"

		children := [valstk[1]]
		yyval := stringlit_node(children)
	
end

procedure action_196()
#line 1105 "scoelgram.y"

		children := [valstk[1]]
		yyval := csetlit_node(children)
	
end

procedure action_197()
#line 1111 "scoelgram.y"
 
		children := [valstk[6],valstk[5],valstk[4],valstk[3],valstk[2],valstk[1]]
		yyval := section_node(children)
	
end

procedure action_198()
#line 1117 "scoelgram.y"

		children := [valstk[1]]
		yyval := colon_node(children)
	
end

procedure action_199()
#line 1121 "scoelgram.y"

		children := [valstk[1]]
		yyval := pcolon_node(children)
	
end

procedure action_200()
#line 1125 "scoelgram.y"

		children := [valstk[1]]
		yyval := mcolon_node(children)
	
end

procedure action_201()
#line 1131 "scoelgram.y"

		children := [valstk[1]]
		yyval := compound_node(children)
	
end

procedure action_202()
#line 1135 "scoelgram.y"
 
		children := [valstk[3],";",valstk[1]]
		yyval := compound_node(children)
	
end

procedure action_203()
#line 1141 "scoelgram.y"

		children := [valstk[3]]
		yyval := program_node(children)
	
end

procedure action_204()
#line 1147 "scoelgram.y"
 
		yyval := error_node(); 
	
end

#line 3485 "scoelgram.icn"
