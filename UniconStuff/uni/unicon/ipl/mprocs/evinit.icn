############################################################################
#
#	File:     evinit.icn
#
#	Subject:  Procedures for event monitoring
#
#	Author:   Ralph E. Griswold
#
#	Date:     November 5, 1995
#
############################################################################
#
#   This file is in the public domain.
#
############################################################################
#
#  This file provides initialization for event monitors.
#
#  This file is intended for use with event monitors running under
#  MT Icon.
#
############################################################################

$include "evdefs.icn"

link evnames, evsyms, typebind, opname, evutils

procedure EvInit(f,input,output,error)
   if not MTEvInit(f,input,output,error) then fail
   return
end

procedure EvTerm(win)
  if &eventsource === (Monitored | EventSource) then {
    if type(win) == "window" then
      Event(win)
    }
end
#
# MultiThread EventMon support, from file mtsupport.icn
#

global Monitored, EventSource, MTEventMask

#
# If EvInit is called with a string or a list, run as a standalone MT-based
# event monitor -- load the icode file and overload certain EvMon symbols.
#
# This operation is skipped if &eventsource has already been initialized,
#  presumably by some event broker such as Eve.
#
procedure MTEvInit(f,input,output,error)

initial {
   EvGet :=: MTEvGet
   }

   if \&eventsource then return

   if type(f) == "string" then {
      operator := '<>'
      f ? {
	 #
	 # If a redirection operator is present start parsing string.
	 # Need to fix this so it would not lose or misinterpret
	 # arguments after a redirection, as in foo <bar baz, which
	 # should be equivalent to foo baz <bar.
	 # Are spaces allowed between <> and the filename to be redirected?
	 #
	 if filename := trim(tab(upto(operator)),,0) then {
	    op1 := move(1)
	    if redirect1 := trim(tab(upto(operator)),,0) then {
	       op2 := move(1)
	       if op1 === op2 then fail
	       redirect2 := trim(tab(0),,0)
	       if op1 === "<" then {
		  input := open(redirect1)
		  output := open(redirect2, "w")
		  }
	       else {
		  output := open(redirect1, "w")
		  input := open(redirect2)
		  }
	       }
	    if op1 === "<" then input := open(trim(tab(0),,0))
	    else output := open(trim(tab(0),,0), "w")
	    f := filename
	    }
	 }
      &eventsource := EventSource := Monitored := load(f,,input,output,error) | fail
      }
   else if type(f) == "list" then {
      every i := 1 to *f do {
	 arg := pop(f)
	 if arg==="<" then {
	    if not (input := open(f[1])) then
	       write(&errout, "UDB: can't open redirect on ",
		     image(f[1]|"missing file"))
	    else f[1] := &null
	    }
	 else if arg===">" then {
	    if not (output := open(f[1],"w")) then
	       write(&errout, "UDB: can't open redirect on ",
		     image(f[1]|"missing file"))
	    else f[1] := &null
	    }
	 else if string(arg) then put(f,arg)
	 }
      &eventsource := EventSource := Monitored := load(f[1],f[2:0],input,output,error) | fail
      }
   return &eventsource
end

procedure MTEvGet(c,vmask,flag)
   static lastcset
   initial {
      lastcset := ''
      }

   if c ~=== lastcset then {
     lastcset := c
     eventmask(\(Monitored | EventSource) ,\c | &cset)
     }
   if e := MTEvGet(c,vmask,flag) then
      return e
   # EvGet() has failed, maybe it is time to reset &eventsource
   if &eventsource === Monitored then &eventsource := &null
end

#
# Eve-specific extensions to the general model
#
procedure EvQuit()
  EvSignal("quit")
end

procedure EvSignal(x)
   if type(x) == "cset" then
      write(&errout, "EvSignal(", image(x), ") is ambiguous.")
   return x @ &eventsource
end
