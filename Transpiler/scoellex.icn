
# update all uni_error calls

#
# A hand-written lex(1)-compatible Scoel lexer.
#
# This file will be updated to sal as a package containing class definitions, most procedures will be
# methods within a class.
#

link escape

# $define debuglex 0

global yytext, yyin, yytoken, debuglex

global O, D, L, H, R, FS, IS, W, idchars

# E                       [Ee][+-]?{D}+
# yyerror

#
# tokens are classes.
#

class token()
	local	
		tok, 
		string, 
		line, 
		column, 
		filename,
		parent
		
	method to_string()
		return "'" || string || "' line: " || line || " column: " || column
	end
	
initially(t, s, l, c, f)
 	tok := t
	string := s
	line := l
	column := c
	filename := f
	#write(self.to_string())
end

procedure init_csets()
   O  := '01234567'
   D  := &digits
   L  := &letters ++ '_'
   H  := &digits ++ 'abcdefABCDEF'
   R  := &digits ++ &letters
   FS := 'fFlL'
   IS := 'uUlL'
   W  := ' \t\v'
   idchars := L ++ D
end

#$include "ytab_h.icn"
$define IDENT 257
$define INTLIT 258
$define REALLIT 259
$define STRINGLIT 260
$define CSETLIT 261
$define EOFX 262
$define ABSTRACT 263
$define BREAK 264
$define BY 265
$define CASE 266
$define CLASS 267
$define CRITICAL 268
$define DEFAULT 269
$define DO 270
$define ELSE 271
$define END 272
$define EVERY 273
$define FAIL 274
$define GLOBAL 275
$define IF 276
$define IMPORT 277
$define CONSTRUCTOR 278
$define LINK 279
$define LOCAL 280
$define METHOD 281
$define NEXT 282
$define OF 283
$define PUBLIC 284
$define READ 285
$define RECORD 286
$define REPEAT 287
$define RETURN 288
$define STATIC 289
$define SUSPEND 290
$define THEN 291
$define THREAD 292
$define TO 293
$define UNTIL 294
$define WHILE 295
$define BANG 296
$define MOD 297
$define AUGMOD 298
$define AND 299
$define AUGAND 300
$define STAR 301
$define AUGSTAR 302
$define INTER 303
$define AUGINTER 304
$define PLUS 305
$define AUGPLUS 306
$define UNION 307
$define AUGUNION 308
$define MINUS 309
$define AUGMINUS 310
$define DIFF 311
$define AUGDIFF 312
$define DOT 313
$define SLASH 314
$define AUGSLASH 315
$define ASSIGN 316
$define INVASSIGN 317
$define LTH 318
$define AUGLTH 319
$define LTHEQ 320
$define AUGLTHEQ 321
$define EQ 322
$define GTH 323
$define AUGGTH 324
$define GTHEQ 325
$define AUGGTHEQ 326
$define QMARK 327
$define AUGQMARK 328
$define BACKSLASH 329
$define CARET 330
$define AUGCARET 331
$define BAR 332
$define TILDE 333
$define NEQ 334
$define AUGNEQ 335
$define LPAREN 336
$define RPAREN 337
$define PCOLON 338
$define COMMA 339
$define MCOLON 340
$define COLON 341
$define COLONCOLON 342
$define SEMICOL 343
$define LBRACK 344
$define RBRACK 345
$define LBRACE 346
$define RBRACE 347
$define DOLLAR 348
$define SND 349
$define SNDBK 350
$define RCV 351
$define RCVBK 352
$define CONST 353
$define TOPIC 354
$define FUNC 355
$define CONASSIGN 356
$define STORE 357

global yylineno, yycolno, yyfilename

#
# the tokflags will tell you whether the token can start an expression or
# end an expression, as well as whether a newline was seen since the last
# token
# yylex
global tokflags
$define Beginner 1
$define Ender 2
$define Newline 4
global lastid

global buffer
global lastchar

#
# needs to be updated with SAL reserved words.
# INVASSIGN
procedure reswords()
static t
initial {
   t := table([Beginner+Ender, IDENT])

   t["abstract"] := [0, ABSTRACT]
   t["break"] := [Beginner+Ender, BREAK]
   t["by"] := [0, BY]
   t["case"] := [Beginner, CASE]
   t["class"] := [0, CLASS]
   t["critical"] := [Beginner, CRITICAL]
   t["default"] := [Beginner, DEFAULT]
   t["do"] := [0, DO]
   t["else"] := [0, ELSE]
   t["end"] := [Beginner, END]
   t["every"] := [Beginner, EVERY]
   t["fail"] := [Beginner+Ender, FAIL]
   t["global"] := [0, GLOBAL]
   t["if"] := [Beginner, IF]
   t["import"] := [0, IMPORT]
   t["constructor"] := [Ender, CONSTRUCTOR]
   t["link"] := [0, LINK]
   t["private"] := [0, PRIVATE]
   t["method"] := [0, METHOD]
   t["next"] := [Beginner+Ender, NEXT]
   t["of"] := [0, OF]
   t["public"] := [0, PUBLIC]
   t["read"] := [0, READ]
   t["record"] := [0, RECORD]
   t["repeat"] := [Beginner, REPEAT]
   t["return"] := [Beginner+Ender, RETURN]
   t["static"] := [0, STATIC]
   t["suspend"] := [Beginner+Ender, SUSPEND]
   t["then"] := [0, THEN]
   t["thread"] := [Beginner, THREAD]
   t["to"] := [0, TO]
   t["until"] := [0, UNTIL]
   t["while"] := [Beginner, WHILE]
   t["const"] := [0, CONST]
   t["topic"] := [0, TOPIC]
   t["f"] := [0, FUNC]
   t["store"] := [0, STORE]
}
   return t
end

#import errors
#procedure lex_error()
#   yyerror("token not recognized")
#end

#procedure uni_error(s)
#   /errors := 0
#   /s := "token not recognized"
#   yyerror(s)
#   errors +:= 1
#end

procedure yylex2()
	local 
		new_filename,
		rv
		
	static 
		punc_table

	initial {
		init_csets()
		reswords := reswords()
		punc_table := table(uni_error)
		punc_table["'"] := do_literal
		punc_table["\""] := do_literal
		punc_table["!"] := do_bang
		punc_table["%"] := do_mod
		punc_table["&"] := do_and
		punc_table["*"] := do_star
		punc_table["+"] := do_plus
		punc_table["-"] := do_minus
		punc_table["."] := do_dot
		punc_table["/"] := do_slash
		punc_table[":"] := do_colon
		punc_table["<"] := do_less
		punc_table["="] := do_equal
		punc_table[">"] := do_greater
		punc_table["?"] := do_qmark
		punc_table["@"] := do_at
		punc_table["\\"] := do_backslash
		punc_table["^"] := do_caret
		punc_table["|"] := do_or
		punc_table["~"] := do_tilde
		punc_table["("] := do_lparen
		punc_table[")"] := do_rparen
		punc_table["["] := do_lbrack
		punc_table["]"] := do_rbrack
		punc_table["{"] := do_lbrace
		punc_table["}"] := do_rbrace
		punc_table[","] := do_comma
		punc_table[";"] := do_semi
		punc_table["$"] := do_dollar
		every punc_table[!&digits] := do_digits
		every punc_table["_" | !&letters] := do_letters
	}

	yycolno +:= *yytext

	repeat {
		if pos(0) then fail
		if tokflags >= Newline & ="#" then {
			if ="line " then {
				if yylineno := integer(tab(many(&digits))) then {
					=" \""
					new_filename := tab(find("\"")|0)
					if map(new_filename[-4:0]) == ".icn" then {
						yyfilename := new_filename
					}
				}
			}
			tab(find("\n") | 0)
			next
		}
		if ="\r" then next
		if ="\n" then {
			yylineno +:= 1
			yycolno := 1
			if tokflags < Newline then tokflags +:= Newline
			next
		}
		if tab(any(' ')) then { 
			yycolno +:= 1; next 
		}
		if tab(any('\v\^l')) then { 
			next 
		}
		if tab(any('\t')) then {
			yycolno +:= 1
			while (yycolno-1) % 8 ~= 0 do yycolno +:= 1
			next
		}

		yytext := move(1)
		if rv := punc_table[yytext]() then {
			return rv
		}
	}
end

procedure do_letters()
	local
		x
		
	yytext ||:= tab(many(idchars))
	x := reswords[yytext]
	tokflags +:= x[1]
	return x[2]
end

procedure do_digits()
	yytext ||:= tab(many(&digits))
	tokflags +:= Beginner+Ender
	if yytext ||:= ="." then {
		yytext ||:= tab(many(&digits))
		if yytext ||:= tab(any('eE')) then {
			yytext ||:= ="-"
			yytext ||:= tab(many(&digits))
		}
		return REALLIT
	} else if yytext ||:= tab(any('eE')) then {
		yytext ||:= ="-"
		yytext ||:= tab(many(&digits))
		return REALLIT
	} else {
		if yytext ||:= tab(any('rR')) then {
			yytext ||:= tab(many(R))
		} else if tab(any('kK')) then {
			yytext := string(yytext * 1024)
		} else if tab(any('mM')) then {
			yytext := string(yytext * 1024^2)
		} else if tab(any('gG')) then {
			yytext := string(yytext * 1024^3)
		} else if tab(any('tT')) then {
			yytext := string(yytext * 1024^4)
		} else if tab(any('pP')) then {
			yytext := string(yytext * 1024^5)
		}
		return INTLIT
	}
end

procedure do_dollar()
	      if yytext ||:= ="(" then { tokflags +:= Beginner; return LBRACE }
	      if yytext ||:= =")" then { tokflags +:= Ender; return RBRACE }
	      if yytext ||:= ="<" then { tokflags +:= Beginner; return LBRACK }
	      if yytext ||:= =">" then { tokflags +:= Ender; return RBRACK }
	      return DOLLAR
end

procedure do_comma()
    return COMMA
end

procedure do_lbrack()
tokflags +:= Beginner; return LBRACK
end

procedure do_rbrack()
tokflags +:= Ender; return RBRACK
end

procedure do_lbrace()
tokflags +:= Beginner; return LBRACE
end

procedure do_rbrace()
tokflags +:= Ender; return RBRACE
end

procedure do_semi()
    return SEMICOL
end

procedure do_lparen()
    tokflags +:= Beginner; return LPAREN
end

procedure do_rparen()
    tokflags +:= Ender; return RPAREN
end

procedure do_tilde()
	if yytext ||:= ="=" then {
		if yytext ||:= =":=" then { return AUGNEQ}
		tokflags +:= Beginner
		return NEQ
	}
	tokflags +:= Beginner
	return TILDE
end

procedure do_or()
	tokflags +:= Beginner
	return BAR
end

procedure do_caret()
    if yytext ||:= =":=" then {  return AUGCARET }
    tokflags +:= Beginner
    return CARET
end

procedure do_backslash()
    tokflags+:=Beginner
    return BACKSLASH
end

procedure do_at()
    if yytext ||:= =">>" then { 
       tokflags +:= Beginner + Ender
       return SNDBK 
       }
	if yytext ||:= ="<<" then { 
       tokflags +:= Beginner + Ender
       return RCVBK 
       }
    if yytext ||:= =">" then {
       tokflags +:= Beginner + Ender
       return SND 
       }
	if yytext ||:= ="<" then {
       tokflags +:= Beginner + Ender
       return RCV
       }
end

procedure do_qmark()
	if yytext ||:= =":=" then { 
		return AUGQMARK 
	} 
	tokflags +:= Beginner
	return QMARK
end

procedure do_equal()
	tokflags +:= Beginner
	return EQ
end

global next_gt_is_ender

procedure do_greater()
	if yytext ||:= =":=" then { return AUGGTH }
	if yytext ||:= ="=" then {
		if yytext ||:= =":=" then { return AUGGTHEQ }
		return GTHEQ
	}
	if \next_gt_is_ender then {
		tokflags +:= Ender
		next_gt_is_ender := &null
	}
	return GTH
end

procedure do_less()
	if yytext ||:= ="@" then {
		tokflags +:= Beginner + Ender
		return RCV
	}
	if yytext ||:= =":=" then { return AUGLTH }
	if yytext ||:= ="<" then {
		if yytext ||:= ="@" then {
			tokflags +:= Beginner + Ender
			return RCVBK 
		}
	}
	if yytext ||:= ="=" then {
		if yytext ||:= =":=" then { return AUGLTHEQ }
		return LTHEQ
	}
	return LTH
end

procedure do_colon()
	if yytext ||:= ="=" then {
		return ASSIGN
	}
	if yytext ||:= =">" then {
		return CONASSIGN
	}
	if yytext ||:= =":" then {
		tokflags +:= Beginner
		return COLONCOLON
	}
	if yytext ||:= ="-" then { return INVASSIGN }
	return COLON
end

procedure do_slash()
    if yytext ||:= =":=" then { return AUGSLASH }
    tokflags +:= Beginner
    return SLASH
end

procedure do_dot()
	if yytext ||:= tab(many(&digits)) then {
		tokflags +:= Beginner+Ender
		return REALLIT
	} else {
		tokflags +:= Beginner
		return DOT
    }
end

procedure do_minus()
    if yytext ||:= =":" then {
	if yytext ||:= ="=" then { return AUGMINUS}
	return MCOLON
    }
    if yytext ||:= ="-" then {
	if yytext ||:= =":=" then { return AUGDIFF}
	tokflags +:= Beginner # could be two unary prefix - operators
	return DIFF
    }
    tokflags +:= Beginner
    return MINUS
end

procedure do_plus()
   # if we just saw a : and now a +, issue a warning.
   if (\yytoken).str == ":" & yytoken.column + 1 = yycolno then {
      yytext := ":+"
      warning("token may be malformed, did you mean +: ?")
      yytext := "+"
      }
   if yytext ||:= =":" then {
      if yytext ||:= ="=" then { return AUGPLUS }
      return PCOLON
      }
   if yytext ||:= ="+" then {
      if yytext ||:= =":=" then {return AUGUNION}
      tokflags +:= Beginner # could be two unary prefix + operators
      return UNION
      }
   tokflags +:= Beginner
   return PLUS
end

procedure do_star()
    if yytext ||:= =":=" then { return AUGSTAR }
    if yytext ||:= ="*" then {
	if yytext ||:= =":=" then {return AUGINTER}
	tokflags +:= Beginner # could be two unary prefix * operators
	return INTER
    }
    tokflags +:= Beginner
    return STAR
end

procedure do_and()
   if yytext ||:= =":=" then { return AUGAND }
   tokflags +:= Beginner
   return AND
end

procedure do_mod()
    if yytext ||:= =":=" then { return AUGMOD }
    return MOD
end

procedure do_bang()
    tokflags +:= Beginner
    return BANG
end

procedure do_literal() 
	local
		eat,
		s
		
	until yytext ||:= =(yytext[1]) do {
		if yytext ||:= ="\\" then {
			# need more logic here to eat escape chars
			yytext ||:= ="^" # \^ is a control-char escape
		}
		yytext ||:= move(1) | {
			if not (yytext[-1]=="_") then {
				uni_error("unterminated string constant")
				break
			}
		}
		if yytext[-1] == "\n" then {
			# discard newline. discard trailing whitespace.
			yytext := trim(yytext[1:-1])
			yylineno +:= 1
			yycolno := 1
			if not (yytext[-1] == "_") then {
				uni_error("unterminated string constant")
				break
			} else {
				yytext := yytext[1:-1] # discard _
				if eat := tab(many(' \t')) then {
					every s := !eat do {
						yycolno +:= 1
						if s == "\t" then {
							while (yycolno-1) % 8 ~= 0 do yycolno +:= 1
						}
					}
				}
			}
		}
	}
	tokflags +:= Beginner + Ender
	if yytext[1] == "'" then {
		return CSETLIT
	} else {
		return STRINGLIT
	}

end

global errors

procedure yylex_reinit()
	init_errors()
	
	yytext := ""
	yylineno := 0
	yycolno := 1
	lastchar := ""
	if type(yyin) == "file" then buffer := reads(yyin, 1000000)
	else if type(yyin) == "list" then buffer := pop(yyin) | ""
	else buffer := yyin
	tokflags := 0
end

procedure yylex(ender)
	static saved_tok, saved_yytext
	local rv
	initial {
		if /buffer then yylex_reinit()
	}
	if /buffer then {
		if \debuglex then write("yylex() : 0")
		return 0
	}
	if \saved_tok then {
		rv := saved_tok
		saved_tok := &null
		yytext := saved_yytext
		yylval := yytoken := token(rv, yytext, yylineno, yycolno, yyfilename)
		if \debuglex then write("yylex() : ", tokenstr(rv), "\t", image(yytext))
		return rv
	}
	if /ender := iand(tokflags, Ender) then tokflags := 0
	if *buffer=0 then {
		if type(yyin)=="list" then {
			if buffer := pop(yyin) then {
				yylineno +:= 1
				yycolno := 1
				if tokflags < Newline then tokflags +:= Newline
				return yylex(ender)
			}
		}
		buffer := &null
		if \debuglex then write("yylex() : EOFX")
		yytext := "EOFX"
		return EOFX
	}
	buffer ? {
		if rv := yylex2() then {
			buffer := tab(0)
		} else {
			if type(yyin)=="list" then {
				if buffer := pop(yyin) then {
					yylineno +:= 1
					yycolno := 1
					if tokflags < Newline then tokflags +:= Newline
					return yylex(ender)
				}
			}
			buffer := &null
			yytext := ""
			if \debuglex then write("yylex() : EOFX")
			yytext := "EOFX"
			return EOFX
		}
	}
	if ender~=0 & iand(tokflags, Beginner)~=0 & iand(tokflags, Newline)~=0 then {
		saved_tok := rv
		saved_yytext := yytext
		yytext := ";"
		rv := SEMICOL
	}
	yylval := yytoken := token(rv, yytext, yylineno, yycolno, yyfilename)
	if \debuglex then write("yylex() : ", tokenstr(rv), "\t", image(yytext))
	return rv
end

procedure tokenstr(rv)
	return rv
end

#
# tell whether a token is a constant or not
#
procedure token_isconst(t)
   return case t.tok of {
     INTLIT | REALLIT | STRINGLIT | CSETLIT : {
	 "const"
     }
     default: fail
   }
end
