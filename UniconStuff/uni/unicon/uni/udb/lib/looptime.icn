
#
# looptime.icn 
# Ziad Al-Sharif
# June 1, 2008
#

$include "evdefs.icn"
link syntname

#
# This class handles loops times,
# It finds the most n loops took time during the execution 
#
$ifndef StandAlone
class LoopTime : Listener(
$else
class LoopTime (
$endif

   eventMask,         # The monitored events for this detection
    
   procCallCount,     # Table maps each proc name into its number of calls
   loopCount,         # Table maps each used loop into its number of use

   loopLastIteration, # Table tracks each loop last num of iterations
   loopIteration,     # Table maps each loop name into its number of iterations

   loopLastTime,      # Table tracks each loop last elapsed time 
   loopTime,          # Table maps each loop name into its elapsed time

   LoopTimeInfo       # A list with loop times information
   )

#
# calculate loop times
#
method handle_Events()
   static loopStart := "while every repeat until"
   static loopEnd   := "endwhile endevery endrepeat enduntil"
   static fname, line, pname, k
   local  loop 
   
   if &eventcode == E_Pcall then{
      pname := image(&eventvalue)
      pname := pname[find(" ", pname)+1: 0]
      procCallCount[pname]+:=1
      }
   else
   if &eventcode == E_Syntax then{
      loop := syntname(&eventvalue)
      if find(loop,loopStart) then{
         line  := keyword("line", Monitored)
         fname := keyword("file", Monitored)
         pname := image(proc(Monitored,0))
         pname := pname[find(" ", pname)+1: 0]
         k := fname||"("||line||"){"||pname||"}-"||
              #procCallCount[pname]||"): "||
              loop
         # Here is where the loop starts
         loopCount[k] +:= 1
         loopLastIteration[k] := 1 #+:= 1
         loopLastTime[k] := keyword("time",Monitored)
         }
      else if find(loop,loopEnd) then{
         loop := loop[4:0]
         line := keyword("line", Monitored)
         fname := keyword("file", Monitored)
         pname := image(proc(Monitored,0))
         pname := pname[find(" ", pname)+1: 0]
         k := fname||"("||line||"){"||pname||"}-"||
              #procCallCount[pname]||"): "||
              loop
         #time := keyword("time",Monitored) - loopTime[k]
         #loopTime[k] := keyword("time",Monitored) - loopTime[k] #time
         # Here is where the loop ends
         loopLastTime[k] := keyword("time",Monitored) - loopLastTime[k]
         loopTime[k] +:= loopLastTime[k]
         loopIteration[k] +:= loopLastIteration[k] 
         }
      } 
   else if &eventcode == E_Line then{
      loop := syntname(keyword("syntax",Monitored))
      if find(loop,loopStart) then{
         line := &eventvalue #keyword("line", Monitored)
         fname := keyword("file", Monitored)
         pname := image(proc(Monitored,0))
         pname := pname[find(" ", pname)+1: 0]
         k := fname||"("||line||"){"||pname||"}-"||
              #procCallCount[pname]||"): "||
              loop
         # Here is where the loop iterates
         loopLastIteration[k] +:=1 
         }
      }
end

#
# updates the loop time info,
# it receives the param j which is the most elapsed j loops 
#
method update_Info(j)
   local i:=1, loop
   
   if /j then j := *loopTime + 1
   else  j >=:= *loopTime + 1
  
   LoopTimeInfo := reverse(sort(loopTime,2))[1:j]
   # 1-"Seq Num"    | 
   # 2-"Loop Name"  | # 3-"Total Time" |
   # 4-"loop Count" |
   # 5-"Total Iterations" | # 6-"Avg Time/Iteration" |
   # 7-"Last elapsed Time"| # 8-"Last # Iterations"
   while i <= j  do{
      loop := LoopTimeInfo[i][1]
      push(LoopTimeInfo[i],i)                     
      put(LoopTimeInfo[i],
          loopCount[loop],
          procCallCount[loop[find("{",loop)+1:find("}",loop)]],
          loopIteration[loop],
          LoopTimeInfo[i][3] / loopIteration[loop],
          loopLastTime[loop],
          loopLastIteration[loop]
          )
      i +:= 1
      }
end

#
# Prints out the total elapsed of a loop in ms 
# It is to be used in a console based application such as UDB
#
method write_Info( num )
   local i:=1

   update_Info(num)
   /num := *LoopTimeInfo

   write("\n-------------------------------------------------------------")
   write("\n---- Loop's Time info [The Most (",num,") Loops] ----")
   write(left("Num",3)," | ",
         left("fname(line){Proc}-Loop Name",30)," : ",        
         left("Total Time",10)," : ",
         left("Loop Count",10)," : ",
         left("Proc Calls",10)," : ",
         left("# Iterat",8)," : ",
         left("Time/Iterat",11)," : ",
         left("Last Time",10)," : ",
         left("Last #Iterat",12)
         )
   while i <= num &  \LoopTimeInfo do{
      write(left(LoopTimeInfo[i][1],3), " | ",
            left(LoopTimeInfo[i][2],30)," : ",
            left(LoopTimeInfo[i][3],10)," : ",
            left(LoopTimeInfo[i][4],10)," : ",
            left(LoopTimeInfo[i][5],10)," : ",
            left(LoopTimeInfo[i][6],8), " : ",
            left(LoopTimeInfo[i][7],11)," : ",
            left(LoopTimeInfo[i][8],10)," : ",
            left(LoopTimeInfo[i][9],12)
            )
      i +:= 1
      }
end

#
# Initialize the Monitoring Stuff
#
initially(name, state)

$ifndef StandAlone
   self.Listener.initially(name, state)
$endif

   eventMask := cset(E_Exit || E_Error) ++ cset(E_Line || E_Syntax || E_Pcall)

   procCallCount     := table(0)
   loopCount         := table(0)
   loopLastIteration := table(0) #table(-2)
   loopIteration     := table(1) #table(-2)
   loopLastTime      := table(0) #table(1)
   loopTime          := table(0) #table(1)

   LoopTimeInfo      := []
end

#
# StandAlone is defined when this tool is used as a stand-alone monitor.
#  Otherwise, this tool can be statically linked into the main utop/udb
#  source code 
#
$ifdef StandAlone

link evinit

#
# This main procedure is only used in the standalone mode
# or udb's external co-expression mode
# 
procedure main(arg)
   local obj
   
   EvInit(arg) | stop(" **** can not initialize Monitor !!!")   
   obj := LoopTime()

   while EvGet(obj.eventMask) do{
      if &eventcode == (E_Exit | E_Error) then
         obj.write_Info(10)
      else
         obj.handle_Events()
      }
   #obj.write_Info(10)
   handle_Events() #fake call
end

#
# This handle_Events procedure is only used udb's external 
# inter-program procedure calls
#
procedure handle_Events(code, value)
   static obj
   
   initial{
      #EvInit(arg) | stop(" **** can not initialize Monitor !!!")   
      obj := LoopTime()
      return obj.eventMask
      } 

   &eventcode  := code
   &eventvalue := value

   if &eventcode == (E_Exit | E_Error) then
      obj.write_Info(10)
   else
      obj.handle_Events()
end

$endif
