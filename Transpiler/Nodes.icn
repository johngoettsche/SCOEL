# empty caselist_node
global
	current_package,
	current_object,
	current_method,
	current_invoc,
	current_codeblocktype,
	current_access,
	current_symbol_table,
	root_symbol_table

record location(packagename, objectname, methodname, invocname, codeblocktype)

class node() 
	local	
		label,
		children,
		parent,
		value,
		ucode,
		icode,
		locate,
		nodeType,
		address,
		first,
		follow,
		onSuccess,
		onFail,
		refLoc,
		refObject
		
	method makeSymbolTable() 
		local
			child
		
#		write(type(self) || " Current Symbol Table: " || current_symbol_table.ident)
		locate := location(current_package, current_object, current_method, current_invoc, current_codeblocktype)
		if \children then {
			every child := !children do {
				if type(child) ?? "node" then child.makeSymbolTable()
			}
		}
	end 
	
	method typeCheck() 
		local
			child
		
		if \children then {
			every child := !children do {
				if type(child) ?? "node" then child.typeCheck()
			}
		}
	end
	
	method setCurrentTable()
		local
			thisTable,
			tempTable
		
		if \locate then {
			current_package := locate.packagename
			current_object := locate.objectname
			current_method := locate.methodname
			current_invoc := locate.invocname
			current_codeblocktype := locate.codeblocktype
		}
	#	write("------------------------------------------------------------------------------------")
		
		if \current_package then { #
			thisTable := current_symbol_table.root()
		} else {
			thisTable := current_symbol_table
		}
		write("current_package: ",current_package)
		if \current_package then {
			thisTable := thisTable.getTable(current_package)
			if /thisTable then {
				yyerror2(1200, "Package Table Error", current_package, &null)
			}
		}
		write("current_object: ",current_object)
		if \current_object then {
			thisTable := thisTable.getTable(current_object)
			if /thisTable then {
				yyerror2(1200, "Object Table Error", current_object, &null)
			}
		}
		write("current_method: ",current_method)
		if \current_method then {
			thisTable := thisTable.getTable(current_method)
			if /thisTable then {
				yyerror2(1200, "Method Table Error", current_method, &null)
			}
		}
		write("current_invoc: ",current_invoc)
		if \current_invoc then {
			thisTable := thisTable.getTable(current_invoc)
			if /thisTable then {
				yyerror2(1200, "Invoc Table Error", current_invoc, &null)
			}
		}
		if /thisTable then write("Table not found")
		if \thisTable then return thisTable
		else yyerror2(1200, "Table Error", current_package, &null)
	end
	
	method to_string() 
		local	
			str
			
		str := label
		if \value then str ||:= ", " || value
		return str
	end
	
initially(lab, ch)
	local
		child
		
	label := lab
	children := ch
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end 

class program_node : node () 
	method makeSymbolTable(loc)
		local 
			field,
			child
		
		current_symbol_table := current_symbol_table.root()
#		write("program:current symbol table: ", current_symbol_table.ident, " size ", *current_symbol_table)
		current_package := loc.packagename
		current_object := &null
		current_method := &null
		current_invoc := &null
#		write("program:current_package: ", current_package)
		current_access := "global"
		current_codeblocktype := "global"
		locate := location(current_package, current_object, current_method, current_invoc, current_codeblocktype)
		field := Field_Ref(locate, current_package, "package", PackageType())
		#no Address
		current_symbol_table.addField(field)
		current_symbol_table.createSymbolTable(current_package, current_access)
		current_symbol_table := setCurrentTable()
		
#		write(type(self) || "program:Current Symbol Table: " || current_symbol_table.ident)
#		first := generate_first()
		every child := !children do {
			if type(child) ?? "node" then child.makeSymbolTable()
		}
		printParseTable(self, 0)
		current_package :=  loc.packagename
		write("program:package ", current_package)
		self.typeCheck()
		
	#	write(current_symbol_table.to_string())
	end
	
	method typeCheck()
		local
			child
		
		current_codeblocktype := "global"
		every child := !children do {
			if type(child) ?? "node" then child.typeCheck()
		}
	end
initially(ch)
	self$node.initially("program", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class decls_node : node () 
	method makeSymbolTable()
		local
			child
		
#		write(type(self) || " Current Symbol Table: " || current_symbol_table.ident)
		locate := location(current_package, current_object, current_method, current_invoc, current_codeblocktype)
		
		every child := !children do {
			if type(child) ?? "node" then child.makeSymbolTable(locate)
			current_symbol_table := setCurrentTable()
			current_codeblocktype := "global"
		}
		
	end
	
	method typeCheck()
		local
			child
		
		every child := !children do {
			if type(child) ?? "node" then child.typeCheck()
			current_codeblocktype := "global"
		}
		
	end
initially(ch)
	self$node.initially("decls", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class decl_node : node ()
initially(ch)
	self$node.initially("decl", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end 

class constructor_node : node ()
	local
		number
		
	method makeSymbolTable()
		local
			field,
			child
		
		current_symbol_table := setCurrentTable()
		current_object := getNodeLabel(parent.children[1].children[3])
		locate := location(current_package, current_object, &null, current_invoc, current_codeblocktype)
		write("constructor: ",current_package,"-", current_object,"-", current_method,"-", current_invoc,"-", current_codeblocktype)
		
		current_codeblocktype := current_method := current_object || "_constructor"
		current_symbol_table.createSymbolTable(current_method, "constructor")
		locate := location(current_package, current_object, &null, current_invoc, current_codeblocktype)
		field := Field_Ref(locate, current_method, "read", ConstructorType())
		field.invoc := 1
#		write("================")
#		write(current_symbol_table.to_string())
		
		current_symbol_table.addField(field)
		current_symbol_table := setCurrentTable()
#		write(current_symbol_table.to_string())
		current_symbol_table := setCurrentTable()
	#	current_symbol_table := current_symbol_table.getTable(current_method)
		locate := location(current_package, current_object, current_method, current_invoc, current_codeblocktype)
#		write(current_package,":", current_object,":", current_method, ":", current_invoc,":", current_codeblocktype)
		
		every child := !children do {
			if type(child) ?? "node" then child.makeSymbolTable()
		}
		current_method := &null
	end
	
	method typeCheck()
		local
			child,
			params
		
		setCurrentTable()
		current_codeblocktype := current_method := current_object || "_constructor"
		every child := !children do {
			if type(child) ?? "node" then child.typeCheck()
		}
	#	params := children[3].arglist
		nodeType := ConstructorType(params)
	end
initially(n, ch)
	number := n
	self$node.initially("constructor", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class class_node : node ()
	local 
		params
		
	method makeSymbolTable()
		local
			child
		
		current_codeblocktype := "class"
#		write("ClassNode ", current_object, ": ", current_method)
		locate := location(current_package, current_object, current_method, current_invoc, current_codeblocktype)
		current_object := &null
		every child := !children do {
			if type(child) ?? "node" then child.makeSymbolTable()
		}
		current_object := &null
		current_method := &null
		current_invoc := &null
	end
	
	method typeCheck()
		local
			child
		
		current_codeblocktype := "class"
		current_object := &null
		every child := !children do {
			if type(child) ?? "node" then child.typeCheck()
		}
	#	params := children[1].arglist ||| children[2].localsList
		nodeType := ClassType(params)
	end
initially(ch)
	self$node.initially("class", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class classhead_node : node ()
	method makeSymbolTable()
		local
			field # current_package
			
		current_access := "global"
		write("classhead:current package: ",current_package)
		setCurrentTable()
		current_object := getNodeLabel(children[3])
		write("classhead: ",current_object)
		current_symbol_table.createSymbolTable(current_object, "object")
		write("classhead: ",current_symbol_table.to_string())
		locate := location(current_package, &null, current_method, current_codeblocktype)
		
		field := Field_Ref(locate, getNodeLabel(children[3]), "global", ClassType())
		field.address := current_symbol_table.generate_object()
		current_symbol_table.addField(field)
		
		current_symbol_table := setCurrentTable()
		write(type(self) , " classhead:Current Symbol Table: ", current_symbol_table.ident)
		current_access := "object"
		locate := location(current_package, current_object, current_method, current_invoc, current_codeblocktype)
		if \children[4] then children[4].makeSymbolTable()
		if \children[6] then children[6].makeSymbolTable()
	end
	
	method typeCheck()
		local
			child,
			pname,
			oname
		
		current_codeblocktype := "class"
		current_object := getNodeLabel(children[3])
		current_access := "object"
		every child := !children do {
			if type(child) ?? "node" then child.typeCheck()
		}
		if \children[4] then {
			refLoc := children[4].refLoc
			if \refLoc then { # check scope
				refLoc.objectname := &null
				 scopeCheck(locate, refLoc, refLoc.objectname, &null, children[4].first)
			}
		}
	end
	
initially(ch)
	self$node.initially("classhead", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class supers_node : node ()
	method typeCheck()
		local
			child,
			refObj,
			obj,
			field,
			tempTable,
			tempField,
			referenceLocation
		
		every child := !children do {
			if type(child) ?? "node" then {
				child.typeCheck()
			}
		}
		tempTable := current_symbol_table.root()
		tempTable := tempTable.getTable(locate.packagename)
		tempField := tempTable.getField(locate.objectname)
		tempTable := tempTable.getTable(locate.objectname)
		if *children > 0 then {
			if type(children[2]) ?? "token" then {
				referenceLocation := locate
				refObj := children[2].string
				referenceLocation.objectname := &null
				obj := scopeCheck(locate, locate, refObj, &null, children[2])
				field := current_symbol_table.generate_super_Field(tempField, SuperType(), obj)
				tempTable := tempTable.addField(field)
			} else {
				referenceLocation := location(children[2].referencePackage.string)
				obj := scopeCheck(locate, referenceLocation, children[2].referenceObject.string, &null, children[2])
				field := current_symbol_table.generate_super_Field(tempField, SuperType(), obj)
				tempTable := tempTable.addField(field)
			}
		}
	end
initially(ch)
	self$node.initially("supers", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

#currentLocation, referenceLocation, referenceLabel, assignmentFlag, token
class packageref_node : node ()
	local
		referencePackage,
		referenceObject,
		referenceMethod
		
	method typeCheck()
		local 
			child,
			tempTable,
			currentTable,
			field,
			oldSymbolTable,
			item
		
		every child := !children do {
			if type(child) ?? "node" then {
				child.typeCheck()
			}
		}
		if *children > 2 then { # pac :: obj
			referencePackage := children[1]
			referenceObject := children[3]
		} else  if *children > 1 then { # :: expr or call to built in function

		} else { 
			referencePackage := children[1].referencePackage 
			referenceObject := children[1].referenceObject
		#	referenceMethod := 
		}
	end
initially(ch)
	self$node.initially("packageref" || *ch, ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class semiOptional_node : node ()
initially(ch)
	self$node.initially("semiOptional", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class methods_node : node ()
	method makeSymbolTable()
		local	
			child
			
		locate := location(current_package, current_object, current_method, current_invoc, current_codeblocktype)
		every child := !children do {
			if type(child) ?? "node" then child.makeSymbolTable()
			if current_symbol_table.scope ~== "global" && 
					current_symbol_table.scope ~== "object" then {
			}
			current_method := &null
		}
	#	current_method := &null
	end
initially(ch)
	self$node.initially("methods", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class import_node : node ()
	method makeSymbolTable()
		local
			oldAccess,
			oldSymbolTable
			
		oldAccess := current_access
		oldSymbolTable := current_symbol_table
		current_access := getNodeLabel(children[1])
		locate := location(current_package, current_object, current_method, current_invoc, current_codeblocktype)
		locate.packagename := &null
		if type(children[2]) ?? "node" then {
			children[2].makeSymbolTable()
		}
		current_access := oldAccess
		current_symbol_table := oldSymbolTable
	end
	
	method uniconCode()
		local
			n,
			child
			
		ucode := ""
		n := 1
		every child := \!children do {
			if \(type(child) ?? "node") then {
				ucode ||:= child.uniconCode()
			} else if \(type(child) ?? "token") then {
				ucode ||:= child.string
			} else {
				ucode ||:= child
			}	
			if n = 2 then ucode ||:= "\n"
			else ucode ||:= " "
			n +:= 1
		}
		return ucode
	end	
initially(ch)
	self$node.initially("import", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class link_node : node ()
	method makeSymbolTable()
		local
			oldAccess
			
		oldAccess := current_access
		current_access := getNodeLabel(children[1])
		locate := location(current_package, current_object, current_method, current_invoc, current_codeblocktype)
		locate.packagename := &null
		if type(children[2]) ?? "node" then {
			children[2].makeSymbolTable()
		}
		current_access := oldAccess
	end
	
	method uniconCode()
		local
			n,
			child
			
		ucode := ""
		n := 1
		every child := \!children do {
			if \(type(child) ?? "node") then {
				ucode ||:= child.uniconCode()
			} else if \(type(child) ?? "token") then {
				ucode ||:= child.string
			} else {
				ucode ||:= child
			}	
			if n = 2 then ucode ||:= "\n"
			else ucode ||:= " "
			n +:= 1
		}
		return ucode
	end	
initially(ch)
	self$node.initially("link", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class linklist_node : node ()	
	method typeCheck()
		local
			childNo,
			child, 
			field,
			item
			
		childNo := *children
		child := getNodeLabel(children[childNo])
		if \(item := current_symbol_table.inScope(child)) then {
			if item.typ.basetype == "package" then {
				write("linklist_node:table: ",item.ident)
				field := current_symbol_table.generate_local_Field(item, item.objtype)
				field.address := item.address
				current_symbol_table.addField(field)
			}
		} else {
			field := current_symbol_table.generate_local_Field(FilenameType())
			field.value := child
			current_symbol_table.addField(field)
		} 
		every child := !children do {
			if type(child) ?? "node" then {
				child.typeCheck()
			}
		}
	end
	
initially(ch)
	self$node.initially("linklist", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class lnkfile_node : node ()
	method typeCheck()
		local	
			file,
			filename
		
		if type(children[1]) ?? "\"" then {
			filename := "./" || getNodeLabel(children[1])
			file := open(filename)
			if /file then {
				yyerror2(620, "System Error", filename, children[1])
			} else {
				#TBA
			}
			close(file)
		} else {
			locate
			refLoc := location()
			scopeCheck(locate, refLoc, getNodeLabel(children[1]), &null, children[1])
		}
	end
initially(ch)
	self$node.initially("lnkfile", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class global_node : node ()	
	method makeSymbolTable()
		local
			oldAccess
			
		oldAccess := current_access
		current_access := getNodeLabel(children[1])
		locate := location(current_package, current_object, current_method, current_invoc, current_codeblocktype)
	#	locate.packagename := &null
		if type(children[2]) ?? "node" then {
			children[2].makeSymbolTable()
		}
		current_access := oldAccess
	end
	
initially(ch)
	self$node.initially("global", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class const_node : node ()	
	method makeSymbolTable(loc)
		local
			child
		
		current_access := label
		locate := location(current_package, current_object, current_method, current_invoc, current_codeblocktype)
		every child := !children do {
			if type(child) ?? "node" then child.makeSymbolTable(locate)
		}
	end
	
	method typeCheck()
		local
			child
		
		current_access := label
		every child := !children do {
			if type(child) ?? "node" then child.typeCheck()
		}
		
	end
	
initially(ch)
	self$node.initially("const", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class topic_node : node ()	
	method makeSymbolTable(loc)
		local
			child
		
		current_access := label
		locate := location(current_package, current_object, current_method, current_invoc, current_codeblocktype)
		every child := !children do {
			if type(child) ?? "node" then child.makeSymbolTable(locate)
		}
	end
	
	method typeCheck()
		local
			child
		
		current_access := label
		every child := !children do {
			if type(child) ?? "node" then child.typeCheck()
		}
		
	end
	
initially(ch)
	self$node.initially("topic", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class constlist_node : node ()                                
	method makeSymbolTable()	
		current_access := "const"
		locate := location()
		children[1].makeSymbolTable()
		if *children > 2 then {
			children[3].makeSymbolTable()
		}
	end
	
	method typeCheck()
		local
			child
			
		current_access := "const"
		every child := !children do {
			if type(child) ?? "node" then child.typeCheck()
		}
	end
initially(ch)
	self$node.initially("idlist", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class constdef_node : node ()
	local
		field
		
	method makeSymbolTable(loc)
		local 
			child			
			
		locate := location(current_package, current_object, current_method, current_invoc, current_codeblocktype)		
		child := getNodeLabel(children[1])
		field := Field_Ref(locate, child, current_access, ConstantType())
		field.address := current_symbol_table.generate_constant()
		current_symbol_table.addField(field)
		
		every child := !children do {
			if type(child) ?? "node" then child.makeSymbolTable(locate)
		}
	end
	
	method typeCheck()
		local 
			assignedType,
			child
		
		every child := !children do {
			if type(child) ?? "node" then child.typeCheck()
		}
		current_symbol_table := current_symbol_table.root()
		current_symbol_table := current_symbol_table.getTable(locate.packagename)
		if type(children[3]) ?? "lit" then {
			if type(children[3]) ?? "int" | "real" then {
			#	write("constdef_node:value: ", children[3].value)
				field.value := children[3].value
				children[3].address := address
				current_symbol_table.removeField("local$" || field.address.offset)
			} else {
				field.typ := PointerType()
				field.reference := current_symbol_table.getField("local$" || field.address.offset)
				current_symbol_table.removeField("local$" || field.address.offset)
			}
		} else {
			field.value := children[3]
			assignedType := type(children[3].value)
			write("constdef_node:type: ", assignedType)
		}
		current_symbol_table := current_symbol_table.root()
	end
initially(ch)
	self$node.initially("constdef", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class record_node : node () # RECORD IDENT LPAREN fldlist RPAREN
	method makeSymbolTable()
		local
			child,
			field,
			oldcodeblocktype,
			oldSymbolTable
		
	#	write(type(self) || " Current Symbol Table: " || current_symbol_table.ident)
		if /current_object then {
			current_access := "global"
		}  else {
			current_access := "record_node: fix access"
		}
		oldcodeblocktype := current_codeblocktype
		oldSymbolTable := current_symbol_table
	#	write("OldSymbolTable: ", oldSymbolTable.ident)
		current_codeblocktype := "record"
		child := getNodeLabel(children[2])
		locate := location(current_package, current_object, current_method, current_invoc, current_codeblocktype)
		field := Field_Ref(locate, child, current_access, RecordType())
		field.address := current_symbol_table.generate_global()
		current_symbol_table.addField(field)
		current_symbol_table.createSymbolTable(child, "record")
		current_symbol_table := current_symbol_table.getTable(child)
		every child := !children do {
			if type(child) ?? "node" then child.makeSymbolTable(locate)
		}
		
		current_codeblocktype := oldcodeblocktype
		current_symbol_table := oldSymbolTable
	#	write(type(self) || " Current Symbol Table: " || current_symbol_table.ident)
	end
	
	method typeCheck()
		local
			child

		current_codeblocktype := "record"
		every child := !children do {
			if type(child) ?? "node" then child.typeCheck()
		}
	end
initially(ch)
	self$node.initially("record", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class store_node : node()
initially(ch)
	self$node.initially("store", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class invocDef_node : node ()
	method makeSymbolTable()
		local
			child,
			field,
			item,
			oldcodeblocktype,
			oldSymbolTable,
			oldInvoc
		
	#	write(type(self) || " Current Symbol Table: " || current_symbol_table.ident)
		oldcodeblocktype := current_codeblocktype
		oldSymbolTable := current_symbol_table
		oldInvoc := current_invoc
		current_codeblocktype := "invoc"
#		write("-----------------\ninvocDef_node:current_package: ", current_package)
#		if /current_object then write("invocDef_node:current_object: ", current_object)
#		if /current_method then write("invocDef_node:current_method: ", current_method)
#		if /current_invoc then write("invocDef_node:current_invoc: ", current_invoc)
#		if /current_codeblocktype then write("invocDef_node:current_codeblocktype: ", current_codeblocktype)
#		write(current_package," id ", current_object," id ", current_method," id ", current_invoc," id", current_codeblocktype)
		current_symbol_table := setCurrentTable()
		child := getNodeLabel(children[1])
	#	write("invocDef:child: ", child)
		current_invoc := child
		locate := location(current_package, current_object, current_method, current_invoc, current_codeblocktype)
		if \(item := current_symbol_table.inScope(child)) then {
	#		write(child, " is in scope.")
			current_codeblocktype := item.locate.codeblocktype
			current_access := item.access
		} else {
			field := Field_Ref(locate, child, current_access, InvocableType())
			current_symbol_table.addField(field)
			current_codeblocktype := child
			current_access := "invoc"
		}
		if children[3] ?? "query"  then { #query or rule
			item.invoc := "logical"
		} else if children[3] ?? "fact"  then { #fact
			item.invoc := "logical"
		} else {
			if *children = 5 then { #
				item.invoc := "patern"
			} else { #function
				item.invoc := "function"
			}
		}
		item.invoc := 1
		current_symbol_table.createSymbolTable(child, "invoc")
		current_symbol_table := current_symbol_table.getTable(child)
		every child := !children do {
			if type(child) ?? "node" then child.makeSymbolTable(locate)
		}
		
		current_codeblocktype := oldcodeblocktype
		current_invoc := oldInvoc
		current_symbol_table := oldSymbolTable
	end
initially(ch)
	self$node.initially("invocDef", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class fact_node : node ()
	local
		item
		
	method makeSymbolTable()
		local
			child,
			field,
			item,
			oldCodeblocktype,
			oldSymbolTable
		
		write(type(self) || " Current Symbol Table: " || current_symbol_table.ident)
		oldCodeblocktype := current_codeblocktype
		oldSymbolTable := current_symbol_table
	#	write(current_package," fa ", current_object," fa ", current_method," fa ", current_invoc," fa", current_codeblocktype)
		current_symbol_table := setCurrentTable()
		locate := location(current_package, current_object, current_method, current_invoc, current_codeblocktype)
		current_codeblocktype := "logical"
		child := getNodeLabel(children[1])
		if \(item := current_symbol_table.inScope(child)) then {
			field := current_symbol_table.generate_local_Field(RecordType(), item)
			field.invoc := "logical"
			
			current_symbol_table.addField(field)
	#		write("fact node scope: ", current_access)
			current_symbol_table.createSymbolTable(field.ident, field.access)
			current_symbol_table := current_symbol_table.getTable(field.ident)
		} else {
			yyerror2(607, "semantic error", children[1].string, children[1])
		}
		
		children[3].makeSymbolTable()
		
		current_symbol_table := oldSymbolTable
		current_codeblocktype := oldCodeblocktype
	end
	
	method typeCheck()
		local
			child,
			oldCodeblocktype
		
		oldCodeblocktype := current_codeblocktype
		current_codeblocktype := "logical"
		child := getNodeLabel(children[1])
		if \item then {
			if item.typ.basetype ~== "record" then {
				yyerror2(608, "semantic error", children[1].token.string, children[1].token)
			} 
		} 
		current_codeblocktype := oldCodeblocktype
	end
initially(ch)
	self$node.initially("fact", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class queryList_node : node ()
initially(ch)
	self$node.initially("queryList", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class query_node : node () #LPAREN fldlist RPAREN semiOptional LBRACE factList RBRACE
	method makeSymbolTable() 
		local
			child,
			oldCodeblocktype
			
		oldCodeblocktype := current_codeblocktype	
		locate := location(current_package, current_object, current_method, current_invoc, current_codeblocktype)
		current_codeblocktype := "query"
		write("-----------------/nquery_node:current_package: ", current_package)
		if /current_object then write("query_node:current_object: ", current_object)
		if /current_method then write("query_node:current_method: ", current_method)
		if /current_invoc then write("query_node:current_invoc: ", current_invoc)
		if /current_codeblocktype then write("query_node:current_codeblocktype: ", current_codeblocktype)
		if \children then {
			every child := !children do {
				if type(child) ?? "node" then child.makeSymbolTable(locate)
			}
		}
		current_codeblocktype := oldCodeblocktype
	end 
	
	method typeCheck()
		local
			child
		
		current_codeblocktype := "query"
		if \children then {
			every child := !children do {
				if type(child) ?? "node" then child.makeSymbolTable(locate)
			}
		}
		current_codeblocktype := &null
	end

initially(ch)
	self$node.initially("query", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class patternDef_node : node() # IDENT INVASSIGN LBRACE exprlist RBRACE
	method makeSymbolTable() 
		local
			child,
			oldCodeblocktype,
			field
		
		oldCodeblocktype := current_codeblocktype
		locate := location(current_package, current_object, current_method, current_invoc, current_codeblocktype)
		current_codeblocktype := "pattern"
		field := current_symbol_table.getField(getNodeLabel(children[1]))
		if \field then field.invoc := "pattern"
		if \children[4] then {
			children[4].makeSymbolTable(locate)
		}
		current_codeblocktype := oldCodeblocktype
	end 
	
	method typeCheck()
		local
			child
		
		current_codeblocktype := "pattern"
		if \children then {
			every child := !children do {
				if type(child) ?? "node" then child.typeCheck()
			}
		}
		current_codeblocktype := &null
	end
initially(ch)
	self$node.initially("patternDef", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class patternLst_node : node()
initially(ch)
	self$node.initially("patternDef", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class functionDef_node : node() #IDENT function
	method makeSymbolTable()
		local
			child,
			oldCodeblocktype,
			field
		
		oldCodeblocktype := current_codeblocktype
		locate := location(current_package, current_object, current_method, current_invoc, current_codeblocktype)
		write("functionDef:locate: ", image(locate))
		current_codeblocktype := "function"
		
#		child := getNodeLabel(children[1])
		child := children[1].ident
		field := current_symbol_table.inScope(child)
		if \field then {
			field.invoc := "function"
		}
		
		children[2].makeSymbolTable()
		current_codeblocktype := oldCodeblocktype
	end
	
	method typeCheck()
		local
			child,
			oldCodeblocktype,
			field
		
		setCurrentTable()
		oldCodeblocktype := current_codeblocktype
		current_codeblocktype := "function"
		write("functionDef:typeCheck:child1: ", getNodeLabel(children[1]))
		field := current_symbol_table.inScope(getNodeLabel(children[1]))
		if /field then {
			yyerror2(611, "semantic error", getNodeLabel(children[1]), children[1])
		} 
		if \children[3] then {
			children[3].typeCheck()
		}
		current_codeblocktype := oldCodeblocktype
	end
initially(ch)
	self$node.initially("functionDef", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class function_node : node()
	method makeSymbolTable()
		local
			child,
			oldCodeblocktype,
			field
		
		oldCodeblocktype := current_codeblocktype
		locate := location(current_package, current_object, current_method, current_invoc, current_codeblocktype)
		current_codeblocktype := "function"

		if \children[3] then {
			children[3].makeSymbolTable()
		}
		children[6].makeSymbolTable()
		current_codeblocktype := oldCodeblocktype
	end
	
initially(ch)
	self$node.initially("function", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class fldlist_node : node ()
initially(ch)
	self$node.initially("fldlist", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class method_node : node ()
	method makeSymbolTable()
		local
			child
			
		current_access := "read"
		current_codeblocktype := "method"
		locate := location(current_package, current_object, current_method, current_invoc, current_codeblocktype)
		every child := !children do {
			if type(child) ?? "node" then child.makeSymbolTable(locate)
		}
		current_access := "public"
		current_method := &null
	end
	
	method typeCheck()
		local
			child
		
		current_access := "read"
		current_codeblocktype := "method"
		if \children then {
			every child := !children do {
				if type(child) ?? "node" then child.typeCheck()
			}
		}
		current_access := "public"
		current_codeblocktype := &null
	end
	
initially(ch)
	self$node.initially("method", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class methhead_node : node ()
	method makeSymbolTable()
		local
			child,
			field
# codeblocktype
#		write("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
		if \current_package then write(current_package)
		if \current_object then write(current_object)
		if \current_method then write(current_method)
#		write(getNodeLabel(children[2]))
		
		current_symbol_table := setCurrentTable()
		
		current_method := getNodeLabel(children[2])
		parent.locate.packagename := current_method
		locate := location(current_package, current_object, current_method, current_invoc, current_codeblocktype)
		field := Field_Ref(locate, current_method, current_access, MethodType())
		field.invoc := "method"
		current_symbol_table.addField(field)
		current_symbol_table.createSymbolTable(current_method, "method")
		current_symbol_table := current_symbol_table.getTable(current_method)	
		every child := !children do {
			if type(child) ?? "node" then child.makeSymbolTable(locate)
		}
	end
	
	method typeCheck()
		local
			child
		
		current_method := getNodeLabel(children[2])
		current_symbol_table := setCurrentTable()
		if \children then {
			every child := !children do {
				if type(child) ?? "node" then child.typeCheck()
			}
		}
	end

initially(ch)
	self$node.initially("methhead", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class arglist_node : node ()
	local
		arglist
		
	method makeSymbolTable()
		local
			child
		
		current_access := "local"
		locate := location(current_package, current_object, current_method, current_invoc, current_codeblocktype)
#		write("-----------------/narglist_node:current_package: ", current_package)
#		if /current_object then write("arglist_node:current_object: ", current_object)
#		if /current_method then write("arglist_node:current_method: ", current_method)
#		if /current_invoc then write("arglist_node:current_invoc: ", current_invoc)
#		if /current_codeblocktype then write("arglist_node:current_codeblocktype: ", current_codeblocktype)
		every child := !children do {
			if type(child) ?? "node" then child.makeSymbolTable(locate)
		}
	end
	
	method typeCheck()
		local
			child
		
		current_access := "local"
		every child := !children do {
			if type(child) ?? "node" then child.typeCheck()
		}
		if *children = 1 then {
			arglist := ListType()
		}
	end
	
initially(ch)
	arglist := []
	self$node.initially("arglist", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class idlist_node : node ()   # loc
	method makeSymbolTable()
		local
			child,
			f,
			field
		
		locate := location(current_package, current_object, current_method, current_invoc, current_codeblocktype)
		write("idlist_node: ", current_symbol_table.ident)
		write("idlist current access:", current_access)
		if *children < 2 then {
			child := getNodeLabel(children[1])
			field := Field_Ref(locate, child, current_access)
			field.address := current_symbol_table.generate_local()
			if f := current_symbol_table.inScope(field.ident) then {
				current_symbol_table.addField(field)
			} else {
				current_symbol_table.addField(field)
			}
		} else {
			child := getNodeLabel(children[3])
			field := Field_Ref(locate, child, current_access)
			field.address := current_symbol_table.generate_local()
			if f := current_symbol_table.inScope(field.ident) then {
				current_symbol_table.addField(field)
			} else {
				current_symbol_table.addField(field)
			}
			children[1].makeSymbolTable(locate)
		}
	end
	
	method typeCheck()
		local
			child
		
		every child := !children do {
			if type(child) ?? "node" then child.typeCheck()
		}
		nodeType := ListType()
	end
initially(ch)
	self$node.initially("idlist", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class parmlist_node : node ()
	local
		paramlist

	method typeCheck()
		local
			child
		
		locate := location(current_package, current_object, current_method, current_invoc, current_codeblocktype)
		every child := !children do {
			if type(child) ?? "node" then child.typeCheck()
		}
		if *children = 1 then {
			put(paramlist, children[1].arg)
		} else if *children = 3 then {
			paramlist ||| children[1].paramlist
			put(paramlist, children[3].arg)
		}
		
	end
initially(ch)
	paramlist := []
	self$node.initially("parmlist", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class arg_node : node ()
	local 
		number,
		arg
		
	method makeSymbolTable()
		local
			child,
			field
		
		locate := location(current_package, current_object, current_method, current_invoc, current_codeblocktype)
		write("-----------------/narg_node:current_package: ", current_package)
		if /current_object then write("arg_node:current_object: ", current_object)
		if /current_method then write("arg_node:current_method: ", current_method)
		if /current_invoc then write("arg_node:current_invoc: ", current_invoc)
		if /current_codeblocktype then write("arg_node:current_codeblocktype: ", current_codeblocktype)
		write(getNodeLabel(children[1]))
		if *children = 1 then {
			child := getNodeLabel(children[1])
			field := Field_Ref(locate, child, current_access)
			write(field.to_string())
			current_symbol_table.addField(field)
		} #else if *children = 3 then {
#			if type(children[3]) ?? "token" then {
#			
#			} else {
#			
#			}
#		} else if *children = 5 then {
#		
#		}
#		every child := !children do {
#			if type(child) ?? "node" then child.makeSymbolTable()
#		}

	end
	
	method typeCheck()
		local
			child
			
		every child := !children do {
			if type(child) ?? "node" then child.typeCheck()
		}
#		current_symbol_table := current_symbol_table.root()
#		current_symbol_table := current_symbol_table.getTable(locate.packagename)
#		if \current_object then {
#			current_symbol_table := current_symbol_table.getTable(locate.current_object)
#		}
#		if \current_method then {
#			current_symbol_table := current_symbol_table.getTable(locate.current_method)
#		}
#		if *children = 1 then {
#			arg := current_symbol_table.getField(children[1])
			
#		}
		
	end
	
initially(n, ch)
	number := n
	self$node.initially("arg" || number, ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class locals_node : node ()
	local
		number
	
initially(n, ch)
	number := n
	self$node.initially("locals" || number, ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class local_node : node ()
	method makeSymbolTable()
		local
			child
		
		current_access := label
		locate := location(current_package, current_object, current_method, current_invoc, current_codeblocktype)
		every child := !children do {
			if type(child) ?? "node" then child.makeSymbolTable()
		}
	end
	
	method typeCheck()
		local
			child
		
		current_access := label
		locate := location(current_package, current_object, current_method, current_invoc, current_codeblocktype)
		every child := !children do {
			if type(child) ?? "node" then child.typeCheck()
		}
	end
initially(l, ch)
	label := l
	self$node.initially(label, ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class static_node : node ()
	method makeSymbolTable()
		local
			child
		
		current_access := label
		locate := location(current_package, current_object, current_method, current_invoc, current_codeblocktype)
		every child := !children do {
			if type(child) ?? "node" then child.typeCheck()
		}
	end
initially(l, ch)
	label := l
	self$node.initially(label, ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class private_node : node ()
	method makeSymbolTable()
		local
			child
		
		current_access := label
		locate := location(current_package, current_object, current_method, current_invoc, current_codeblocktype)
		every child := !children do {
			if type(child) ?? "node" then child.typeCheck()
		}
	end
initially(l, ch)
	label := l
	self$node.initially(label, ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class methbody_node : node ()
	method makeSymbolTable()
		local
			child
		
		current_access := "method"
		locate := location(current_package, current_object, current_method, current_invoc, current_codeblocktype)
		every child := !children do {
			if type(child) ?? "node" then child.makeSymbolTable()
		}
	end
	
	method typeCheck()
		local
			child
			
		current_access := "method"
		every child := !children do {
			if type(child) ?? "node" then child.typeCheck()
		}
	end

initially(ch)
	self$node.initially("methbody", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

# Expressions

class expr_node : node ()
initially(ch)
	self$node.initially("expr", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class and_node : node ()
initially(ch)
	self$node.initially("and", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class swap_node : node ()
initially(ch)
	self$node.initially("swap", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

# redo typeCheck with scopeCheck()
class assign_node : node ()	
	method makeSymbolTable() 
		local
			child,
			oldCodeblocktype
		
		oldCodeblocktype := current_codeblocktype
		
		write(type(self) || " Current Symbol Table: " || current_symbol_table.ident)
		locate := location(current_package, current_object, current_method, current_invoc, current_codeblocktype)
		if \children then {
			current_codeblocktype := "assign"
			children[1].makeSymbolTable()
			current_codeblocktype := oldCodeblocktype
			children[3].makeSymbolTable()
		}
	end 
	
	method typeCheck()
		local
			child,
			child2,
			item,
			item2,
			token,
			field
		
		every child := !children do {
			if type(child) ?? "node" then child.typeCheck()
		}
		write("assign_node")
		current_symbol_table := setCurrentTable()
	#	current_symbol_table := current_symbol_table.root()
	#	current_symbol_table := current_symbol_table.getTable(locate.packagename)
	#	if \locate.objectname then current_symbol_table := current_symbol_table.getTable(locate.objectname)
	#	if \locate.methodname then current_symbol_table := current_symbol_table.getTable(locate.methodname)
	#	if \locate.invocname then current_symbol_table := current_symbol_table.getTable(locate.invocname)
		child := getNodeLabel(children[1])
	#--------------------------------------------------------------------------------------
		if \(item := current_symbol_table.inScope(child)) then {
			if item.access == "const" then {
				yyerror2(606, "constant error", token.string, token)
			} else {
				if type(children[3]) ?? "token" then {
					child2 := getNodeLabel(children[3])
					if \(item2 := current_symbol_table.inScope(child2)) then {
						item.reference := item2
						field := current_symbol_table.generate_local_Field(item2.type, item2)
						current_symbol_table.addField(field)
					} else {
						yyerror2(605, "semantic error", label, children[3])
					}
				} else {
					write("found: ",type(children[3]), " ; ", children[3].label)
					field := children[3].generate_local_Field(current_symbol_table)
				}
			}		
			item.reference := field
		} else {
			item := children[1]
			while type(item) ?? "node" do {
				item := item.children[1]
			}
			if type(children[1]) ?? "token" then {
				yyerror2(605, "semantic error", label, children[1])
			} else {
				write("assign_node: not in scope, something else: ", item.to_string())
			}
		}
		#---------------------------------------------------------------------------------
	end
initially(ch)
	self$node.initially("assign", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class invocAssign_node : node ()
initially(ch)
	self$node.initially("invocAssign", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class condAssign_node : node()
initially(ch)
	self$node.initially("condAssign", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class Bdiffa_node : node ()
initially(ch)
	self$node.initially("Bdiffa", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class Buniona_node : node ()
initially(ch)
	self$node.initially("Buniona", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class Bplusa_node : node ()
initially(ch)
	self$node.initially("Bplusa", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class Bminusa_node : node ()
initially(ch)
	self$node.initially("Bminusa", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class Bstara_node : node ()
initially(ch)
	self$node.initially("Bstara", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class Bintera_node : node ()
initially(ch)
	self$node.initially("Binter", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class Bslasha_node : node ()
initially(ch)
	self$node.initially("Bslasha", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class Bmoda_node : node ()
initially(ch)
	self$node.initially("Bmoda", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class Bcareta_node : node ()
initially(ch)
	self$node.initially("Bcareta", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class Baugeq_link_node : node ()
initially(ch)
	self$node.initially("Baugeq", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class Baugge_node : node ()
initially(ch)
	self$node.initially("Baugge", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class Bauggt_node : node ()
initially(ch)
	self$node.initially("Bauggt", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class Baugle_node : node ()
initially(ch)
	self$node.initially("Baugle", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class Bauglt_node : node ()
initially(ch)
	self$node.initially("Bauglt", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class Baugne_node : node ()
initially(ch)
	self$node.initially("Baugne", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class Baugques_node : node ()
initially(ch)
	self$node.initially("Baugques", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class Baugamper_node : node ()
initially(ch)
	self$node.initially("Baugamper", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class to_node : node ()
initially(ch)
	self$node.initially("to", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class toby_node : node ()
initially(ch)
	self$node.initially("toby", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class bar_node : node ()
initially(ch)
	self$node.initially("|", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class Beq_node : node ()
initially(ch)
	self$node.initially("beq", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class Bge_node : node ()
initially(ch)
	self$node.initially("Bge", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class Bgt_node : node ()
initially(ch)
	self$node.initially("Bgt", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class Ble_node : node ()
initially(ch)
	self$node.initially("Ble", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class Blt_node : node ()
initially(ch)
	self$node.initially("Blt", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class Bne_node : node ()
initially(ch)
	self$node.initially("Bne", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class Bplus_node : node ()
	
initially(ch)
	self$node.initially("Bplus", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class Bdiff_node : node ()
	
initially(ch)
	self$node.initially("Bdiff", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class Bunion_node : node ()
	
initially(ch)
	self$node.initially("Bunion", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class Bminus_node : node ()
	
initially(ch)
	self$node.initially("Bminus", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class Bstar_node : node ()
	
initially(ch)
	self$node.initially("Bstar", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class Binter_node : node ()
	
initially(ch)
	self$node.initially("Binter", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class Bslash_node : node ()
	
initially(ch)
	self$node.initially("Bslash", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class Bmod_node : node ()
	
initially(ch)
	self$node.initially("Bmod", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class Bcaret_node : node ()
	
initially(ch)
	self$node.initially("Bcaret", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class limit_node : node ()
	
initially(ch)
	self$node.initially("limit", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class apply_node : node ()
	
initially(ch)
	self$node.initially("apply", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class uat_node : node ()
	
initially(ch)
	self$node.initially("ubar", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class ubar_node : node ()
	
initially(ch)
	self$node.initially("ubar", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class udot_node : node ()
	
initially(ch)
	self$node.initially("udot", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class ubang_node : node ()
	
initially(ch)
	self$node.initially("ubang", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class udiff_node : node ()
	
initially(ch)
	self$node.initially("udiff", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class uplus_node : node ()
	
initially(ch)
	self$node.initially("uplus", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class ustar_node : node ()
	
initially(ch)
	self$node.initially("ustar", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class uslash_node : node ()
	
initially(ch)
	self$node.initially("uslash", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class ucaret_node : node ()
	
initially(ch)
	self$node.initially("ucaret", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class uinter_node : node ()
	
initially(ch)
	self$node.initially("uinter", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class utilde_node : node ()
	
initially(ch)
	self$node.initially("utilde", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class uminus_node : node ()
	
initially(ch)
	self$node.initially("uminus", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class unumne_node : node ()
	
initially(ch)
	self$node.initially("unumne", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class uunion_node : node ()
	
initially(ch)
	self$node.initially("uunion", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class uqmark_node : node ()
	
initially(ch)
	self$node.initially("uqmark", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class ubackslash_node : node ()
	
initially(ch)
	self$node.initially("ubackslash", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class section_node : node ()
	
initially(ch)
	self$node.initially("section", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class return_node : node ()
initially(ch)
	self$node.initially("return", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class if_node : node ()
initially(ch)
	self$node.initially("if", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class case_node : node ()
initially(ch)
	self$node.initially("case", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class while_node : node ()
initially(ch)
	self$node.initially("while", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class until_node : node ()
initially(ch)
	self$node.initially("until", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class every_node : node ()
initially(ch)
	self$node.initially("every", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class repeat_node : node ()
initially(ch)
	self$node.initially("repeat", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class ident_node : node ()
	method makeSymbolTable()
		local
			field,
			ident,
			item,
			child
		
		locate := location(current_package, current_object, current_method, current_invoc, current_codeblocktype) 
		ident := value	
		if /(item := current_symbol_table.inScope(ident))then {
	#		write(type(field))
			yyerror2(605, "semantic error", ident, children[1])
		} 
		field := current_symbol_table.generate_local_Field(PointerType(), item)
		current_symbol_table.addField(field)

		every child := !children do {
			if type(child) ?? "node" then child.makeSymbolTable()
		}
	end
	
	method typeCheck()
		local
			field,
			ident,
			item,
			child
		

		every child := !children do {
			if type(child) ?? "node" then child.makeSymbolTable()
		}
		
		if \(item := current_symbol_table.inScope(getNodeLabel(children[1])))then {
			write("found it")
		}  else {
			yyerror2(605, "semantic error", getNodeLabel(children[1]), children[1])
		}
	#	field := current_symbol_table.generate_local_Field(PointerType(), item)
	#	current_symbol_table.addField(field)
	end
	
	
initially(ch)
	self$node.initially("ident", ch)
	write("ident_node:child: ",children[1].string)
	value := children[1].string
	write("ident_node:child: ",value)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class next_node : node ()
initially(ch)
	self$node.initially("next", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class Break_node : node ()
initially(ch)
	self$node.initially("Break", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class Paren_node : node ()
initially(ch)
	self$node.initially("Paren", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class Brace_node : node ()
initially(ch)
	self$node.initially("Brace", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class Brack_node : node ()
initially(ch)
	self$node.initially("Brack", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class Subscript_node : node ()
initially(ch)
	self$node.initially("Subscript", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class Pdco_node : node ()
	local
		number

initially(n, ch)
	number := n
	self$node.initially("Pdco" || number, ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class invoke_node : node ()
	method typeCheck()
		local
			referencePackage,
			referenceObject,
			referenceMethod
			
		if type(children[1]) ?? "packageref" then { #package reference
			referencePackage := children[1].referencePackage
			referenceObject := children[1].referenceObject
		} else if type(children[1]) ?? "field" then {
			if type(children[1].children[3]) == "token" then {
				referenceObject := children[1].referenceObject
				
				referenceMethod := children[1].referenceMethod
			} else { 
				
			}
		}
	end
initially(ch)
	self$node.initially("invoke", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class invocationnode : node ()
initially(ch)
	self$node.initially("invocationnode", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

#use setCurrentTable()
class field_node : node ()
	local
		referencePackage,
		referenceObject,
		referenceMethod
		
	method makeSymbolTable() 
		local
			oldSymbolTable,
			field,
			newField,
			child
			
		write(type(self) || " Current Symbol Table: " || current_symbol_table.ident)
		locate := location(current_package, current_object, current_method, current_invoc, current_codeblocktype)
		current_symbol_table := setCurrentTable()
		oldSymbolTable := current_symbol_table
		if type(children[1]) ?? "ident" then { #ident
	#------------------------------------------------------------------
			current_symbol_table := current_symbol_table.root()
			if \locate.packagename then current_symbol_table := current_symbol_table.getTable(locate.packagename)
			if \locate.objectname then current_symbol_table := current_symbol_table.getTable(locate.objectname)
			field := current_symbol_table.getField(getNodeLabel(children[3]))
			newField := oldSymbolTable.generate_local_Field(PointerType(), field)
	#-------------------------------------------------------------------
			oldSymbolTable.addField(newField)
		} else {
			
		}
		
		if \children then {
			every child := !children do {
				if type(child) ?? "node" then child.makeSymbolTable(locate)
			}
		}
		current_symbol_table := oldSymbolTable
	end 
	
	method typeCheck() 
		local
			assignmentFlag,
			child
		
		if \children then {
			every child := !children do {
				if type(child) ?? "node" then child.typeCheck()
			}
			
			if locate.codeblocktype == "assign" then assignmentFlag := "true"
			
			if type(children[3]) ?? "token" then { # IDENT
				child := getNodeLabel(children[3])
				if \child then { # IDENT found
					current_symbol_table := setCurrentTable()
					referenceObject := locate.
					refLoc := locate
					if /refLoc then refLoc := locate
					
					if \scopeCheck(locate, refLoc, child, assignmentFlag, children[3]) then {
						referencePackage := locate.packagename
						referenceObject := locate.objectname
						referenceMethod := locate.methodname
					}
				} else {
					yyerror2(611, "Scope Error", child, children[3])
				}
			} else { #package reference
				refLoc := children[3].refLoc
			}
		}
	end
initially(ch)
	self$node.initially("field", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class keyword_node : node ()
initially(ch)
	self$node.initially("keyword", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class While_node : node ()
	local
		number

initially(n, ch)
number := n
	self$node.initially("While" || number, ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class Until_node : node ()
	local
		number

initially(n, ch)
	number := n
	self$node.initially("until" || number, ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class Every_node : node ()
	local
		number

initially(n, ch)
	number := n
	self$node.initially("every" || number, ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class Repeat_node : node ()
	local
		number

initially(n, ch)
	number := n
	self$node.initially("repeat" || number, ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class Return_node : node ()
	local
		number

initially(n, ch)
	number := n
	self$node.initially("return" || number, ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class Suspend_node : node ()
	local
		number

initially(n, ch)
	number := n
	self$node.initially("suspend" || number, ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class If_node : node ()
	local
		number

initially(n, ch)
	number := n
	self$node.initially("if" || number, ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class Case_node : node ()
	local
		number

initially(n, ch)
	number := n
	self$node.initially("case" || number, ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class caselist_node : node ()
initially(n, ch)
	self$node.initially("Caselist", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class cclause_node : node ()
	local
		number

initially(n, ch)
	number := n
	self$node.initially("cclause" || number, ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class exprlist_node : node ()
initially(ch)
	self$node.initially("exprlist", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class pdcolist_node : node ()
	local
		number

initially(n, ch)
	number := n
	self$node.initially("pdcolist" || number, ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class intlit_node : node ()
	local
		field
		
	method makeSymbolTable()
		field := current_symbol_table.generate_local_Field(IntegerType())
		field.value := value
		current_symbol_table.addField(field)
		nodeType := field.typ
	end
	
initially(ch)
	self$node.initially("intlit", ch)
	value := integer(children[1].string)	
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class reallit_node : node ()	
	local
		field
		
	method makeSymbolTable()
		field := current_symbol_table.generate_local_Field(RealType())
		field.value := value
		current_symbol_table.addField(field)
		nodeType := field.typ
	end
initially(ch)
	self$node.initially("reallit", ch)
	value := real(children[1].string)	
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class stringlit_node : node ()
	local
		field,
		addr
		
	method makeSymbolTable()
		field := current_symbol_table.generate_local_Field(StringType())
		field.value := value
		address := field.address
		current_symbol_table.addField(field)
		nodeType := field.typ
	end

initially(ch)
	self$node.initially("stringlit", ch)
	value := children[1].string	
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class csetlit_node : node ()
		local
		field
		
	method makeSymbolTable()
		field := current_symbol_table.generate_local_Field(CSetType())
		field.value := value
		current_symbol_table.addField(field)
		nodeType := field.typ
	end
initially(ch)
	self$node.initially("csetlit", ch)
	value := cset(children[1].string)	
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class colon_node : node ()
initially(ch)
	self$node.initially("colon", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class pcolon_node : node ()
initially(ch)
	self$node.initially("pcolon", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class mcolon_node : node ()
initially(ch)
	self$node.initially("mcolon", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class compound_node : node ()
initially(ch)
	self$node.initially("compound", ch)
	if \children then every child := !children do {
		if \child & type(child) ~== "string" then child.parent := self
	}
end

class error_node : node ()
initially
	
end
